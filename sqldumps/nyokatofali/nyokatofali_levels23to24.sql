93	Volume of a Cone	You have been given a function called <code>volumeCone</code> that takes a radius <code>r</code>, side length <code>s</code>, and height <code>h</code> of a cone.\r\n<br/>\r\n<br/>\r\nReturn the volume of the cone:\r\n\r\n$$V = \\frac{1}{3} \\pi r^2 h $$	<block type="def" id="Eqq[fvJW_jmnVA05w`uc" x="89" y="46">\r\n    <field name="funcname">volumeCone</field>\r\n    <field name="funcargs">r, s, h</field>\r\n    </statement>\r\n  </block>	NTPRINT("\\n=== Testing your program... =============================")\r\ntests_passed = 0\r\ntests = [(0, 0, 0), (1, 5, 10), (2, 5, 20), (3, 6, 18), (4, 7, 21), (5, 20, 100), (10, 6, 7), (1000, 50, 2000), (10000, 55555, 10), (3453, 234, 2404), (43043, 888, 109)]\r\ndef verifier_results():\r\n    if tests_passed == len(tests):\r\n      NTPRINT("ALL TESTS PASSED.")\r\n    NTPRINT('NT_VERIFIER_RESULTS:%d:%d' % (tests_passed, len(tests)))\r\n    import sys\r\n    sys.exit(0)\r\nfor (r, s, h) in tests:\r\n    import math\r\n    NT_ANSWER = (1/3) * math.pi * (r**2) * h\r\n    NTPRINT("\\nTEST) Did you answer %s for r=%d, s=%d, h=%d?" % (NT_ANSWER, r, s, h))\r\n    response = volumeCone(r, s, h)\r\n    if response == NT_ANSWER:\r\n        NTPRINT("\\t-> CORRECT")\r\n        tests_passed += 1\r\n    else:\r\n        NTPRINT("\\t-> INCORRECT. You answer '%s'. Try again." % response)\r\nverifier_results()	23
94	Surface Area of a Rectangular Prism	You have been given a function called <code>surfaceAreaRectPrism</code> that takes a length <code>l</code>, width <code>w</code>, and height <code>h</code> of a rectangular prism.\r\n<br/>\r\n<br/>\r\nReturn the surface area of the prism:\r\n\r\n$$SA = 2(lw + lh + wh)$$	<block type="def" id="Eqq[fvJW_jmnVA05w`uc" x="89" y="46">\r\n    <field name="funcname">surfaceAreaRectPrism</field>\r\n    <field name="funcargs">l, w, h</field>\r\n    </statement>\r\n  </block>	NTPRINT("\\n=== Testing your program... =============================")\r\ntests_passed = 0\r\ntests = [(0, 0, 0), (1, 5, 10), (2, 5, 20), (3, 6, 18), (4, 7, 21), (5, 20, 100), (10, 6, 7), (1000, 50, 2000), (10000, 55555, 10), (3453, 234, 2404), (43043, 888, 109)]\r\ndef verifier_results():\r\n    if tests_passed == len(tests):\r\n      NTPRINT("ALL TESTS PASSED.")\r\n    NTPRINT('NT_VERIFIER_RESULTS:%d:%d' % (tests_passed, len(tests)))\r\n    import sys\r\n    sys.exit(0)\r\nfor (l, w, h) in tests:\r\n    import math\r\n    NT_ANSWER = 2*(l*w + l*h + w*h)\r\n    NTPRINT("\\nTEST) Did you answer %s for l=%d, w=%d, h=%d?" % (NT_ANSWER, l, w, h))\r\n    response = surfaceAreaRectPrism(l, w, h)\r\n    if response == NT_ANSWER:\r\n        NTPRINT("\\t-> CORRECT")\r\n        tests_passed += 1\r\n    else:\r\n        NTPRINT("\\t-> INCORRECT. You answer '%s'. Try again." % response)\r\nverifier_results()	23
95	Volume of a Rectangular Prism	You have been given a function called <code>volumeRectPrism</code> that takes a length <code>l</code>, width <code>w</code>, and height <code>h</code> of a rectangular prism.\r\n<br/>\r\n<br/>\r\nReturn the volume of the prism:\r\n\r\n$$V =lwh$$	<block type="def" id="Eqq[fvJW_jmnVA05w`uc" x="89" y="46">\r\n    <field name="funcname">volumeRectPrism</field>\r\n    <field name="funcargs">l, w, h</field>\r\n    </statement>\r\n  </block>	NTPRINT("\\n=== Testing your program... =============================")\r\ntests_passed = 0\r\ntests = [(0, 0, 0), (1, 5, 10), (2, 5, 20), (3, 6, 18), (4, 7, 21), (5, 20, 100), (10, 6, 7), (1000, 50, 2000), (10000, 55555, 10), (3453, 234, 2404), (43043, 888, 109)]\r\ndef verifier_results():\r\n    if tests_passed == len(tests):\r\n      NTPRINT("ALL TESTS PASSED.")\r\n    NTPRINT('NT_VERIFIER_RESULTS:%d:%d' % (tests_passed, len(tests)))\r\n    import sys\r\n    sys.exit(0)\r\nfor (l, w, h) in tests:\r\n    import math\r\n    NT_ANSWER = l * w * h\r\n    NTPRINT("\\nTEST) Did you answer %s for l=%d, w=%d, h=%d?" % (NT_ANSWER, l, w, h))\r\n    response = volumeRectPrism(l, w, h)\r\n    if response == NT_ANSWER:\r\n        NTPRINT("\\t-> CORRECT")\r\n        tests_passed += 1\r\n    else:\r\n        NTPRINT("\\t-> INCORRECT. You answer '%s'. Try again." % response)\r\nverifier_results()	23
96	Surface Area of a Triangular Prism	You have been given a function called <code>surfaceAreaTriPrism</code> that takes a depth <code>d</code>, side length <code>s</code>, height <code>h</code>, and base width <code>b</code> of a triangular prism.\r\n<br/>\r\n<br/>\r\nReturn the surface area of the triangular prism:\r\n\r\n$$SA = bh + 2ds + db$$	<block type="def" id="Eqq[fvJW_jmnVA05w`uc" x="89" y="46">\r\n    <field name="funcname">surfaceAreaTriPrism</field>\r\n    <field name="funcargs">d, s, h, b</field>\r\n    </statement>\r\n  </block>	NTPRINT("\\n=== Testing your program... =============================")\r\ntests_passed = 0\r\ntests = [(0, 0, 0, 0), (1, 5, 10, 13), (2, 5, 20, 15), (3, 6, 18, 4), (4, 7, 21, 18), (5, 20, 100, 90), (10, 6, 7, 5), (1000, 50, 2000, 1900), (10000, 55555, 10, 888), (3453, 234, 2404, 20), (43043, 888, 109, 88)]\r\ndef verifier_results():\r\n    if tests_passed == len(tests):\r\n      NTPRINT("ALL TESTS PASSED.")\r\n    NTPRINT('NT_VERIFIER_RESULTS:%d:%d' % (tests_passed, len(tests)))\r\n    import sys\r\n    sys.exit(0)\r\nfor (d, s, h, b) in tests:\r\n    import math\r\n    NT_ANSWER = (b*h) + (2*d*s) + (d*b)\r\n    NTPRINT("\\nTEST) Did you answer %s for d=%d, s=%d, h=%d, b=%d?" % (NT_ANSWER, d, s, h, b))\r\n    response = surfaceAreaTriPrism(d, s, h, b)\r\n    if response == NT_ANSWER:\r\n        NTPRINT("\\t-> CORRECT")\r\n        tests_passed += 1\r\n    else:\r\n        NTPRINT("\\t-> INCORRECT. You answer '%s'. Try again." % response)\r\nverifier_results()	23
97	Volume of a Triangular Prism	You have been given a function called <code>volumeTriPrism</code> that takes a depth <code>d</code>, side length <code>s</code>, height <code>h</code>, and base width <code>b</code> of a triangular prism.\r\n<br/>\r\n<br/>\r\nReturn the volume of the triangular prism:\r\n\r\n$$V = \\frac{1}{2} b d h$$	<block type="def" id="Eqq[fvJW_jmnVA05w`uc" x="89" y="46">\r\n    <field name="funcname">volumeTriPrism</field>\r\n    <field name="funcargs">d, s, h, b</field>\r\n    </statement>\r\n  </block>	NTPRINT("\\n=== Testing your program... =============================")\r\ntests_passed = 0\r\ntests = [(0, 0, 0, 0), (1, 5, 10, 13), (2, 5, 20, 15), (3, 6, 18, 4), (4, 7, 21, 18), (5, 20, 100, 90), (10, 6, 7, 5), (1000, 50, 2000, 1900), (10000, 55555, 10, 888), (3453, 234, 2404, 20), (43043, 888, 109, 88)]\r\ndef verifier_results():\r\n    if tests_passed == len(tests):\r\n      NTPRINT("ALL TESTS PASSED.")\r\n    NTPRINT('NT_VERIFIER_RESULTS:%d:%d' % (tests_passed, len(tests)))\r\n    import sys\r\n    sys.exit(0)\r\nfor (d, s, h, b) in tests:\r\n    import math\r\n    NT_ANSWER = (1/2) * b * d * h\r\n    NTPRINT("\\nTEST) Did you answer %s for d=%d, s=%d, h=%d, b=%d?" % (NT_ANSWER, d, s, h, b))\r\n    response = volumeTriPrism(d, s, h, b)\r\n    if response == NT_ANSWER:\r\n        NTPRINT("\\t-> CORRECT")\r\n        tests_passed += 1\r\n    else:\r\n        NTPRINT("\\t-> INCORRECT. You answer '%s'. Try again." % response)\r\nverifier_results()	23
98	Area of an Octagon	You have been given a function called <code>areaOctagon</code> that takes a side length <code>s</code> of an octagon.\r\n<br/>\r\n<br/>\r\nReturn the area of the octagon:\r\n\r\n$$A = (2 + 2 \\sqrt{2}) s^2 $$	<block type="def" id="Eqq[fvJW_jmnVA05w`uc" x="89" y="46">\r\n    <field name="funcname">areaOctagon</field>\r\n    <field name="funcargs">s</field>\r\n    </statement>\r\n  </block>	NTPRINT("\\n=== Testing your program... =============================")\r\ntests_passed = 0\r\ntests = [0, 1, 2, 3, 4, 5, 10, 1000, 10000, 3453, 234234, 43043, 888]\r\ndef verifier_results():\r\n    if tests_passed == len(tests):\r\n      NTPRINT("ALL TESTS PASSED.")\r\n    NTPRINT('NT_VERIFIER_RESULTS:%d:%d' % (tests_passed, len(tests)))\r\n    import sys\r\n    sys.exit(0)\r\nfor s in tests:\r\n    import math\r\n    NT_ANSWER = (2 + 2*math.sqrt(2)) * (s**2)\r\n    NTPRINT("\\nTEST) Did you answer %s for %d?" % (NT_ANSWER, s))\r\n    response = areaOctagon(s)\r\n    if response == NT_ANSWER:\r\n        NTPRINT("\\t-> CORRECT")\r\n        tests_passed += 1\r\n    else:\r\n        NTPRINT("\\t-> INCORRECT. You answer '%s'. Try again." % response)\r\nverifier_results()	24
89	Surface Area of a Sphere	You have been given a function called <code>surfaceAreaSphere</code> that takes a radius <code>r</code> of a sphere.\r\n<br/>\r\n<br/>\r\nReturn the surface area of the sphere:\r\n\r\n$$SA = 4\\pi r^2 $$	<block type="def" id="Eqq[fvJW_jmnVA05w`uc" x="89" y="46">\r\n    <field name="funcname">surfaceAreaSphere</field>\r\n    <field name="funcargs">r</field>\r\n    </statement>\r\n  </block>	NTPRINT("\\n=== Testing your program... =============================")\r\ntests_passed = 0\r\ntests = [0, 1, 2, 3, 4, 5, 10, 1000, 10000, 3453, 234234, 43043, 888]\r\ndef verifier_results():\r\n    if tests_passed == len(tests):\r\n      NTPRINT("ALL TESTS PASSED.")\r\n    NTPRINT('NT_VERIFIER_RESULTS:%d:%d' % (tests_passed, len(tests)))\r\n    import sys\r\n    sys.exit(0)\r\nfor r in tests:\r\n    import math\r\n    NT_ANSWER = 4 * math.pi * (r**2)\r\n    NTPRINT("\\nTEST) Did you answer %s for %d?" % (NT_ANSWER, r))\r\n    response = surfaceAreaSphere(r)\r\n    if response == NT_ANSWER:\r\n        NTPRINT("\\t-> CORRECT")\r\n        tests_passed += 1\r\n    else:\r\n        NTPRINT("\\t-> INCORRECT. You answer '%s'. Try again." % response)\r\nverifier_results()	23
90	Surface Area of a Cylinder	You have been given a function called <code>surfaceAreaCylinder</code> that takes a radius <code>r</code> and height <code>h</code> of a cylinder.\r\n<br/>\r\n<br/>\r\nReturn the surface area of the cylinder:\r\n\r\n$$SA = 2\\pi r^2 + 2\\pi r h $$	<block type="def" id="Eqq[fvJW_jmnVA05w`uc" x="89" y="46">\r\n    <field name="funcname">surfaceAreaCylinder</field>\r\n    <field name="funcargs">r, h</field>\r\n    </statement>\r\n  </block>	NTPRINT("\\n=== Testing your program... =============================")\r\ntests_passed = 0\r\ntests = [(0, 0), (1, 10), (2, 5), (3, 6), (4, 7), (5, 20), (10, 6), (1000, 50), (10000, 55555), (3453, 234234), (43043, 888)]\r\ndef verifier_results():\r\n    if tests_passed == len(tests):\r\n      NTPRINT("ALL TESTS PASSED.")\r\n    NTPRINT('NT_VERIFIER_RESULTS:%d:%d' % (tests_passed, len(tests)))\r\n    import sys\r\n    sys.exit(0)\r\nfor (r, h) in tests:\r\n    import math\r\n    NT_ANSWER = (2 * math.pi * (r**2)) + (2 * math.pi * r * h)\r\n    NTPRINT("\\nTEST) Did you answer %s for r=%d, h=%d?" % (NT_ANSWER, r, h))\r\n    response = surfaceAreaCylinder(r, h)\r\n    if response == NT_ANSWER:\r\n        NTPRINT("\\t-> CORRECT")\r\n        tests_passed += 1\r\n    else:\r\n        NTPRINT("\\t-> INCORRECT. You answer '%s'. Try again." % response)\r\nverifier_results()	23
91	Volume of a Cylinder	You have been given a function called <code>volumeCylinder</code> that takes a radius <code>r</code> and height <code>h</code> of a cylinder.\r\n<br/>\r\n<br/>\r\nReturn the volume of the cylinder:\r\n\r\n$$V = \\pi r^2 h $$	<block type="def" id="Eqq[fvJW_jmnVA05w`uc" x="89" y="46">\r\n    <field name="funcname">volumeCylinder</field>\r\n    <field name="funcargs">r, h</field>\r\n    </statement>\r\n  </block>	NTPRINT("\\n=== Testing your program... =============================")\r\ntests_passed = 0\r\ntests = [(0, 0), (1, 10), (2, 5), (3, 6), (4, 7), (5, 20), (10, 6), (1000, 50), (10000, 55555), (3453, 234234), (43043, 888)]\r\ndef verifier_results():\r\n    if tests_passed == len(tests):\r\n      NTPRINT("ALL TESTS PASSED.")\r\n    NTPRINT('NT_VERIFIER_RESULTS:%d:%d' % (tests_passed, len(tests)))\r\n    import sys\r\n    sys.exit(0)\r\nfor (r, h) in tests:\r\n    import math\r\n    NT_ANSWER = math.pi * (r**2) * h\r\n    NTPRINT("\\nTEST) Did you answer %s for r=%d, h=%d?" % (NT_ANSWER, r, h))\r\n    response = volumeCylinder(r, h)\r\n    if response == NT_ANSWER:\r\n        NTPRINT("\\t-> CORRECT")\r\n        tests_passed += 1\r\n    else:\r\n        NTPRINT("\\t-> INCORRECT. You answer '%s'. Try again." % response)\r\nverifier_results()	23
92	Surface Area of a Cone	You have been given a function called <code>surfaceAreaCone</code> that takes a radius <code>r</code>, side length <code>s</code>, and height <code>h</code> of a cone.\r\n<br/>\r\n<br/>\r\nReturn the surface area of the cone:\r\n\r\n$$SA = \\pi r s + \\pi r^2 $$	<block type="def" id="Eqq[fvJW_jmnVA05w`uc" x="89" y="46">\r\n    <field name="funcname">surfaceAreaCone</field>\r\n    <field name="funcargs">r, s, h</field>\r\n    </statement>\r\n  </block>	NTPRINT("\\n=== Testing your program... =============================")\r\ntests_passed = 0\r\ntests = [(0, 0, 0), (1, 5, 10), (2, 5, 20), (3, 6, 18), (4, 7, 21), (5, 20, 100), (10, 6, 7), (1000, 50, 2000), (10000, 55555, 10), (3453, 234, 2404), (43043, 888, 109)]\r\ndef verifier_results():\r\n    if tests_passed == len(tests):\r\n      NTPRINT("ALL TESTS PASSED.")\r\n    NTPRINT('NT_VERIFIER_RESULTS:%d:%d' % (tests_passed, len(tests)))\r\n    import sys\r\n    sys.exit(0)\r\nfor (r, s, h) in tests:\r\n    import math\r\n    NT_ANSWER = math.pi * r * s + math.pi * (r**2)\r\n    NTPRINT("\\nTEST) Did you answer %s for r=%d, s=%d, h=%d?" % (NT_ANSWER, r, s, h))\r\n    response = surfaceAreaCone(r, s, h)\r\n    if response == NT_ANSWER:\r\n        NTPRINT("\\t-> CORRECT")\r\n        tests_passed += 1\r\n    else:\r\n        NTPRINT("\\t-> INCORRECT. You answer '%s'. Try again." % response)\r\nverifier_results()	23
