110	Log Problem 1	Complete the <code>logProblem1</code> function so that it correctly evaluates this formula:\r\n\r\n<center><p style="font-size: 1.5em">$$ \\frac{\\log_{10}{n}}{n - \\frac{4n}{2}}  $$</p></center>	<block type="def" id="Eqq[fvJW_jmnVA05w`uc" x="89" y="46">\r\n    <field name="funcname">logProblem1</field>\r\n    <field name="funcargs">n</field>\r\n    </statement>\r\n  </block>	NTPRINT("\\n=== Testing your program... =============================")\r\ntests_passed = 0\r\ntests = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 100, 1393, 4203, 2402, 29, 4204, 88]\r\ndef verifier_results():\r\n    if tests_passed == len(tests):\r\n      NTPRINT("ALL TESTS PASSED.")\r\n    NTPRINT('NT_VERIFIER_RESULTS:%d:%d' % (tests_passed, len(tests)))\r\n    import sys\r\n    sys.exit(0)\r\nfor n in tests:\r\n    import math\r\n    NT_ANSWER = "%.2f" % (math.log10(n) / (n - ((4*n)/2)))\r\n    NTPRINT("\\nTEST) Did you answer %s for %d?" % (NT_ANSWER, n))\r\n    response = "%.2f" % logProblem1(n)\r\n    if response == NT_ANSWER:\r\n        NTPRINT("\\t-> CORRECT")\r\n        tests_passed += 1\r\n    else:\r\n        NTPRINT("\\t-> INCORRECT. You answer %s. Try again." % response)\r\nverifier_results()	33
111	Log Problem 2	Complete the <code>logProblem2</code> function so that it correctly evaluates this formula:\r\n\r\n<center><p style="font-size: 1.5em">$$ \\frac{n + \\sqrt{n^2}}{\\log_{10}{n^2} + 15} + \\log_{10}{100} $$</p></center>	<block type="def" id="Eqq[fvJW_jmnVA05w`uc" x="89" y="46">\r\n    <field name="funcname">logProblem2</field>\r\n    <field name="funcargs">n</field>\r\n    </statement>\r\n  </block>	NTPRINT("\\n=== Testing your program... =============================")\r\ntests_passed = 0\r\ntests = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 100, 1393, 4203, 2402, 29, 4204, 88]\r\ndef verifier_results():\r\n    if tests_passed == len(tests):\r\n      NTPRINT("ALL TESTS PASSED.")\r\n    NTPRINT('NT_VERIFIER_RESULTS:%d:%d' % (tests_passed, len(tests)))\r\n    import sys\r\n    sys.exit(0)\r\nfor n in tests:\r\n    import math\r\n    NT_ANSWER = "%.2f" % (((n + math.sqrt(n**2))/(math.log10(n**2)+15)) + math.log10(100))\r\n    NTPRINT("\\nTEST) Did you answer %s for %d?" % (NT_ANSWER, n))\r\n    response = "%.2f" % logProblem2(n)\r\n    if response == NT_ANSWER:\r\n        NTPRINT("\\t-> CORRECT")\r\n        tests_passed += 1\r\n    else:\r\n        NTPRINT("\\t-> INCORRECT. You answer %s. Try again." % response)\r\nverifier_results()	34
112	Factorial Problem 1	Complete the <code>factorialProblem1</code> function so that it correctly evaluates this formula:\r\n\r\n<center><p style="font-size: 1.5em">$$ n! $$</p></center>	<block type="def" id="Eqq[fvJW_jmnVA05w`uc" x="89" y="46">\r\n    <field name="funcname">factorialProblem1</field>\r\n    <field name="funcargs">n</field>\r\n    </statement>\r\n  </block>	NTPRINT("\\n=== Testing your program... =============================")\r\ntests_passed = 0\r\ntests = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\r\ndef verifier_results():\r\n    if tests_passed == len(tests):\r\n      NTPRINT("ALL TESTS PASSED.")\r\n    NTPRINT('NT_VERIFIER_RESULTS:%d:%d' % (tests_passed, len(tests)))\r\n    import sys\r\n    sys.exit(0)\r\nfor n in tests:\r\n    import math\r\n    NT_ANSWER = "%.2f" % math.factorial(n)\r\n    NTPRINT("\\nTEST) Did you answer %s for %d?" % (NT_ANSWER, n))\r\n    response = "%.2f" % factorialProblem1(n)\r\n    if response == NT_ANSWER:\r\n        NTPRINT("\\t-> CORRECT")\r\n        tests_passed += 1\r\n    else:\r\n        NTPRINT("\\t-> INCORRECT. You answer %s. Try again." % response)\r\nverifier_results()	35
113	Factorial Problem 2	Complete the <code>factorialProblem2</code> function so that it correctly evaluates this formula:\r\n\r\n<center><p style="font-size: 1.5em">$$ \\frac{n!}{(n+1)!}$$</p></center>	<block type="def" id="Eqq[fvJW_jmnVA05w`uc" x="89" y="46">\r\n    <field name="funcname">factorialProblem2</field>\r\n    <field name="funcargs">n</field>\r\n    </statement>\r\n  </block>	NTPRINT("\\n=== Testing your program... =============================")\r\ntests_passed = 0\r\ntests = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\r\ndef verifier_results():\r\n    if tests_passed == len(tests):\r\n      NTPRINT("ALL TESTS PASSED.")\r\n    NTPRINT('NT_VERIFIER_RESULTS:%d:%d' % (tests_passed, len(tests)))\r\n    import sys\r\n    sys.exit(0)\r\nfor n in tests:\r\n    import math\r\n    NT_ANSWER = "%.2f" % (math.factorial(n) / math.factorial(n+1))\r\n    NTPRINT("\\nTEST) Did you answer %s for %d?" % (NT_ANSWER, n))\r\n    response = "%.2f" % factorialProblem2(n)\r\n    if response == NT_ANSWER:\r\n        NTPRINT("\\t-> CORRECT")\r\n        tests_passed += 1\r\n    else:\r\n        NTPRINT("\\t-> INCORRECT. You answer %s. Try again." % response)\r\nverifier_results()	36
114	Sum, Factorial, Log Problem	Complete the <code>sumFactorialLog</code> function so that it correctly evaluates this formula:\r\n\r\n<center><p style="font-size: 1.5em">$$ \\sum_{n}^{20}{\\frac{(n+1)! + log_{10}{n^3}}{n!}}  $$</p></center>\r\n\r\n<br/>\r\n<p style="font-size: 1.5em">Use <code>sum([_______________ for ___ in range(___, _____)])</code> to help you.</p>	<block type="def" id="Eqq[fvJW_jmnVA05w`uc" x="89" y="46">\r\n    <field name="funcname">sumFactorialLog</field>\r\n    <field name="funcargs">n</field>\r\n    </statement>\r\n  </block>	NTPRINT("\\n=== Testing your program... =============================")\r\ntests_passed = 0\r\ntests = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\r\ndef verifier_results():\r\n    if tests_passed == len(tests):\r\n      NTPRINT("ALL TESTS PASSED.")\r\n    NTPRINT('NT_VERIFIER_RESULTS:%d:%d' % (tests_passed, len(tests)))\r\n    import sys\r\n    sys.exit(0)\r\nfor n in tests:\r\n    import math\r\n    NT_ANSWER = "%.2f" % sum([(math.factorial(n+1) + math.log10(n**3))/(math.factorial(n)) for n in range(n, 20)])\r\n    NTPRINT("\\nTEST) Did you answer %s for %d?" % (NT_ANSWER, n))\r\n    response = "%.2f" % sumFactorialLog(n)\r\n    if response == NT_ANSWER:\r\n        NTPRINT("\\t-> CORRECT")\r\n        tests_passed += 1\r\n    else:\r\n        NTPRINT("\\t-> INCORRECT. You answer %s. Try again." % response)\r\nverifier_results()	37
