3	Guanine in DNA	There are four bases in DNA: <b>G</b> (guanine), <b>C</b> (cytosine), <b>A</b> (adenine), and <b>T</b> (thymine). Here is a strand of DNA without guanine in it:\r\n\r\n$$'ATACCATAACCAAATTTTAA'$$\r\n\r\nAnd here is a strand of DNA with guanine in it:\r\n\r\n$$'AGGGGGTTATTACCCATACA'$$\r\n\r\nComplete the Python program so that it returns <i>True</i> if guanine is inside the DNA given to it. If there is no guanine inside the DNA, return <i>False</i>.	<block type="def" id="`Irgur8Q|lxOOLOdIK:i" x="-115" y="16">\r\n    <field name="funcname">guanine_iko</field>\r\n    <field name="funcargs">dna</field>\r\n    <statement name="funcbody">\r\n      <block type="for" id="E*`.ZX}zjM9BHPva@Ja*">\r\n        <field name="item">base</field>\r\n        <field name="seq">dna</field>\r\n        <statement name="stmts">\r\n          <block type="varprint" id="vy)x}JdL;`*pJXh|Mg0J">\r\n            <field name="var">base</field>\r\n          </block>\r\n        </statement>\r\n      </block>\r\n    </statement>\r\n  </block>	print("=== Testing your program... =============================")\r\ntest = 1\r\ntests = [('ACDCADCD', False), ('GGGGGGGG', True), ('AGCDACD', True), ('', False), ('AAAAAA', False)]\r\ndef verifier_results():\r\n    print('NT_VERIFIER_RESULTS:%d:%d' % (test-1, len(tests)))\r\n    import sys\r\n    sys.exit(0)\r\nfor tuple in tests:\r\n    print("TEST %d) Does guanine_iko('%s') return %s?" % (test, tuple[0], tuple[1]))\r\n    result = guanine_iko(tuple[0])\r\n    if result == tuple[1]:\r\n        print("\\t-> CORRECT")\r\n        test += 1\r\n    else:\r\n        print("\\t-> INCORRECT. Your code returns %s. Fix your mistake and try again." % result)\r\n        verifier_results()\r\nprint("ALL TESTS PASSED.")\r\nverifier_results()	3	f
1	Nyerere Alikuwa Rais Lini?	Julius Nyerere was president of Tanzania from 29 October 1964 to 5 November 1985. This Python code should return <i>True</i> if <i>mwaka</i> is 1964, 1965, 1966, ..., or 1985. Otherwise it should return <i>False</i>.\r\n\r\nIf you need to compare <i>mwaka</i> to a number, here are some examples:\r\n<ul>\r\n  <li><i>mwaka <= 1964</i> means "if mwaka is less than or equal to 1964"</li>\r\n  <li><i>mwaka < 1964</i> means "if mwaka is less than 1964"</li>\r\n  <li><i>mwaka >= 1964</i> means "if mwaka is greater than or equal to 1964"</li>\r\n  <li><i>mwaka > 1964</i> means "if mwaka is greater than 1964"</li>\r\n</ul>\r\n\r\nYou can also use <i>and</i> and <i>or</i> in Python:\r\n<ul>\r\n  <li><i>mwaka >= 1964 and mwaka <= 1985</i> means "if mwaka is greater than or equal to 1964 <b>and</b> mwaka is less than or equal to 1985"</li>\r\n    <li><i>mwaka >= 1964 or mwaka <= 1985</i> means "if mwaka is greater than or equal to 1964 <b>or</b> mwaka is less than or equal to 1985"</li>\r\n</ul>	<block type="def" id="TAMx+q;=6`ZA(NeWNu)Z" x="62" y="27">\r\n    <field name="funcname">nyerere_alikuwa_rais</field>\r\n    <field name="funcargs">mwaka</field>\r\n    <statement name="funcbody">\r\n      <block type="if" id="uPl[-k5!;px+OzT|5m*#">\r\n        <field name="expr">mwaka == 0</field>\r\n        <statement name="stmts">\r\n          <block type="return" id="Jh3F7y};iJ|p+@cBr@6n">\r\n            <field name="expr">True</field>\r\n          </block>\r\n        </statement>\r\n        <next>\r\n          <block type="else" id="6nvU|J}s1GJF+eR_qggz">\r\n            <statement name="DO">\r\n              <block type="return" id="hN5btF:qKB;+jL]xmzF{">\r\n                <field name="expr">False</field>\r\n              </block>\r\n            </statement>\r\n          </block>\r\n        </next>\r\n      </block>\r\n    </statement>\r\n  </block>	print("=== Testing your program... =============================")\r\ntest = 1\r\ntests = range(1960, 1991)\r\ndef verifier_results():\r\n    print('NT_VERIFIER_RESULTS:%d:%d' % (test-1, len(tests)))\r\n    import sys\r\n    sys.exit(0)\r\nfor year in tests:\r\n    answer = False\r\n    if year >= 1964 and year <= 1985:\r\n      answer = True\r\n    print("TEST %d) Does nyerere_alikuwa_rais(%d) return %s?" % (test, year, answer))\r\n    result = nyerere_alikuwa_rais(year)\r\n    if result == answer:\r\n        print("\\t-> CORRECT")\r\n        test += 1\r\n    else:\r\n        print("\\t-> INCORRECT. Your code returns %s. Fix your mistake and try again." % result)\r\n        verifier_results()\r\nprint("ALL TESTS PASSED.")\r\nverifier_results()	3	f
2	Pythagorean Theorem	In math class, you learned that the Pythagorean Theorem is:\r\n\r\n$$a^2 + b^2 = c^2$$\r\n\r\nIf we want <i>c</i>, we should compute:\r\n\r\n$$c = \\sqrt{a^2 + b^2}$$\r\n\r\nBut the Python code in this challenge is wrong:\r\n\r\n$$c = \\sqrt{a^0 + b^4}$$\r\n\r\nFix the problems in the Python code to solve this challenge.	<block type="import" id="0Xcbk;}s)B;A4ZCA#HK_" x="23" y="-4">\r\n    <field name="libname">math</field>\r\n    <next>\r\n      <block type="def" id="wEqNdngHsF3,wAs!~`V.">\r\n        <field name="funcname">pythagorean_theorem</field>\r\n        <field name="funcargs">a, b</field>\r\n        <statement name="funcbody">\r\n          <block type="return" id="h0OL/%;rSGYx-7SXyykw">\r\n            <field name="expr">math.sqrt(a**0 + b**4)</field>\r\n          </block>\r\n        </statement>\r\n      </block>\r\n    </next>\r\n  </block>	print("=== Testing your program... =============================")\r\ntest = 1\r\ntests = [(7,24,25), (5,12,13), (55,48,73), (3,4,5), (15,8,17), (35,12,37)]\r\ndef verifier_result():\r\n    print('NT_VERIFIER_RESULTS:%d:%d' % (test-1, len(tests)))\r\n    import sys\r\n    sys.exit(0)\r\nfor triple in tests:\r\n    print("TEST %d) Does pythagorean_theorem(%d, %d) return %d?" % (test, triple[0], triple[1], triple[2]))\r\n    result = pythagorean_theorem(triple[0], triple[1])\r\n    if result == triple[2]:\r\n        print("\\t-> CORRECT")\r\n        test += 1\r\n    else:\r\n        print("\\t-> INCORRECT. Your code returns %s. Fix the problem and try again." % result)\r\n        verifier_result()\r\nprint("ALL TESTS PASSED.")\r\nverifier_result()	3	f
8	"School Senior Secondary Tumaini"	This Python program prints:\r\n\r\n$$School\\ Senior\\ Secondary\\ Tumaini$$\r\n\r\nChange the <i>name</i> variable so that the order of the words is correct. Your program should print:\r\n\r\n$$Tumaini\\ Senior\\ Secondary\\ School$$	<block type="varstore" id=",h~)CdKU?P.XHoepgcNL" x="-620" y="38">\r\n    <field name="1">first</field>\r\n    <field name="2">"Tumaini"</field>\r\n    <next>\r\n      <block type="varstore" id="Ut#yb[Il;%(u`/IuID8%">\r\n        <field name="1">second</field>\r\n        <field name="2">"Senior"</field>\r\n        <next>\r\n          <block type="varstore" id="]#zpbw`k!DVSTu=(?~Qt">\r\n            <field name="1">third</field>\r\n            <field name="2">"Secondary"</field>\r\n            <next>\r\n              <block type="varstore" id="JN=P9R4E_@Mc*byP+BEK">\r\n                <field name="1">fourth</field>\r\n                <field name="2">"School"</field>\r\n                <next>\r\n                  <block type="varstore" id="E0/==jg1(Uh1(uQq9MkS">\r\n                    <field name="1">name</field>\r\n                    <field name="2">"%s %s %s %s" % (fourth, second, third, first)</field>\r\n                    <next>\r\n                      <block type="varprint" id="gK6)g/P4m.-bk+yl7uPJ">\r\n                        <field name="var">name</field>\r\n                      </block>\r\n                    </next>\r\n                  </block>\r\n                </next>\r\n              </block>\r\n            </next>\r\n          </block>\r\n        </next>\r\n      </block>\r\n    </next>\r\n  </block>	print("=== Testing your program... =============================")\r\ntest = 1\r\ntests = [("first", first, "Tumaini"), ("second", second, "Senior"), ("third", third, "Secondary"), ("fourth", fourth, "School"), ("name", name, "Tumaini Senior Secondary School")]\r\ndef verifier_results():\r\n    print('NT_VERIFIER_RESULTS:%d:%d' % (test-1, len(tests)))\r\n    import sys\r\n    sys.exit(0)\r\nfor (varname, var, answer) in tests:\r\n    print("TEST %d) Is %s equal to '%s'?" % (test, varname, answer))\r\n    if var == answer:\r\n        print("\\t-> CORRECT")\r\n        test += 1\r\n    else:\r\n        print("\\t-> INCORRECT. %s is equal to '%s' . Fix your mistake and try again." % (varname, var))\r\n        verifier_results()\r\nprint("ALL TESTS PASSED.")\r\nverifier_results()	3	f
14	East African Community (EAC)	The following six countries are in the East African Community (EAC):\r\n\r\n<ol>\r\n  <li>Tanzania</li>\r\n  <li>Uganda</li>\r\n  <li>Burundi</li>\r\n  <li>Kenya</li>\r\n  <li>Rwanda</li>\r\n  <li>South Sudan</li>\r\n</ol>\r\n\r\nThis code has a function called <i>is_in_eac</i> that takes a country and returns <i>True</i> if that country is in the EAC. If not, it returns <i>False</i>. But you can see that it is missing some countries. Add the missing countries in to pass this challenge.	<block type="def" id="Ka7b{N|-_;IvhROX!h?J" x="-441" y="29">\r\n    <field name="funcname">is_in_eac</field>\r\n    <field name="funcargs">nchi</field>\r\n    <statement name="funcbody">\r\n      <block type="if" id="HH/n8QU=(5)F4[xwHBFS">\r\n        <field name="expr">nchi in ['Tanzania', 'South Sudan', 'Burundi']</field>\r\n        <statement name="stmts">\r\n          <block type="return" id="a-JHR:dW,L}ytI=rX#uM">\r\n            <field name="expr">True</field>\r\n          </block>\r\n        </statement>\r\n        <next>\r\n          <block type="else" id="tJ?icn%/{NQ`=vDY^-wc">\r\n            <statement name="DO">\r\n              <block type="return" id="H%[-MCN)nwTE[jdO~b.C">\r\n                <field name="expr">False</field>\r\n              </block>\r\n            </statement>\r\n          </block>\r\n        </next>\r\n      </block>\r\n    </statement>\r\n    <next>\r\n      <block type="varprint" id="dbgU,|)1V?/w@=kpq^2J">\r\n        <field name="var">"Is Tanzania in EAC? %s" % is_in_eac('Tanzania')</field>\r\n        <next>\r\n          <block type="varprint" id="hs[K(/oW~PQqzQSi#jZW">\r\n            <field name="var">"Is South Sudan in EAC? %s" % is_in_eac('South Sudan')</field>\r\n            <next>\r\n              <block type="varprint" id="h=u`.K?U(:]p^667gI4X">\r\n                <field name="var">"Is Burundi in EAC? %s" % is_in_eac('Burundi')</field>\r\n                <next>\r\n                  <block type="varprint" id="LZW1n3wP1N*TO1Eo0+T*">\r\n                    <field name="var">"Is Kenya in EAC? %s" % is_in_eac('Kenya')</field>\r\n                    <next>\r\n                      <block type="varprint" id="3^3Nck~[mvGfCP/pRIdF">\r\n                        <field name="var">"Is Uganda in EAC? %s" % is_in_eac('Uganda')</field>\r\n                        <next>\r\n                          <block type="varprint" id="Z?lc1ER-VRf@u+pKdY1U">\r\n                            <field name="var">"Is Rwanda in EAC? %s" % is_in_eac('Rwanda')</field>\r\n                          </block>\r\n                        </next>\r\n                      </block>\r\n                    </next>\r\n                  </block>\r\n                </next>\r\n              </block>\r\n            </next>\r\n          </block>\r\n        </next>\r\n      </block>\r\n    </next>\r\n  </block>	print("=== Testing your program... =============================")\r\ntest = 1\r\ntests = [('Tanzania', True), ('South Sudan', True), ('Burundi', True), ('Uganda', True), ('Rwanda', True), ('Kenya', True), ('United States', False), ('Australia', False), ('Vietnam', False)]\r\ndef verifier_results():\r\n    print('NT_VERIFIER_RESULTS:%d:%d' % (test-1, len(tests)))\r\n    import sys\r\n    sys.exit(0)\r\nfor (s, answer) in tests:\r\n    print("TEST %d) Does is_in_eac('%s') return %s?" % (test, s, answer))\r\n    result = is_in_eac(s)\r\n    if result == answer:\r\n        print("\\t-> CORRECT")\r\n        test += 1\r\n    else:\r\n        print("\\t-> INCORRECT. Your code returns %s. Fix your mistake and try again." % result)\r\n        verifier_results()\r\nprint("ALL TESTS PASSED.")\r\nverifier_results()	4	f
9	Count to 10	This Python program counts to 5.\r\n\r\n<br/><br/>\r\n\r\nChange the program so that it counts to 10 instead.	<block type="varstore" id="#a@`o{o?}ZcP%xj?+I}w" x="88" y="61">\r\n    <field name="1">n</field>\r\n    <field name="2">1</field>\r\n    <next>\r\n      <block type="while" id="P1uOf?q.ovrbm.`n/|U%">\r\n        <field name="expr">n &lt;= 5</field>\r\n        <statement name="stmts">\r\n          <block type="varprint" id="ff`P4+ZJI0Z%M+4vyGw@">\r\n            <field name="var">n</field>\r\n            <next>\r\n              <block type="varplus" id="sVwC0?WX4S{opsA!O.DN">\r\n                <field name="lhs">n</field>\r\n                <field name="rhs">1</field>\r\n              </block>\r\n            </next>\r\n          </block>\r\n        </statement>\r\n      </block>\r\n    </next>\r\n  </block>	print("=== Testing your program... =============================")\r\ntest = 1\r\ntests = [("n", n, 11)]\r\ndef verifier_results():\r\n    print('NT_VERIFIER_RESULTS:%d:%d' % (test-1, len(tests)))\r\n    import sys\r\n    sys.exit(0)\r\nfor (varname, var, answer) in tests:\r\n    print("TEST %d) Did you count to %d?" % (test, answer-1))\r\n    if var == answer:\r\n        print("\\t-> CORRECT")\r\n        test += 1\r\n    else:\r\n        print("\\t-> INCORRECT. You counted to %d. Fix your mistake and try again." % (var-1))\r\n        verifier_results()\r\nprint("ALL TESTS PASSED.")\r\nverifier_results()	3	f
12	Counting Down from 5	This program counts down from 10 to 1.\r\n\r\nChange the code so that it counts down from 5 to 1.	<block type="varstore" id=";b,:}%bFv8_g!bJ%Gjxi" x="-164" y="39">\r\n    <field name="1">n</field>\r\n    <field name="2">10</field>\r\n    <next>\r\n      <block type="varstore" id="B6gcS`bUu;=R@Nq@64,^" collapsed="true">\r\n        <field name="1">s</field>\r\n        <field name="2">n</field>\r\n        <next>\r\n          <block type="while" id="6o)FATp#jhC@)Uv2Q#f8">\r\n            <field name="expr">n &gt; 0</field>\r\n            <statement name="stmts">\r\n              <block type="varprint" id="Y(ttKXAgdR1VAkNbKK;a">\r\n                <field name="var">n</field>\r\n                <next>\r\n                  <block type="varstore" id="bktr-WU98C+UC1cJz}#C">\r\n                    <field name="1">n</field>\r\n                    <field name="2">n - 1</field>\r\n                  </block>\r\n                </next>\r\n              </block>\r\n            </statement>\r\n          </block>\r\n        </next>\r\n      </block>\r\n    </next>\r\n  </block>	print("=== Testing your program... =============================")\r\ntest = 1\r\ntests = [("n", n, 0), ("s", s, 5)]\r\ndef verifier_results():\r\n    print('NT_VERIFIER_RESULTS:%d:%d' % (test-1, len(tests)))\r\n    import sys\r\n    sys.exit(0)\r\nfor (varname, var, answer) in tests:\r\n    print("TEST %d) Is the variable %s equal to %d?" % (test, varname, answer))\r\n    if var == answer:\r\n        print("\\t-> CORRECT")\r\n        test += 1\r\n    else:\r\n        print("\\t-> INCORRECT. Your variable %s is equal to %d. Fix your mistake and try again." % (varname, var))\r\n        verifier_results()\r\nprint("ALL TESTS PASSED.")\r\nverifier_results()	4	f
13	Multiply Each Number in a List by 3	This code contains a function called <i>multiply_by_3</i> that takes a list and is supposed to multiply every number in that list by 3. For example,\r\n\r\n$$multiply\\_by\\_3([1, 2, 3])$$\r\n\r\nshould return:\r\n\r\n$$[3, 6, 9]$$\r\n\r\nBut there is a problem with this code. Fix the problem so that it really does multiply every number in a list by 3.	<block type="def" id="cspnn,EPu=G{m64KQU1K" x="-379" y="38">\r\n    <field name="funcname">multiply_list_by_3</field>\r\n    <field name="funcargs">list</field>\r\n    <statement name="funcbody">\r\n      <block type="varstore" id="q_x%4/O=SO.e)9;-Ol5^">\r\n        <field name="1">list_mpya</field>\r\n        <field name="2">[]</field>\r\n        <next>\r\n          <block type="for" id="el6wsl26Mwa(_C`K17gd">\r\n            <field name="item">n</field>\r\n            <field name="seq">list</field>\r\n            <statement name="stmts">\r\n              <block type="funcall" id="~0G)pdu5U,XcX/AFd3UC">\r\n                <field name="funcname">list_mpya.append</field>\r\n                <field name="funcargs">n * 1</field>\r\n              </block>\r\n            </statement>\r\n            <next>\r\n              <block type="return" id="LO5oI8makY7yS7Ji/EiE">\r\n                <field name="expr">list_mpya</field>\r\n              </block>\r\n            </next>\r\n          </block>\r\n        </next>\r\n      </block>\r\n    </statement>\r\n    <next>\r\n      <block type="varprint" id="DvWc3S[iUp.FCat^CWf9">\r\n        <field name="var">multiply_list_by_3([1,2,3])</field>\r\n        <next>\r\n          <block type="varprint" id="tw~S|=*AsDs%dr9hFp.D">\r\n            <field name="var">multiply_list_by_3([10,10,10])</field>\r\n            <next>\r\n              <block type="varprint" id="IPLzr|w2C50j`pXy00bK">\r\n                <field name="var">multiply_list_by_3([1,2,3,4,5,6,7,8,9])</field>\r\n              </block>\r\n            </next>\r\n          </block>\r\n        </next>\r\n      </block>\r\n    </next>\r\n  </block>	print("=== Testing your program... =============================")\r\ntest = 1\r\ntests = [([1,2,3], [3,6,9]), ([10,10,10], [30,30,30]), ([1,2,3,4,5,6,7,8,9], [3,6,9,12,15,18,21,24,27]), ([], []), ([0], [0]), ([5,10,10000], [15,30,30000]), ([-1, -2, -3], [-3, -6, -9]), ([-500], [-1500])]\r\ndef verifier_results():\r\n    print('NT_VERIFIER_RESULTS:%d:%d' % (test-1, len(tests)))\r\n    import sys\r\n    sys.exit(0)\r\nfor (l, answer) in tests:\r\n    print("TEST %d) Does multiply_list_by_3(%s) return %s?" % (test, l, answer))\r\n    result = multiply_list_by_3(l)\r\n    if result == answer:\r\n        print("\\t-> CORRECT")\r\n        test += 1\r\n    else:\r\n        print("\\t-> INCORRECT. Your code returns %s. Fix your mistake and try again." % result)\r\n        verifier_results()\r\nprint("ALL TESTS PASSED.")\r\nverifier_results()	4	f
16	Andika Software Kwa Calculator	In this challenge, you will write the software used in a basic calculator. A basic calculator takes two numbers and can do these four things:\r\n\r\n<ul>\r\n  <li>Addition</li>\r\n  <li>Subtraction</li>\r\n  <li>Multiplication</li>\r\n  <li>Division</li>\r\n</ul>\r\n\r\nTo win this challenge, you will need to add blocks to the <i>calculator</i> function:\r\n\r\n<ul>\r\n  <li>If <i>op</i> is equal to 'ADD', you should return the sum of <i>a</i> and <i>b</i>.</li>\r\n  <li>If <i>op</i> is equal to 'SUBTRACT', you should return the difference of <i>a</i> and <i>b</i>.</li>\r\n  <li>If <i>op</i> is equal to 'MULTIPLY', you should return the product of <i>a</i> and <i>b</i>.</li>\r\n  <li>If <i>op</i> is equal to 'DIVIDE', you should return the quotient of <i>a</i> and <i>b</i>.</li>\r\n</ul>	<block type="def" id="l4`7Gm/qR@cu{JPw({|G" x="-29" y="44">\r\n    <field name="funcname">calculator</field>\r\n    <field name="funcargs">a, b, op</field>\r\n    <next>\r\n      <block type="varprint" id="yl^!,adDW0q::Zj?yBAc">\r\n        <field name="var">calculator(5, 7, "ADD")</field>\r\n        <next>\r\n          <block type="varprint" id="=niC?T,I)`co]c=;SEYT">\r\n            <field name="var">calculator(8, 9, "SUBTRACT")</field>\r\n            <next>\r\n              <block type="varprint" id="0U:z;[+[|;USwM@+SfG0">\r\n                <field name="var">calculator(4, 3, "MULTIPLY")</field>\r\n                <next>\r\n                  <block type="varprint" id="PH!M8pk!jTFM)buP|l%9">\r\n                    <field name="var">calculator(100, 2, "DIVIDE")</field>\r\n                  </block>\r\n                </next>\r\n              </block>\r\n            </next>\r\n          </block>\r\n        </next>\r\n      </block>\r\n    </next>\r\n  </block>	print("=== Testing your program... =============================")\r\ntest = 1\r\ntests = [(5, 7, 'ADD', 12), (8, 9, 'SUBTRACT', -1), (4, 3, 'MULTIPLY', 12), (100, 2, 'DIVIDE', 50), (450, 8, 'ADD', 458), (100, 200, 'SUBTRACT', -100), (8, 8, 'MULTIPLY', 64), (2048, 4, 'DIVIDE', 512)]\r\ndef verifier_results():\r\n    print('NT_VERIFIER_RESULTS:%d:%d' % (test-1, len(tests)))\r\n    import sys\r\n    sys.exit(0)\r\nfor (a, b, op, answer) in tests:\r\n    print("TEST %d) Does calculator(%d, %d, '%s') return %d?" % (test, a, b, op, answer))\r\n    result = calculator(a, b, op)\r\n    if result == answer:\r\n        print("\\t-> CORRECT")\r\n        test += 1\r\n    else:\r\n        print("\\t-> INCORRECT. Your code returns %s. Fix your mistake and try again." % result)\r\n        verifier_results()\r\nprint("ALL TESTS PASSED.")\r\nverifier_results()	5	f
17	Heshima Iko?	The function <i>heshima_iko</i> takes a sentence and returns <i>True</i> if the sentence contains the word "shikamoo" or "Shikamoo". If the sentence doesn't contain "shikamoo" or "Shikamoo" it should return <i>False</i>.\r\n\r\n<br/><br/>\r\n\r\nFix the code so that it works correctly. You will need an <b>if</b> block, and you will need to check if each word is either "Shikamoo" (with a big "S") <b>or</b> "shikamoo" (with a small "s").	<block type="def" id=",p~cvS^e4?}2sX@`5Ez4" x="-274" y="47">\r\n    <field name="funcname">heshima_iko</field>\r\n    <field name="funcargs">sentensi</field>\r\n    <statement name="funcbody">\r\n      <block type="varstore" id="HUjGuIV+oK?3^OGq5v%w">\r\n        <field name="1">maneno</field>\r\n        <field name="2">sentensi.split(' ')</field>\r\n        <next>\r\n          <block type="for" id="j9)WwYO3cU}wgbB~qrx-">\r\n            <field name="item">neno</field>\r\n            <field name="seq">maneno</field>\r\n            <next>\r\n              <block type="return" id="H4PgE(hZZH(t5#@~A5,:">\r\n                <field name="expr">False</field>\r\n              </block>\r\n            </next>\r\n          </block>\r\n        </next>\r\n      </block>\r\n    </statement>\r\n    <next>\r\n      <block type="varprint" id="otUZgfmgzACn;G|l5NSD">\r\n        <field name="var">"Heshima? %s" % heshima_iko('Shikamoo mzee, habari za jioni?')</field>\r\n        <next>\r\n          <block type="varprint" id="4cR)a3CFDt,TA5D~YCHn">\r\n            <field name="var">"Heshima? %s" % heshima_iko('Mambo kaka.')</field>\r\n            <next>\r\n              <block type="varprint" id="H]PPQpg|R]H[O%GMb,Kf">\r\n                <field name="var">"Heshima? %s" % heshima_iko('Mwongo we.')</field>\r\n                <next>\r\n                  <block type="varprint" id=")_0hD:+{/0U].VTB@y*G">\r\n                    <field name="var">"Heshima? %s" % heshima_iko('Karibu bibi, shikamoo')</field>\r\n                    <next>\r\n                      <block type="varprint" id="gnY@h#[sO?BA`Z92~fJM">\r\n                        <field name="var">"Heshima? %s" % heshima_iko('Shikamoo kaka mkubwa.')</field>\r\n                      </block>\r\n                    </next>\r\n                  </block>\r\n                </next>\r\n              </block>\r\n            </next>\r\n          </block>\r\n        </next>\r\n      </block>\r\n    </next>\r\n  </block>	print("=== Testing your program... =============================")\r\ntest = 1\r\ntests = [('Shikamoo mzee, habari za jioni?', True), ('Mambo kaka.', False), ('Mwongo we.', False), ('Karibu bibi, shikamoo', True), ('Shikamoo kaka mkubwa.', True)]\r\ndef verifier_results():\r\n    print('NT_VERIFIER_RESULTS:%d:%d' % (test-1, len(tests)))\r\n    import sys\r\n    sys.exit(0)\r\nfor (s, answer) in tests:\r\n    print("TEST %d) Does heshima_iko('%s') return %s?" % (test, s, answer))\r\n    result = heshima_iko(s)\r\n    if result == answer:\r\n        print("\\t-> CORRECT")\r\n        test += 1\r\n    else:\r\n        print("\\t-> INCORRECT. Your code returns %s. Fix your mistake and try again." % result)\r\n        verifier_results()\r\nprint("ALL TESTS PASSED.")\r\nverifier_results()	6	f
18	Area of a Square	A square has four equal sides. Multiplying any two sides together gives the area of the square.\r\n\r\n<br/><br/>\r\n\r\nComplete the <i>area_square</i> function so that it correctly calculates the area of any square given to it.	<block type="def" id="m]ky_!Hb(sS(5:?kjo6F" x="69" y="34">\r\n    <field name="funcname">area_square</field>\r\n    <field name="funcargs">side1, side2, side3, side4</field>\r\n    <statement name="funcbody">\r\n      <block type="return" id="5P#J,EB+,0}O7z-LF9vB">\r\n        <field name="expr">0</field>\r\n      </block>\r\n    </statement>\r\n    <next>\r\n      <block type="varprint" id="81{%.jGrOXqE)zG5Q:or">\r\n        <field name="var">"Area: %d" % area_square(0, 0, 0, 0)</field>\r\n        <next>\r\n          <block type="varprint" id="N~}_(Wh7@o48fl6Ife^(">\r\n            <field name="var">"Area: %d" % area_square(4, 4, 4, 4)</field>\r\n            <next>\r\n              <block type="varprint" id="fFHj_iaE#H[Hecw[EJ*P">\r\n                <field name="var">"Area: %d" % area_square(10, 10, 10, 10)</field>\r\n                <next>\r\n                  <block type="varprint" id="Ny%WL,S4@[6?h6qo(p@1">\r\n                    <field name="var">"Area: %d" % area_square(8, 8, 8, 8)</field>\r\n                    <next>\r\n                      <block type="varprint" id="T[KY-dg}t:_0UgfIqhRI">\r\n                        <field name="var">"Area: %d" % area_square(1000, 1000, 1000, 1000)</field>\r\n                      </block>\r\n                    </next>\r\n                  </block>\r\n                </next>\r\n              </block>\r\n            </next>\r\n          </block>\r\n        </next>\r\n      </block>\r\n    </next>\r\n  </block>	print("=== Testing your program... =============================")\r\ntest = 1\r\ntests = [(0, 0), (4, 16), (10, 100), (8, 64), (1000, 1000000), (5, 25), (6, 36), (1, 1)]\r\ndef verifier_results():\r\n    print('NT_VERIFIER_RESULTS:%d:%d' % (test-1, len(tests)))\r\n    import sys\r\n    sys.exit(0)\r\nfor (l, answer) in tests:\r\n    print("TEST %d) Does area_square(%d,%d,%d,%d) return %d?" % (test, l, l, l, l, answer))\r\n    result = area_square(l, l, l, l)\r\n    if result == answer:\r\n        print("\\t-> CORRECT")\r\n        test += 1\r\n    else:\r\n        print("\\t-> INCORRECT. Your code returns %s. Fix your mistake and try again." % result)\r\n        verifier_results()\r\nprint("ALL TESTS PASSED.")\r\nverifier_results()	6	f
20	Perimeter of a Square	A square has four equal sides. The perimeter is calculated by adding all four sides together, or by multiplying one side by four.\r\n\r\n<br/><br/>\r\n\r\nChange this code so that it correctly returns the perimeter of any square given to it.	<block type="def" id="m]ky_!Hb(sS(5:?kjo6F" x="69" y="34">\r\n    <field name="funcname">perimeter_square</field>\r\n    <field name="funcargs">side1, side2, side3, side4</field>\r\n    <statement name="funcbody">\r\n      <block type="return" id="5P#J,EB+,0}O7z-LF9vB">\r\n        <field name="expr">0</field>\r\n      </block>\r\n    </statement>\r\n    <next>\r\n      <block type="varprint" id="81{%.jGrOXqE)zG5Q:or">\r\n        <field name="var">"Perimeter: %d" % perimeter_square(0, 0, 0, 0)</field>\r\n        <next>\r\n          <block type="varprint" id="N~}_(Wh7@o48fl6Ife^(">\r\n            <field name="var">"Perimeter: %d" % perimeter_square(4, 4, 4, 4)</field>\r\n            <next>\r\n              <block type="varprint" id="fFHj_iaE#H[Hecw[EJ*P">\r\n                <field name="var">"Perimeter: %d" % perimeter_square(10, 10, 10, 10)</field>\r\n                <next>\r\n                  <block type="varprint" id="Ny%WL,S4@[6?h6qo(p@1">\r\n                    <field name="var">"Perimeter: %d" % perimeter_square(8, 8, 8, 8)</field>\r\n                    <next>\r\n                      <block type="varprint" id="T[KY-dg}t:_0UgfIqhRI">\r\n                        <field name="var">"Perimeter: %d" % perimeter_square(1000, 1000, 1000, 1000)</field>\r\n                      </block>\r\n                    </next>\r\n                  </block>\r\n                </next>\r\n              </block>\r\n            </next>\r\n          </block>\r\n        </next>\r\n      </block>\r\n    </next>\r\n  </block>	print("=== Testing your program... =============================")\r\ntest = 1\r\ntests = [(0, 0), (4, 16), (10, 40), (8, 32), (1000, 4000), (5, 20), (6, 24), (1, 4)]\r\ndef verifier_results():\r\n    print('NT_VERIFIER_RESULTS:%d:%d' % (test-1, len(tests)))\r\n    import sys\r\n    sys.exit(0)\r\nfor (l, answer) in tests:\r\n    print("TEST %d) Does perimeter_square(%d,%d,%d,%d) return %d?" % (test, l, l, l, l, answer))\r\n    result = perimeter_square(l, l, l, l)\r\n    if result == answer:\r\n        print("\\t-> CORRECT")\r\n        test += 1\r\n    else:\r\n        print("\\t-> INCORRECT. Your code returns %s. Fix your mistake and try again." % result)\r\n        verifier_results()\r\nprint("ALL TESTS PASSED.")\r\nverifier_results()	6	f
21	Square All Numbers in a List	In this code, the function <i>square_all_numbers</i> is supposed to take a list of numbers and return a list containing the squares of those numbers. For example:\r\n\r\n$$square\\_all\\_numbers([1, 2, 3, 4, 5])$$\r\n\r\nshould return:\r\n\r\n$$[1, 4, 9, 16, 25]$$\r\n\r\nbut this code just gives us the original list back. Fix the problem to solve this challenge.	<block type="def" id="mfU|l0aB--mNehd8eE#P" x="69" y="83">\r\n    <field name="funcname">square_all_numbers</field>\r\n    <field name="funcargs">list</field>\r\n    <statement name="funcbody">\r\n      <block type="return" id="{Ie|i+XScsEMsTzD0*wX">\r\n        <field name="expr">[namba ** 1 for namba in list]</field>\r\n      </block>\r\n    </statement>\r\n    <next>\r\n      <block type="varprint" id="4XJfR{alFsq@]{j:kR)o">\r\n        <field name="var">"Squared: %s" % square_all_numbers([1, 1, 1])</field>\r\n        <next>\r\n          <block type="varprint" id="E6)7u^Jw=toZFn`X0)MR">\r\n            <field name="var">"Squared: %s" % square_all_numbers([1, 2, 3])</field>\r\n            <next>\r\n              <block type="varprint" id="B`d+_o[T5=Exj#JklV,b">\r\n                <field name="var">"Squared: %s" % square_all_numbers([1, 2, 3, 4, 5])</field>\r\n                <next>\r\n                  <block type="varprint" id="Z;:,Fsrq}%0BEvk(Upgc">\r\n                    <field name="var">"Squared: %s" % square_all_numbers([100, 98, 32, 24, 50, 75])</field>\r\n                  </block>\r\n                </next>\r\n              </block>\r\n            </next>\r\n          </block>\r\n        </next>\r\n      </block>\r\n    </next>\r\n  </block>	print("=== Testing your program... =============================")\r\ntest = 1\r\ntests = [([1,1,1], [1,1,1]), ([1,2,3], [1,4,9]), ([1,2,3,4,5], [1,4,9,16,25]), ([100, 98, 32, 24, 50, 75], [10000, 9604, 1024, 576, 2500, 5625])]\r\ndef verifier_results():\r\n    print('NT_VERIFIER_RESULTS:%d:%d' % (test-1, len(tests)))\r\n    import sys\r\n    sys.exit(0)\r\nfor (l, answer) in tests:\r\n    print("TEST %d) Does square_all_numbers(%s) return %s?" % (test, l, answer))\r\n    result = square_all_numbers(l)\r\n    if result == answer:\r\n        print("\\t-> CORRECT")\r\n        test += 1\r\n    else:\r\n        print("\\t-> INCORRECT. Your code returns %s. Fix your mistake and try again." % result)\r\n        verifier_results()\r\nprint("ALL TESTS PASSED.")\r\nverifier_results()	6	f
19	Area of a Triangle	The area of a triangle is calculated as:\r\n\r\n$$\\frac{1}{2} \\bullet base \\bullet height$$\r\n\r\nComplete the <i>area_triangle</i> function so that it correctly calculates the area of any triangle given to it.	<block type="def" id="m]ky_!Hb(sS(5:?kjo6F" x="69" y="34">\r\n    <field name="funcname">area_triangle</field>\r\n    <field name="funcargs">base, height</field>\r\n    <statement name="funcbody">\r\n      <block type="return" id="5P#J,EB+,0}O7z-LF9vB">\r\n        <field name="expr">0</field>\r\n      </block>\r\n    </statement>\r\n    <next>\r\n      <block type="varprint" id="81{%.jGrOXqE)zG5Q:or">\r\n        <field name="var">"Area: %d" % area_triangle(7, 24)</field>\r\n        <next>\r\n          <block type="varprint" id="N~}_(Wh7@o48fl6Ife^(">\r\n            <field name="var">"Area: %d" % area_triangle(5, 12)</field>\r\n            <next>\r\n              <block type="varprint" id="fFHj_iaE#H[Hecw[EJ*P">\r\n                <field name="var">"Area: %d" % area_triangle(55, 48)</field>\r\n                <next>\r\n                  <block type="varprint" id="Ny%WL,S4@[6?h6qo(p@1">\r\n                    <field name="var">"Area: %d" % area_triangle(45, 28)</field>\r\n                    <next>\r\n                      <block type="varprint" id="T[KY-dg}t:_0UgfIqhRI">\r\n                        <field name="var">"Area: %d" % area_triangle(39, 80)</field>\r\n                      </block>\r\n                    </next>\r\n                  </block>\r\n                </next>\r\n              </block>\r\n            </next>\r\n          </block>\r\n        </next>\r\n      </block>\r\n    </next>\r\n  </block>	print("=== Testing your program... =============================")\r\ntest = 1\r\ntests = [(7, 24, 84), (5, 12, 30), (55, 48, 1320), (45, 28, 630), (39, 80, 1560)]\r\ndef verifier_results():\r\n    print('NT_VERIFIER_RESULTS:%d:%d' % (test-1, len(tests)))\r\n    import sys\r\n    sys.exit(0)\r\nfor (b, h, answer) in tests:\r\n    print("TEST %d) Does area_triangle(%d,%d) return %d?" % (test, b, h, answer))\r\n    result = area_triangle(b, h)\r\n    if result == answer:\r\n        print("\\t-> CORRECT")\r\n        test += 1\r\n    else:\r\n        print("\\t-> INCORRECT. Your code returns %d. Fix your mistake and try again." % result)\r\n        verifier_results()\r\nprint("ALL TESTS PASSED.")\r\nverifier_results()	6	f
22	Perimeter of a Triangle	The perimeter of a triangle is calculated by adding all three sides of the triangle together.\r\n\r\n<br/><br/>\r\n\r\nChange the <i>perimeter_triangle</i> function to correctly calculate the perimeter of any triangle given to it.	<block type="def" id="m]ky_!Hb(sS(5:?kjo6F" x="69" y="34">\r\n    <field name="funcname">perimeter_triangle</field>\r\n    <field name="funcargs">side1, side2, side3</field>\r\n    <statement name="funcbody">\r\n      <block type="return" id="5P#J,EB+,0}O7z-LF9vB">\r\n        <field name="expr">0</field>\r\n      </block>\r\n    </statement>\r\n    <next>\r\n      <block type="varprint" id="81{%.jGrOXqE)zG5Q:or">\r\n        <field name="var">"Perimeter: %d" % perimeter_triangle(7, 24, 25)</field>\r\n        <next>\r\n          <block type="varprint" id="N~}_(Wh7@o48fl6Ife^(">\r\n            <field name="var">"Perimeter: %d" % perimeter_triangle(5, 12, 13)</field>\r\n            <next>\r\n              <block type="varprint" id="fFHj_iaE#H[Hecw[EJ*P">\r\n                <field name="var">"Perimeter: %d" % perimeter_triangle(55, 48, 73)</field>\r\n                <next>\r\n                  <block type="varprint" id="Ny%WL,S4@[6?h6qo(p@1">\r\n                    <field name="var">"Perimeter: %d" % perimeter_triangle(45, 28, 53)</field>\r\n                    <next>\r\n                      <block type="varprint" id="T[KY-dg}t:_0UgfIqhRI">\r\n                        <field name="var">"Perimeter: %d" % perimeter_triangle(39, 80, 89)</field>\r\n                      </block>\r\n                    </next>\r\n                  </block>\r\n                </next>\r\n              </block>\r\n            </next>\r\n          </block>\r\n        </next>\r\n      </block>\r\n    </next>\r\n  </block>	print("=== Testing your program... =============================")\r\ntest = 1\r\ntests = [(7, 24, 25, 56),  (5, 12, 13, 30), (55, 48, 73, 176), (45, 28, 53, 126), (39, 80, 89, 208)]\r\ndef verifier_results():\r\n    print('NT_VERIFIER_RESULTS:%d:%d' % (test-1, len(tests)))\r\n    import sys\r\n    sys.exit(0)\r\nfor (s1, s2, s3, answer) in tests:\r\n    print("TEST %d) Does perimeter_triangle(%d,%d,%d) return %d?" % (test, s1, s2, s3, answer))\r\n    result = perimeter_triangle(s1, s2, s3)\r\n    if result == answer:\r\n        print("\\t-> CORRECT")\r\n        test += 1\r\n    else:\r\n        print("\\t-> INCORRECT. Your code returns %s. Fix your mistake and try again." % result)\r\n        verifier_results()\r\nprint("ALL TESTS PASSED.")\r\nverifier_results()	6	f
24	Albamu ya Kwanza ya Lady Jay Dee	<i>Machozi</i> ni albamu ya kwanza ya Lady Jay Dee. Orodha ya nyimbo ni hivyo:\r\n\r\n<ol>\r\n<li>Machozi (remix)</li>\r\n<li>Nalia</li>\r\n<li>Penzi la milele</li>\r\n<li>Pumziko</li>\r\n<li>Waweza kwenda (Rajabu's mix)</li>\r\n<li>Nakupenda</li>\r\n<li>Nimekubali (akiwa na Ray C)</li>\r\n<li>Matatizo</li>\r\n<li>Tatiza</li>\r\n<li>Shida</li>\r\n<li>Umuhimu wako</li>\r\n<li>Waweza kwenda (JM mix)</li>\r\n</ol>\r\n\r\nBut this Python code returns the songs in the wrong order. Fix the code so that the songs are in the correct order. (<b>Hint</b>: In computer programming languages like Python, <b>ordering starts with the number 0.</b> So 'Machozi (remix)' should have the number 0, then 'Nalia' should have the number 1, and so on.)	<block type="def" id=",p~cvS^e4?}2sX@`5Ez4" x="-496" y="-34">\r\n    <field name="funcname">nyimbo_za_machozi</field>\r\n    <field name="funcargs"></field>\r\n    <statement name="funcbody">\r\n      <block type="varstore" id=";F[/ZBI/EC=.E;c|h|wf">\r\n        <field name="1">nyimbo</field>\r\n        <field name="2">['']*12</field>\r\n        <next>\r\n          <block type="varstore" id=",BXom;vew2*fIe..!rA:">\r\n            <field name="1">nyimbo[5]</field>\r\n            <field name="2">'Machozi (Remix)'</field>\r\n            <next>\r\n              <block type="varstore" id="{z:n2vFWYgmyQ`v6Kyu9">\r\n                <field name="1">nyimbo[3]</field>\r\n                <field name="2">'Nalia'</field>\r\n                <next>\r\n                  <block type="varstore" id="A#?|yUlS|O+Vct[MUhJu">\r\n                    <field name="1">nyimbo[4]</field>\r\n                    <field name="2">'Penzi la Milele'</field>\r\n                    <next>\r\n                      <block type="varstore" id="2+Hf#_XPIAZ;4P-dB.0=">\r\n                        <field name="1">nyimbo[11]</field>\r\n                        <field name="2">'Pumziko'</field>\r\n                        <next>\r\n                          <block type="varstore" id="ld0Lwp5m##@Y~/i8HtN^">\r\n                            <field name="1">nyimbo[2]</field>\r\n                            <field name="2">"Waweza kwenda (Rajabu's mix)"</field>\r\n                            <next>\r\n                              <block type="varstore" id="pH~#M?%IGEW)KJSfe/|;">\r\n                                <field name="1">nyimbo[1]</field>\r\n                                <field name="2">'Nakupenda'</field>\r\n                                <next>\r\n                                  <block type="varstore" id="^:.[Lrt.42Zq6EM2cj%.">\r\n                                    <field name="1">nyimbo[6]</field>\r\n                                    <field name="2">'Nimekubali (akiwa na Ray C)'</field>\r\n                                    <next>\r\n                                      <block type="varstore" id="WmPu16ievQlN;c5kUTeS">\r\n                                        <field name="1">nyimbo[0]</field>\r\n                                        <field name="2">'Matatizo'</field>\r\n                                        <next>\r\n                                          <block type="varstore" id="I=vlB=_Qif@w2+1kZi-f">\r\n                                            <field name="1">nyimbo[7]</field>\r\n                                            <field name="2">'Tatiza'</field>\r\n                                            <next>\r\n                                              <block type="varstore" id="]1VWcs8)P`pH}_xr?A#/">\r\n                                                <field name="1">nyimbo[10]</field>\r\n                                                <field name="2">'Shida'</field>\r\n                                                <next>\r\n                                                  <block type="varstore" id="0FGe+GwSr:@j849.;dHy">\r\n                                                    <field name="1">nyimbo[8]</field>\r\n                                                    <field name="2">'Umuhimu wako'</field>\r\n                                                    <next>\r\n                                                      <block type="varstore" id="5M^Xl~OP7%*fHncwOz}p">\r\n                                                        <field name="1">nyimbo[9]</field>\r\n                                                        <field name="2">'Waweza kwenda (JM mix)'</field>\r\n                                                        <next>\r\n                                                          <block type="return" id="ln/218qObs|J?h7/w8jZ">\r\n                                                            <field name="expr">nyimbo</field>\r\n                                                          </block>\r\n                                                        </next>\r\n                                                      </block>\r\n                                                    </next>\r\n                                                  </block>\r\n                                                </next>\r\n                                              </block>\r\n                                            </next>\r\n                                          </block>\r\n                                        </next>\r\n                                      </block>\r\n                                    </next>\r\n                                  </block>\r\n                                </next>\r\n                              </block>\r\n                            </next>\r\n                          </block>\r\n                        </next>\r\n                      </block>\r\n                    </next>\r\n                  </block>\r\n                </next>\r\n              </block>\r\n            </next>\r\n          </block>\r\n        </next>\r\n      </block>\r\n    </statement>\r\n    <next>\r\n      <block type="for" id="@CNwuzeRBDAqOHL.oTM4">\r\n        <field name="item">idx, nyimbo</field>\r\n        <field name="seq">enumerate(nyimbo_za_machozi())</field>\r\n        <statement name="stmts">\r\n          <block type="varprint" id="t3)OPAE-MGuwG7gg^N`G">\r\n            <field name="var">"%d) %s" % (idx, nyimbo)</field>\r\n          </block>\r\n        </statement>\r\n      </block>\r\n    </next>\r\n  </block>	print("=== Testing your program... =============================")\r\ntest = 1\r\ntests = [('Machozi (Remix)', 0), ('Nalia', 1), ('Penzi la Milele', 2), ('Pumziko', 3), ('Waweza kwenda (Rajabu\\'s mix)', 4), ('Nakupenda', 5), ('Nimekubali (akiwa na Ray C)', 6), ('Matatizo', 7), ('Tatiza', 8), ('Shida', 9), ('Umuhimu wako', 10), ('Waweza kwenda (JM mix)', 11)]\r\ndef verifier_results():\r\n    print('NT_VERIFIER_RESULTS:%d:%d' % (test-1, len(tests)))\r\n    import sys\r\n    sys.exit(0)\r\nalbum = nyimbo_za_machozi()\r\nfor (title, idx) in tests:\r\n    print("TEST %d) Is '%s' number %d in the album?" % (test, title, idx))\r\n    result = (album[idx] == title)\r\n    if result == True:\r\n        print("\\t-> CORRECT")\r\n        test += 1\r\n    else:\r\n        print("\\t-> INCORRECT. Your code says '%s' is number %d in the album. Fix your mistake and try again." % (album[idx], idx))\r\n        verifier_results()\r\nprint("ALL TESTS PASSED.")\r\nverifier_results()	7	f
25	Cube All Numbers in a List	In this Python code, the function <i>cube_all_numbers</i> is supposed to cube every number in the list given to it.\r\n\r\n<br/><br/>\r\n\r\nBut, it is incorrect. Change the code so that it correctly cubes all numbers.	<block type="def" id="mfU|l0aB--mNehd8eE#P" x="69" y="83">\r\n    <field name="funcname">cube_all_numbers</field>\r\n    <field name="funcargs">list</field>\r\n    <statement name="funcbody">\r\n      <block type="return" id="{Ie|i+XScsEMsTzD0*wX">\r\n        <field name="expr">[namba ** 1 for namba in list]</field>\r\n      </block>\r\n    </statement>\r\n    <next>\r\n      <block type="varprint" id="4XJfR{alFsq@]{j:kR)o">\r\n        <field name="var">"Cubed: %s" % cube_all_numbers([1, 1, 1])</field>\r\n        <next>\r\n          <block type="varprint" id="E6)7u^Jw=toZFn`X0)MR">\r\n            <field name="var">"Cubed: %s" % cube_all_numbers([1, 2, 3])</field>\r\n            <next>\r\n              <block type="varprint" id="B`d+_o[T5=Exj#JklV,b">\r\n                <field name="var">"Cubed: %s" % cube_all_numbers([1, 2, 3, 4, 5])</field>\r\n                <next>\r\n                  <block type="varprint" id="Z;:,Fsrq}%0BEvk(Upgc">\r\n                    <field name="var">"Cubed: %s" % cube_all_numbers([100, 98, 32, 24, 50, 75])</field>\r\n                  </block>\r\n                </next>\r\n              </block>\r\n            </next>\r\n          </block>\r\n        </next>\r\n      </block>\r\n    </next>\r\n  </block>	print("=== Testing your program... =============================")\r\ntest = 1\r\ntests = [([1,1,1], [1,1,1]), ([1,2,3], [1,8,27]), ([1,2,3,4,5], [1,8,27,64,125]), ([100, 98, 32, 24, 50, 75], [1000000, 941192, 32768, 13824, 125000, 421875])]\r\ndef verifier_results():\r\n    print('NT_VERIFIER_RESULTS:%d:%d' % (test-1, len(tests)))\r\n    import sys\r\n    sys.exit(0)\r\nfor (l, answer) in tests:\r\n    print("TEST %d) Does cube_all_numbers(%s) return %s?" % (test, l, answer))\r\n    result = cube_all_numbers(l)\r\n    if result == answer:\r\n        print("\\t-> CORRECT")\r\n        test += 1\r\n    else:\r\n        print("\\t-> INCORRECT. Your code returns %s. Fix your mistake and try again." % result)\r\n        verifier_results()\r\nprint("ALL TESTS PASSED.")\r\nverifier_results()	7	f
26	Counting Down using Recursion	The function <i>count_down</i> in this Python code is supposed to count down to 1 no matter what number you give it. But it never stops - it goes past 1 into the negative numbers.\r\n\r\n<br/><br/>\r\n\r\nThis code uses <b>recursion</b>, which means <b>it calls itself</b>. To make it stop, at the beginning of the function check: <b>if n is equal to 0, return 0.</b> Otherwise if n is not 0, we want to keep counting down until we get there.	<block type="def" id="`!P-kBpjvK=o,PwM,12/" x="75" y="52">\r\n    <field name="funcname">count_down</field>\r\n    <field name="funcargs">n</field>\r\n    <statement name="funcbody">\r\n      <block type="varprint" id="c%%mp4bsDk[l=*m7J?#s">\r\n        <field name="var">n</field>\r\n        <next>\r\n          <block type="return" id="ZRhE}-F3M%|svGQbs#uj">\r\n            <field name="expr">count_down(n - 1)</field>\r\n          </block>\r\n        </next>\r\n      </block>\r\n    </statement>\r\n    <next>\r\n      <block type="funcall" id="NtO..eq#5gDA5O]vc=QE">\r\n        <field name="funcname">count_down</field>\r\n        <field name="funcargs">10</field>\r\n      </block>\r\n    </next>\r\n  </block>	print("=== Testing your program... =============================")\r\ntests = ['_', '_']\r\ntest = 1\r\ndef verifier_results():\r\n    print('NT_VERIFIER_RESULTS:%d:%d' % (test-1, len(tests)))\r\n    import sys\r\n    sys.exit(0)\r\n\r\nimport inspect, re\r\nfn_lines = inspect.getsourcelines(count_down)[0]\r\nline1 = re.sub(r"\\s+", "", fn_lines[1], flags=re.UNICODE)\r\nline2 = re.sub(r"\\s+", "", fn_lines[2], flags=re.UNICODE)\r\n\r\nprint("TEST 1) Does the first line of the function check if n is equal to 0?")\r\nif line1 == 'ifn==0:' or line1 == 'if0==n:':\r\n  print("\\t-> CORRECT")\r\n  test += 1\r\nelse:\r\n  print("\\t-> INCORRECT. You have a problem with this line: '%s'. Fix your mistake and try again." % fn_lines[1])\r\n  verifier_results()\r\nprint("TEST 2) Does the second line of the function return 0?")\r\nif line2 == 'return0':\r\n  print("\\t-> CORRECT")\r\n  test += 1\r\nelse:\r\n  print("\\t-> INCORRECT. You have a problem with this line: '%s'. Fix your mistake and try again." % fn_lines[2])\r\n  verifier_results()\r\nprint("ALL TESTS PASSED.")\r\nverifier_results()	7	f
27	Uchaguzi 2015: Mkoa wa Darisalam	Wakati wa uchaguzi mkuu wa Tanzania mwaka 2015 mkoa huu wa Darisalam ulikuwa na majimbo ya uchaguzi yafuatayo:\r\n\r\n<table class="table">\r\n  <tr><td>Ilala</td><td>CCM</td></tr>\r\n  <tr><td>Kawe</td><td>Chadema</td></tr>\r\n  <tr><td>Kibamba</td><td>Chadema</td></tr>\r\n  <tr><td>Kigamboni</td><td>CCM</td></tr>\r\n  <tr><td>Kinondoni</td><td>CUF</td></tr>\r\n  <tr><td>Mbagala</td><td>CCM</td></tr>\r\n  <tr><td>Segerea</td><td>CCM</td></tr>\r\n  <tr><td>Temeke</td><td>CUF</td></tr>\r\n  <tr><td>Ubungo</td><td>Chadema</td></tr>\r\n  <tr><td>Ukonga</td><td>Chadema</td></tr>\r\n</table>\r\n\r\nComplete the function <i>wilaya_ya_dar_uchaguzi_2015</i> so that the <i>wilaya</i> variable correctly maps kila mkoa with the political party that represents it.	<block type="def" id="B:6tsISb(*pm|M)|oD+V" x="95" y="38">\r\n    <field name="funcname">wilaya_ya_dar_uchaguzi_2015</field>\r\n    <field name="funcargs"></field>\r\n    <statement name="funcbody">\r\n      <block type="varstore" id="jrlKlnCVQ([5GBxuEH]~">\r\n        <field name="1">wilaya</field>\r\n        <field name="2">{}</field>\r\n        <next>\r\n          <block type="varstore" id="m_}dq-t-_ireadvq!.Ep">\r\n            <field name="1">wilaya['Ilala']</field>\r\n            <field name="2">'?'</field>\r\n            <next>\r\n              <block type="varstore" id="[+A:iqH;cc]grO5WDg5@">\r\n                <field name="1">wilaya['Kawe']</field>\r\n                <field name="2">'?'</field>\r\n                <next>\r\n                  <block type="varstore" id="^APsbVmxL(O9X/k6EFB_">\r\n                    <field name="1">wilaya['Kibamba']</field>\r\n                    <field name="2">'?'</field>\r\n                    <next>\r\n                      <block type="varstore" id="O(A;9`SaCdiGd9kDesFz">\r\n                        <field name="1">wilaya['Kigamboni']</field>\r\n                        <field name="2">'?'</field>\r\n                        <next>\r\n                          <block type="varstore" id="se%W+;0!!}}BoD33r?2R">\r\n                            <field name="1">wilaya['Kinondoni']</field>\r\n                            <field name="2">'?'</field>\r\n                            <next>\r\n                              <block type="varstore" id="N116ep^M4u2A2EiV0g}T">\r\n                                <field name="1">wilaya['Mbagala']</field>\r\n                                <field name="2">'?'</field>\r\n                                <next>\r\n                                  <block type="varstore" id="-7+kKbMh)y89a6I7]9k2">\r\n                                    <field name="1">wilaya['Segerea']</field>\r\n                                    <field name="2">'?'</field>\r\n                                    <next>\r\n                                      <block type="varstore" id="A;q0BbtULhT4nc(cnE:R">\r\n                                        <field name="1">wilaya['Temeke']</field>\r\n                                        <field name="2">'?'</field>\r\n                                        <next>\r\n                                          <block type="varstore" id="!a+MlLSrj|rqPCZS:9tK">\r\n                                            <field name="1">wilaya['Ubungo']</field>\r\n                                            <field name="2">'?'</field>\r\n                                            <next>\r\n                                              <block type="varstore" id="9!h*-GFhSF6RN*@m.4F7">\r\n                                                <field name="1">wilaya['Ukonga']</field>\r\n                                                <field name="2">'?'</field>\r\n                                                <next>\r\n                                                  <block type="return" id="y*apH)gHF3L0C3V5H(|A">\r\n                                                    <field name="expr">wilaya</field>\r\n                                                  </block>\r\n                                                </next>\r\n                                              </block>\r\n                                            </next>\r\n                                          </block>\r\n                                        </next>\r\n                                      </block>\r\n                                    </next>\r\n                                  </block>\r\n                                </next>\r\n                              </block>\r\n                            </next>\r\n                          </block>\r\n                        </next>\r\n                      </block>\r\n                    </next>\r\n                  </block>\r\n                </next>\r\n              </block>\r\n            </next>\r\n          </block>\r\n        </next>\r\n      </block>\r\n    </statement>\r\n    <next>\r\n      <block type="varprint" id="c)R}R~v;6A;J;Sn5.VC?">\r\n        <field name="var">wilaya_ya_dar_uchaguzi_2015()</field>\r\n      </block>\r\n    </next>\r\n  </block>	print("=== Testing your program... =============================")\r\ntest = 1\r\ntests = [('Ilala', 'CCM'), ('Kawe', 'Chadema'), ('Kibamba', 'Chadema'), ('Kigamboni', 'CCM'), ('Kinondoni', 'CUF'), ('Mbagala', 'CCM'), ('Segerea', 'CCM'), ('Temeke', 'CUF'), ('Ubungo', 'Chadema'), ('Ukonga', 'Chadema'), ]\r\ndef verifier_results():\r\n    print('NT_VERIFIER_RESULTS:%d:%d' % (test-1, len(tests)))\r\n    import sys\r\n    sys.exit(0)\r\nwilaya = wilaya_ya_dar_uchaguzi_2015()\r\nfor (mkoa, party) in tests:\r\n    print("TEST %d) Is '%s' represented by '%s'?" % (test, mkoa, party))\r\n    result = (wilaya[mkoa] == party)\r\n    if result == True:\r\n        print("\\t-> CORRECT")\r\n        test += 1\r\n    else:\r\n        print("\\t-> INCORRECT. Your code says '%s' is represented by '%s'. Fix your mistake and try again." % (mkoa, wilaya[mkoa]))\r\n        verifier_results()\r\nprint("ALL TESTS PASSED.")\r\nverifier_results()	7	f
29	Celsius to Fahrenheit	The formula to convert a temperature in Celsius <i>T<sub>C</sub></i> to its Fahrenheit equivalent <i>T<sub>F</sub></i> is:\r\n\r\n$$T_F = T_C \\bullet \\frac{9}{5} + 32$$\r\n\r\nComplete the function <i>celsius_to_fahrenheit</i> so that it returns the Fahrenheit temperature equivalent to the <i>celsius</i> temperature given to it.	<block type="def" id="UyZK)MfHBy47Go--e}gm" x="93" y="50">\r\n    <field name="funcname">celsius_to_fahrenheit</field>\r\n    <field name="funcargs">celsius</field>\r\n    <next>\r\n      <block type="varprint" id=")@iUYBxa)h.nN0GzTF,y">\r\n        <field name="var">"Fahrenheit: %d" % celsius_to_fahrenheit(0)</field>\r\n        <next>\r\n          <block type="varprint" id="Rjz,Q(vTSQ2|C3M;g@;4">\r\n            <field name="var">"Fahrenheit: %d" % celsius_to_fahrenheit(-5)</field>\r\n            <next>\r\n              <block type="varprint" id="dSb:T*xm7GHYa#xjeW6V">\r\n                <field name="var">"Fahrenheit: %d" % celsius_to_fahrenheit(200)</field>\r\n                <next>\r\n                  <block type="varprint" id="=Jd-,]uHZ2F(-WPbtaH;">\r\n                    <field name="var">"Fahrenheit: %d" % celsius_to_fahrenheit(7)</field>\r\n                  </block>\r\n                </next>\r\n              </block>\r\n            </next>\r\n          </block>\r\n        </next>\r\n      </block>\r\n    </next>\r\n  </block>	print("=== Testing your program... =============================")\r\ntest = 1\r\ntests = [(0, 32.0), (-5, 23.0), (200, 392.0), (7, 44.6), (-40, -40.0), (-10, 14.0)]\r\ndef verifier_results():\r\n    print('NT_VERIFIER_RESULTS:%d:%d' % (test-1, len(tests)))\r\n    import sys\r\n    sys.exit(0)\r\nfor (tempc, answer) in tests:\r\n    print("TEST %d) Does celsius_to_fahrenheit(%d) return %s?" % (test, tempc, answer))\r\n    result = celsius_to_fahrenheit(tempc)\r\n    if ("%.2f" % result) == ("%.2f" % answer):\r\n        print("\\t-> CORRECT")\r\n        test += 1\r\n    else:\r\n        print("\\t-> INCORRECT. Your code returns %s. Fix your mistake and try again." % result)\r\n        verifier_results()\r\nprint("ALL TESTS PASSED.")\r\nverifier_results()	8	f
28	Fahrenheit to Celsius	The formula to convert a temperature in Fahrenheit <i>T<sub>F</sub></i> to its Celsius equivalent <i>T<sub>C</sub></i> is:\r\n\r\n$$T_C = (T_F - 32) \\bullet \\frac{5}{9}$$\r\n\r\nComplete the function <i>fahrenheit_to_celsius</i> so that it returns the Celsius temperature equivalent to the <i>fahrenheit</i> temperature given to it.	<block type="def" id="UyZK)MfHBy47Go--e}gm" x="93" y="50">\r\n    <field name="funcname">fahrenheit_to_celsius</field>\r\n    <field name="funcargs">fahrenheit</field>\r\n    <next>\r\n      <block type="varprint" id=")@iUYBxa)h.nN0GzTF,y">\r\n        <field name="var">"Celsius: %d" % fahrenheit_to_celsius(0)</field>\r\n        <next>\r\n          <block type="varprint" id="Rjz,Q(vTSQ2|C3M;g@;4">\r\n            <field name="var">"Celsius: %d" % fahrenheit_to_celsius(-459.67)</field>\r\n            <next>\r\n              <block type="varprint" id="dSb:T*xm7GHYa#xjeW6V">\r\n                <field name="var">"Celsius: %d" % fahrenheit_to_celsius(170)</field>\r\n                <next>\r\n                  <block type="varprint" id="=Jd-,]uHZ2F(-WPbtaH;">\r\n                    <field name="var">"Celsius: %d" % fahrenheit_to_celsius(1000)</field>\r\n                  </block>\r\n                </next>\r\n              </block>\r\n            </next>\r\n          </block>\r\n        </next>\r\n      </block>\r\n    </next>\r\n  </block>	print("=== Testing your program... =============================")\r\ntest = 1\r\ntests = [(0, -17.78), (-459.67, -273.15), (170, 76.67), (1000, 537.78), (90, 32.22), (-50, -45.56)]\r\ndef verifier_results():\r\n    print('NT_VERIFIER_RESULTS:%d:%d' % (test-1, len(tests)))\r\n    import sys\r\n    sys.exit(0)\r\nfor (tempf, answer) in tests:\r\n    print("TEST %d) Does fahrenheit_to_celsius(%d) return %s?" % (test, tempf, answer))\r\n    result = fahrenheit_to_celsius(tempf)\r\n    if ("%.2f" % result) == ("%.2f" % answer):\r\n        print("\\t-> CORRECT")\r\n        test += 1\r\n    else:\r\n        print("\\t-> INCORRECT. Your code returns %s. Fix your mistake and try again." % result)\r\n        verifier_results()\r\nprint("ALL TESTS PASSED.")\r\nverifier_results()	8	f
23	Quadratic Formula	The quadratic formula gives us the two roots of any quadratic equation. One root is calculated using:\r\n\r\n$${-b + \\sqrt{b^2-4ac} \\over 2a}$$\r\n\r\nand another root is calculated using:\r\n\r\n$${-b - \\sqrt{b^2-4ac} \\over 2a}$$\r\n\r\nFill in the <i>quadratic_formula</i> function so that it correctly calculates and returns both roots for any quadratic equation consisting of <i>a</i>, <i>b</i>, and <i>c</i>.	<block type="import" id="%)NI@v;!%Dd2WcM[W-QC" x="-169" y="28">\r\n    <field name="libname">math</field>\r\n    <next>\r\n      <block type="def" id="n:W5L~K|`VrLr-UF:#*a">\r\n        <field name="funcname">quadratic_formula</field>\r\n        <field name="funcargs">a, b, c</field>\r\n        <statement name="funcbody">\r\n          <block type="varstore" id=":[fz]#t(tlQP}q:FuTjS">\r\n            <field name="1">root1</field>\r\n            <field name="2">0</field>\r\n            <next>\r\n              <block type="varstore" id="j6^8g6^jzbl~g]OZIUoH">\r\n                <field name="1">root2</field>\r\n                <field name="2">0</field>\r\n                <next>\r\n                  <block type="return" id="R,Hln6OW3H[Ss?d}gTIY">\r\n                    <field name="expr">(root1, root2)</field>\r\n                  </block>\r\n                </next>\r\n              </block>\r\n            </next>\r\n          </block>\r\n        </statement>\r\n        <next>\r\n              <block type="varprint" id="8B%zP3KuRZ@e?~LUHooL">\r\n                <field name="var">quadratic_formula(1, 4, -21)</field>\r\n                <next>\r\n                  <block type="varprint" id="RKq`5:8sh:K[-}W?g*CQ">\r\n                    <field name="var">quadratic_formula(1, 3, -4)</field>\r\n                    <next>\r\n                      <block type="varprint" id="eMq?*n?-W6g;)+3xG|Wb">\r\n                        <field name="var">quadratic_formula(3, 6, -10)</field>\r\n                      </block>\r\n                    </next>\r\n                  </block>\r\n                </next>\r\n              </block>\r\n        </next>\r\n      </block>\r\n    </next>\r\n  </block>	print("=== Testing your program... =============================")\r\ntest = 1\r\ntests = [(1, 4, -21, 3.00, -7.00), (1, 3, -4, 1.00, -4.00), (3, 6, -10, -3.08, 1.08)]\r\ndef verifier_results():\r\n    print('NT_VERIFIER_RESULTS:%d:%d' % (test-1, len(tests)))\r\n    import sys\r\n    sys.exit(0)\r\nfor (a, b, c, r1, r2) in tests:\r\n    r1 = "%.2f" % r1\r\n    r2 = "%.2f" % r2\r\n    print("TEST %d) Does quadratic_formula(%d,%d,%d) return (%s, %s)?" % (test, a, b, c, r1, r2))\r\n    result = quadratic_formula(a, b, c)\r\n    result = ("%.2f" % result[0], "%.2f" % result[1])\r\n    if (result[0] == r1 and result[1] == r2) or (result[1] == r1 and result[0] == r2):\r\n        print("\\t-> CORRECT")\r\n        test += 1\r\n    else:\r\n        print("\\t-> INCORRECT. Your code returns (%s, %s). Fix your mistake and try again." % result)\r\n        verifier_results()\r\nprint("ALL TESTS PASSED.")\r\nverifier_results()	8	f
30	Finding Prime Numbers	A prime number is divisible only by 1 and itself. Here are all of the prime numbers less than 20:\r\n\r\n$$2, 3, 5, 7, 11, 13, 17, 19$$\r\n\r\nComplete the <i>is_prime</i> function so that it returns <i>True</i> if <i>namba</i> is prime and <i>False</i> if it is not.\r\n\r\n<br/><br/>\r\n\r\n<b>IMPORTANT:</b> If we want to divide two numbers <i>a</i> and <i>b</i>, we write <b>a / b</b> to get the quotient (example: 5 / 2 is equal to 2). But if we want <b>the remainder</b>, we write <b>a % b</b> (example: 5 % 2 is equal to 1). <b>If the remainder of <i>a % b</i> equals 0, <i>a</i> is divisible by <i>b</i>. If the remainder of <i>a % b</i> does not equal 0, <i>a</i> is not divisible by <i>b</i></b>. Use this to help you write an <b>if</b> block that checks <b>if namba is divisible by m.</b>	<block type="def" id="Gw2*|jG6H7Y5a1Ad.*Uw" x="63" y="23">\r\n    <field name="funcname">is_prime</field>\r\n    <field name="funcargs">namba</field>\r\n    <statement name="funcbody">\r\n      <block type="if" id="(W4D2,szhY~%!v5A_e%T">\r\n        <field name="expr">namba == 1</field>\r\n        <statement name="stmts">\r\n          <block type="return" id=";wgXBAJ=yXSgGNjk{X:D">\r\n            <field name="expr">False</field>\r\n          </block>\r\n        </statement>\r\n        <next>\r\n          <block type="for" id="6i]`yc^,UGZ|KyNEhNwG">\r\n            <field name="item">m</field>\r\n            <field name="seq">range(2, namba)</field>\r\n            <statement name="stmts">\r\n              <block type="if" id="eMsd[1:b#*%rbqnb`PuE">\r\n                <field name="expr"></field>\r\n                <statement name="stmts">\r\n                  <block type="return" id="fF?5uA)p{]/.lp)r)JF|">\r\n                    <field name="expr"></field>\r\n                  </block>\r\n                </statement>\r\n              </block>\r\n            </statement>\r\n            <next>\r\n              <block type="else" id="g`O23ZK%a%TKp;-%32=?">\r\n                <statement name="DO">\r\n                  <block type="return" id="LTDW8L-21BP!X7EpJU%k">\r\n                    <field name="expr"></field>\r\n                  </block>\r\n                </statement>\r\n              </block>\r\n            </next>\r\n          </block>\r\n        </next>\r\n      </block>\r\n    </statement>\r\n    <next>\r\n      <block type="for" id="%:luv!VIJ8Mf8!X6_z2x">\r\n        <field name="item">i</field>\r\n        <field name="seq">range(1, 20)</field>\r\n        <statement name="stmts">\r\n          <block type="if" id="J};P|NKZ92#:qApcQKnC">\r\n            <field name="expr">is_prime(i)</field>\r\n            <statement name="stmts">\r\n              <block type="varprint" id="0VMvnlb/dm1}9r@uoDPc">\r\n                <field name="var">"%d is prime." % i</field>\r\n              </block>\r\n            </statement>\r\n          </block>\r\n        </statement>\r\n      </block>\r\n    </next>\r\n  </block>	print("=== Testing your program... =============================")\r\ntest = 1\r\nprime_tests = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 109, 113, 127, 131, 137, 139, 149, 151, 157, 163, 167, 173, 179, 181, 191, 193, 197, 199]\r\ncomposite_tests = [4, 6, 8, 9, 10, 12, 14, 15, 16, 18, 20, 21, 22, 24, 25, 26, 27, 28, 30, 32, 33, 34, 35, 36, 38, 39, 40, 42, 44, 45, 46, 48, 49, 50, 51, 52, 54, 55, 56, 57, 58, 60, 62, 63, 64, 65, 66, 68, 69, 70, 72, 74, 75, 76, 77, 78, 80, 81, 82, 84]\r\ndef verifier_results():\r\n    print('NT_VERIFIER_RESULTS:%d:%d' % (test-1, len(prime_tests) + len(composite_tests)))\r\n    import sys\r\n    sys.exit(0)\r\nfor n in prime_tests:\r\n    print("TEST %d) Does is_prime(%d) return True?" % (test, n))\r\n    result = is_prime(n)\r\n    if result == True:\r\n        print("\\\\t-> CORRECT")\r\n        test += 1\r\n    else:\r\n        print("\\\\t-> INCORRECT. Your code returns %s. Fix your mistake and try again." % result)\r\n        verifier_results()\r\nfor n in composite_tests:\r\n    print("TEST %d) Does is_prime(%d) return False?" % (test, n))\r\n    result = is_prime(n)\r\n    if result == False:\r\n        print("\\\\t-> CORRECT")\r\n        test += 1\r\n    else:\r\n        print("\\\\t-> INCORRECT. Your code returns %s. Fix your mistake and try again." % result)\r\n        verifier_results()\r\nprint("ALL TESTS PASSED.")\r\nverifier_results()	9	f
31	Noble Gases	In chemistry, these six elements on the periodic table are called <b>the noble gases</b>: helium, neon, argon, krypton, xeon, and radon. These are their symbols:\r\n\r\n$$He, Ne, Ar, Kr, Xe, Rn$$\r\n\r\nComplete the function <i>is_noble_gas</i> so that it returns <i>True</i> if the <i>symbol</i> given to it represents a noble gas. If it's not a noble gas, return <i>False</i>.	<block type="def" id="g{J=FEAq?Fw[#KI#f0Qs" x="7" y="50">\r\n    <field name="funcname">is_noble_gas</field>\r\n    <field name="funcargs">symbol</field>\r\n    <next>\r\n      <block type="varprint" id="||b?J5g5bzf+)RXTM[4[">\r\n        <field name="var">is_noble_gas('He')</field>\r\n        <next>\r\n          <block type="varprint" id="^kpO@j(J4OfMwU~R^RPk">\r\n            <field name="var">is_noble_gas('Si')</field>\r\n            <next>\r\n              <block type="varprint" id="#0`KwtQ1vSv(+~z,/kc)">\r\n                <field name="var">is_noble_gas('Cf')</field>\r\n                <next>\r\n                  <block type="varprint" id="s0sXO~;J}.AjbLfCe84r">\r\n                    <field name="var">is_noble_gas('Li')</field>\r\n                    <next>\r\n                      <block type="varprint" id="kS=W^{xMxymFZeE96*O6">\r\n                        <field name="var">is_noble_gas('Ar')</field>\r\n                      </block>\r\n                    </next>\r\n                  </block>\r\n                </next>\r\n              </block>\r\n            </next>\r\n          </block>\r\n        </next>\r\n      </block>\r\n    </next>\r\n  </block>	print("=== Testing your program... =============================")\r\ntest = 1\r\ntests = [('He', True), ('Ne', True), ('Ar', True), ('Kr', True), ('Xe', True), ('Rn', True), ('Cf', False), ('Li', False), ('Pb', False), ('Si', False)]\r\ndef verifier_results():\r\n    print('NT_VERIFIER_RESULTS:%d:%d' % (test-1, len(tests)))\r\n    import sys\r\n    sys.exit(0)\r\nfor (sym, answer) in tests:\r\n    print("TEST %d) Does is_noble_gas('%s') return %s?" % (test, sym, answer))\r\n    result = is_noble_gas(sym)\r\n    if result == answer:\r\n        print("\\t-> CORRECT")\r\n        test += 1\r\n    else:\r\n        print("\\t-> INCORRECT. Your code returns %s. Fix your mistake and try again." % result)\r\n        verifier_results()\r\nprint("ALL TESTS PASSED.")\r\nverifier_results()	10	f
32	Alkali Metals	In chemistry, these six elements on the periodic table are called <b>the alkali metals</b>: lithium, sodium, potassium, rubidium, caesium, and francium. These are their symbols:\r\n\r\n$$Li, Na, K, Rb, Cs, Fr$$\r\n\r\nComplete the function <i>is_alkali_metal</i> so that it returns <i>True</i> if the <i>symbol</i> given to it represents an alkali metal. If it's not an alkali metal, return <i>False</i>.	<block type="def" id="g{J=FEAq?Fw[#KI#f0Qs" x="7" y="50">\r\n    <field name="funcname">is_alkali_metal</field>\r\n    <field name="funcargs">symbol</field>\r\n    <next>\r\n      <block type="varprint" id="||b?J5g5bzf+)RXTM[4[">\r\n        <field name="var">is_alkali_metal('He')</field>\r\n        <next>\r\n          <block type="varprint" id="^kpO@j(J4OfMwU~R^RPk">\r\n            <field name="var">is_alkali_metal('Si')</field>\r\n            <next>\r\n              <block type="varprint" id="#0`KwtQ1vSv(+~z,/kc)">\r\n                <field name="var">is_alkali_metal('Cf')</field>\r\n                <next>\r\n                  <block type="varprint" id="s0sXO~;J}.AjbLfCe84r">\r\n                    <field name="var">is_alkali_metal('Li')</field>\r\n                    <next>\r\n                      <block type="varprint" id="kS=W^{xMxymFZeE96*O6">\r\n                        <field name="var">is_alkali_metal('Ar')</field>\r\n                      </block>\r\n                    </next>\r\n                  </block>\r\n                </next>\r\n              </block>\r\n            </next>\r\n          </block>\r\n        </next>\r\n      </block>\r\n    </next>\r\n  </block>	print("=== Testing your program... =============================")\r\ntest = 1\r\ntests = [('Li', True), ('Na', True), ('K', True), ('Rb', True), ('Cs', True), ('Fr', True), ('Cf', False), ('Ar', False), ('Pb', False), ('Si', False)]\r\ndef verifier_results():\r\n    print('NT_VERIFIER_RESULTS:%d:%d' % (test-1, len(tests)))\r\n    import sys\r\n    sys.exit(0)\r\nfor (sym, answer) in tests:\r\n    print("TEST %d) Does is_alkali_metal('%s') return %s?" % (test, sym, answer))\r\n    result = is_alkali_metal(sym)\r\n    if result == answer:\r\n        print("\\t-> CORRECT")\r\n        test += 1\r\n    else:\r\n        print("\\t-> INCORRECT. Your code returns %s. Fix your mistake and try again." % result)\r\n        verifier_results()\r\nprint("ALL TESTS PASSED.")\r\nverifier_results()	10	f
41	Counting neno la 'na' ya Shairi	Complete the Python function <i>count_na</i> so that it correctly returns the number of times the word 'Na' or 'na' appears in any poem given to it. One poem, entitled <i>Shairi la Mnazi</i>, has been given to you as an example.	<block type="def" id="VjM+LE@X5WCdq~}e*bsB" x="-32" y="35">\r\n    <field name="funcname">count_na</field>\r\n    <field name="funcargs">shairi</field>\r\n    <statement name="funcbody">\r\n      <block type="varstore" id="(7w)+Q!nUn`hza;WHHA#">\r\n        <field name="1">count</field>\r\n        <field name="2">0</field>\r\n        <next>\r\n          <block type="return" id=":N*+5-*fcMc|`=i;srJ`">\r\n            <field name="expr">count</field>\r\n          </block>\r\n        </next>\r\n      </block>\r\n    </statement>\r\n    <next>\r\n      <block type="varstore" id="tBZl9ikuoQ5did~Ri:[7">\r\n        <field name="1">shairi_la_mnazi</field>\r\n        <field name="2">[''] * 10</field>\r\n        <next>\r\n          <block type="varstore" id="(ejILTpWjI-{0^.pDON)">\r\n            <field name="1">shairi_la_mnazi[0]</field>\r\n            <field name="2">'Pani kiti nikae kitako niwambie sifa za mnazi.'</field>\r\n            <next>\r\n              <block type="varstore" id="b1cpkQr[eoiO,^0+NKN_">\r\n                <field name="1">shairi_la_mnazi[1]</field>\r\n                <field name="2">'Mti huu unzapo kumeya makutiye yanga panga wazi.'</field>\r\n                <next>\r\n                  <block type="varstore" id="Ejk9ZIL^m*YV=N`vBN~n">\r\n                    <field name="1">shairi_la_mnazi[2]</field>\r\n                    <field name="2">'Baadaye hushuska kigogo hutoleza mapanda na mizi,'</field>\r\n                    <next>\r\n                      <block type="varstore" id="^%=}XG1-~|o]+rO)%~M%">\r\n                        <field name="1">shairi_la_mnazi[3]</field>\r\n                        <field name="2">'hatimaye huwaa matunda matundaye inakwitwa nazi.'</field>\r\n                        <next>\r\n                          <block type="varstore" id="]Cr(7ZK?WzpQx@n]_@-[">\r\n                            <field name="1">shairi_la_mnazi[4]</field>\r\n                            <field name="2">'Huyangwa hwambua makutiye hapikia wali na mtunzi,'</field>\r\n                            <next>\r\n                              <block type="varstore" id=";Gtr[HEH/];Pon3398f}">\r\n                                <field name="1">shairi_la_mnazi[5]</field>\r\n                                <field name="2">'kifwuche hatonga upawa kapikia Saada muwandazi.'</field>\r\n                                <next>\r\n                                  <block type="varstore" id="PUN^M{3XNqc/+)wm#B{s">\r\n                                    <field name="1">shairi_la_mnazi[6]</field>\r\n                                    <field name="2">'Na takizi hamwaya jaani katakura yimbi mtakuzi,'</field>\r\n                                    <next>\r\n                                      <block type="varstore" id="iz6s-Ix*sO(MKiu`ZLc-">\r\n                                        <field name="1">shairi_la_mnazi[7]</field>\r\n                                        <field name="2">'makumbiye hasokota kamba haundia sambwe na jahazi.'</field>\r\n                                        <next>\r\n                                          <block type="varstore" id="e9/I[}cIwRA7sEE+e_JU">\r\n                                            <field name="1">shairi_la_mnazi[8]</field>\r\n                                            <field name="2">'Makutiye hazibia nyumba hazuia pepo na fusizi,'</field>\r\n                                            <next>\r\n                                              <block type="varstore" id="rwobNLa(xaR{#FL?kA2P">\r\n                                                <field name="1">shairi_la_mnazi[9]</field>\r\n                                                <field name="2">'kigogoche hafanyia mlango hazuia harubu na mwizi.'</field>\r\n                                                <next>\r\n                                                  <block type="varprint" id="o}k-aT}Y#=VME]Me[gO8">\r\n                                                    <field name="var">count_na(shairi_la_mnazi)</field>\r\n                                                  </block>\r\n                                                </next>\r\n                                              </block>\r\n                                            </next>\r\n                                          </block>\r\n                                        </next>\r\n                                      </block>\r\n                                    </next>\r\n                                  </block>\r\n                                </next>\r\n                              </block>\r\n                            </next>\r\n                          </block>\r\n                        </next>\r\n                      </block>\r\n                    </next>\r\n                  </block>\r\n                </next>\r\n              </block>\r\n            </next>\r\n          </block>\r\n        </next>\r\n      </block>\r\n    </next>\r\n  </block>	print("=== Testing your program... =============================")\r\nshairi_la_mnazi=[''] * 10\r\nshairi_la_mnazi[0]='Pani kiti nikae kitako niwambie sifa za mnazi.'\r\nshairi_la_mnazi[1]='Mti huu unzapo kumeya makutiye yanga panga wazi.'\r\nshairi_la_mnazi[2]='Baadaye hushuska kigogo hutoleza mapanda na mizi,'\r\nshairi_la_mnazi[3]='hatimaye huwaa matunda matundaye inakwitwa nazi.'\r\nshairi_la_mnazi[4]='Huyangwa hwambua makutiye hapikia wali na mtunzi,'\r\nshairi_la_mnazi[5]='kifwuche hatonga upawa kapikia Saada muwandazi.'\r\nshairi_la_mnazi[6]='Na takizi hamwaya jaani katakura yimbi mtakuzi,'\r\nshairi_la_mnazi[7]='makumbiye hasokota kamba haundia sambwe na jahazi.'\r\nshairi_la_mnazi[8]='Makutiye hazibia nyumba hazuia pepo na fusizi,'\r\nshairi_la_mnazi[9]='kigogoche hafanyia mlango hazuia harubu na mwizi.'\r\nshairi2 = [''] * 18\r\nshairi2[0] = 'Mama, nipeeke, haoe kaoe'\r\nshairi2[1] = 'Urembo na shani Ungama,'\r\nshairi2[2] = 'Haoe mnara mpambo mpambe,'\r\nshairi2[3] = 'Uzainyeo hcshima.'\r\nshairi2[4] = 'Na wenyi kupamba patoto patoto.'\r\nshairi2[5] = 'Wavete vitindi na kama,'\r\nshairi2[6] = 'Wavete saufo ziemba ziemba,'\r\nshairi2[7] = 'Na mikili bee na nyuma.'\r\nshairi2[8] = 'Wavete libasi teule teule,'\r\nshairi2[9] = 'Kwa zitwana bee na nyuma.'\r\nshairi2[10] = 'Watukuze panga ngao na ngao.'\r\nshairi2[11] = 'Mtu hutoshea kuona.'\r\nshairi2[12] = 'Kujile Mngazidja na kubu na kubu,'\r\nshairi2[13] = 'Ujile kutaka harubu.'\r\nshairi2[14] = 'Kujile Mgala na mata na mata,'\r\nshairi2[15] = 'Ujile kutaka kuteta.'\r\nshairi2[16] = 'Tutawatilia ukuta ukuta,'\r\nshairi2[17] = 'Wasituingilie myini.'\r\ntest = 1\r\ntests = [(shairi_la_mnazi, 6), (shairi2, 11)]\r\ndef verifier_results():\r\n    print('NT_VERIFIER_RESULTS:%d:%d' % (test-1, len(tests)))\r\n    import sys\r\n    sys.exit(0)\r\nfor (shairi, answer) in tests:\r\n    print("TEST %d) Does count_na(%s) return %s?" % (test, shairi, answer))\r\n    result = count_na(shairi)\r\n    if result == answer:\r\n        print("\\t-> CORRECT")\r\n        test += 1\r\n    else:\r\n        print("\\t-> INCORRECT. Your code returns %s. Fix your mistake and try again." % result)\r\n        verifier_results()\r\nprint("ALL TESTS PASSED.")\r\nverifier_results()	16	f
33	Motion Equation in Physics	If we have a moving object and want to know where it will be after some time, we can use this physics equation:\r\n\r\n$$s = s_0 + v_0t + \\frac{1}{2}at^2$$\r\n\r\nwhere <b>s</b> is the position where the object will be, <b>s<sub>0</sub></b> is the position where the object started, <b>v<sub>0</sub></b> is the initial velocity of the object, <b>a</b> is the object's acceleration, and <b>t</b> is the amount of time that has passed since the object started moving.\r\n\r\n<br/><br/>\r\n\r\nComplete the Python function <i>position_equation</i> to calculate any object's position <b>s</b> using <b>s0, v0, a,</b> and <b>t</b>.	<block type="def" id="g{J=FEAq?Fw[#KI#f0Qs" x="7" y="50">\r\n    <field name="funcname">motion_equation</field>\r\n    <field name="funcargs">s0, v0, a, t</field>\r\n    <next>\r\n      <block type="varprint" id="ia43Ba/Jca`huOx!g[C-">\r\n        <field name="var">motion_equation(0, 0, 0, 0)</field>\r\n        <next>\r\n          <block type="varprint" id="||b?J5g5bzf+)RXTM[4[">\r\n            <field name="var">motion_equation(0, 10, 4, 8)</field>\r\n            <next>\r\n              <block type="varprint" id="q)T/:Qq,QhPvzo-vZkmm">\r\n                <field name="var">motion_equation(20, 4, -2, 10)</field>\r\n                <next>\r\n                  <block type="varprint" id="3p62W)7x:;M:bIsPTMyE">\r\n                    <field name="var">motion_equation(-10, 30, 5, 40)</field>\r\n                  </block>\r\n                </next>\r\n              </block>\r\n            </next>\r\n          </block>\r\n        </next>\r\n      </block>\r\n    </next>\r\n  </block>	print("=== Testing your program... =============================")\r\ntest = 1\r\ntests = [(0, 0, 0, 0, 0), (0, 10, 4, 8, 208), (20, 4, -2, 10, -40), (-10, 30, 5, 40, 5190)]\r\ndef verifier_results():\r\n    print('NT_VERIFIER_RESULTS:%d:%d' % (test-1, len(tests)))\r\n    import sys\r\n    sys.exit(0)\r\nfor (s0, v0, a, t, answer) in tests:\r\n    print("TEST %d) Does motion_equation(%d, %d, %d, %d) return %d?" % (test, s0, v0, a, t, answer))\r\n    result = motion_equation(s0, v0, a, t)\r\n    if ("%.2f" % result) == ("%.2f" % answer):\r\n        print("\\t-> CORRECT")\r\n        test += 1\r\n    else:\r\n        print("\\t-> INCORRECT. Your code returns %s. Fix your mistake and try again." % result)\r\n        verifier_results()\r\nprint("ALL TESTS PASSED.")\r\nverifier_results()	11	f
35	The Intensity Level of Light	If we want to know the intensity level of light, we can use this physics equation:\r\n\r\n$$L_I = 10 \\log\\left(\\frac{I}{I_0}\\right)$$\r\n\r\nwhere <b>L<sub>I</sub></b> is the intensity level, <b>I</b> is the intensity of the light, and <b>I<sub>0</sub></b> is the intensity of a reference signal.\r\n\r\nComplete the Python function <i>intensity_level</i> to correctly calculate and return the intensity level of any light given to it. You can use Python's <b>math.log()</b> function to calculate the logarithm of any number you give it.	<block type="import" id="=OxOf`cZxX8Ml;W1T;3(" x="31" y="-4">\r\n    <field name="libname">math</field>\r\n    <next>\r\n      <block type="def" id="3od`QJX+)oY%yn{^gY!_">\r\n        <field name="funcname">intensity_level</field>\r\n        <field name="funcargs">i, i0</field>\r\n        <next>\r\n          <block type="varprint" id="ZY!ctbo!)Le?m-~.n+-0">\r\n            <field name="var">intensity_level(1, 5)</field>\r\n            <next>\r\n              <block type="varprint" id="qTLZ-?{/%o%skXq:{3hL">\r\n                <field name="var">intensity_level(1, 1)</field>\r\n                <next>\r\n                  <block type="varprint" id="~zYlkLtz7@?bnIvaBv1X">\r\n                    <field name="var">intensity_level(4, 8)</field>\r\n                    <next>\r\n                      <block type="varprint" id="+1D,(^%?f|c3N^D~odi~">\r\n                        <field name="var">intensity_level(8, 14)</field>\r\n                        <next>\r\n                          <block type="varprint" id="i~:*Vy%?RMbNUP-eTHHz">\r\n                            <field name="var">intensity_level(3, 44)</field>\r\n                          </block>\r\n                        </next>\r\n                      </block>\r\n                    </next>\r\n                  </block>\r\n                </next>\r\n              </block>\r\n            </next>\r\n          </block>\r\n        </next>\r\n      </block>\r\n    </next>\r\n  </block>	print("=== Testing your program... =============================")\r\ntest = 1\r\ntests = [(1, 5, '-16.09'), (1, 1, '0.00'), (4, 8, '-6.93'), (8, 14, '-5.60'), (3, 44, '-26.86')]\r\ndef verifier_results():\r\n    print('NT_VERIFIER_RESULTS:%d:%d' % (test-1, len(tests)))\r\n    import sys\r\n    sys.exit(0)\r\nfor (i, i0, answer) in tests:\r\n    print("TEST %d) Does intensity_level(%d, %d) return %s?" % (test, i, i0, answer))\r\n    result = "%.2f" % intensity_level(i, i0)\r\n    if result == answer:\r\n        print("\\t-> CORRECT")\r\n        test += 1\r\n    else:\r\n        print("\\t-> INCORRECT. Your code returns %s. Fix your mistake and try again." % result)\r\n        verifier_results()\r\nprint("ALL TESTS PASSED.")\r\nverifier_results()	11	f
36	The Pressure Level of Light	If we want to know the pressure level of light, we can use this physics equation:\r\n\r\n$$L_P = 20 \\log\\left(\\frac{\\Delta P}{\\Delta P_0}\\right)$$\r\n\r\nwhere <b>L<sub>P</sub></b> is the pressure level, <b>&Delta;P</b> is the change in pressure, and <b>&Delta;P<sub>0</sub></b> is the change in pressure of a reference signal.\r\n\r\nComplete the Python function <i>pressure_level</i> to correctly calculate and return the pressure level of any light given to it. You can use Python's <b>math.log()</b> function to calculate the logarithm of any number you give it.	<block type="import" id="=OxOf`cZxX8Ml;W1T;3(" x="31" y="-4">\r\n    <field name="libname">math</field>\r\n    <next>\r\n      <block type="def" id="3od`QJX+)oY%yn{^gY!_">\r\n        <field name="funcname">pressure_level</field>\r\n        <field name="funcargs">delta_P, delta_P0</field>\r\n        <next>\r\n          <block type="varprint" id="ZY!ctbo!)Le?m-~.n+-0">\r\n            <field name="var">pressure_level(1, 5)</field>\r\n            <next>\r\n              <block type="varprint" id="qTLZ-?{/%o%skXq:{3hL">\r\n                <field name="var">pressure_level(1, 1)</field>\r\n                <next>\r\n                  <block type="varprint" id="~zYlkLtz7@?bnIvaBv1X">\r\n                    <field name="var">pressure_level(4, 8)</field>\r\n                    <next>\r\n                      <block type="varprint" id="+1D,(^%?f|c3N^D~odi~">\r\n                        <field name="var">pressure_level(8, 14)</field>\r\n                        <next>\r\n                          <block type="varprint" id="i~:*Vy%?RMbNUP-eTHHz">\r\n                            <field name="var">pressure_level(3, 44)</field>\r\n                          </block>\r\n                        </next>\r\n                      </block>\r\n                    </next>\r\n                  </block>\r\n                </next>\r\n              </block>\r\n            </next>\r\n          </block>\r\n        </next>\r\n      </block>\r\n    </next>\r\n  </block>	print("=== Testing your program... =============================")\r\ntest = 1\r\ntests = [(1, 5, '-32.19'), (1, 1, '0.00'), (4, 8, '-13.86'), (8, 14, '-11.19'), (3, 44, '-53.71')]\r\ndef verifier_results():\r\n    print('NT_VERIFIER_RESULTS:%d:%d' % (test-1, len(tests)))\r\n    import sys\r\n    sys.exit(0)\r\nfor (dp, dp0, answer) in tests:\r\n    print("TEST %d) Does pressure_level(%d, %d) return %s?" % (test, dp, dp0, answer))\r\n    result = "%.2f" % pressure_level(dp, dp0)\r\n    if result == answer:\r\n        print("\\t-> CORRECT")\r\n        test += 1\r\n    else:\r\n        print("\\t-> INCORRECT. Your code returns %s. Fix your mistake and try again." % result)\r\n        verifier_results()\r\nprint("ALL TESTS PASSED.")\r\nverifier_results()	11	f
37	Magnetic Force on a Moving Charged Particle	To calculate the magnetic force on a moving charged particle, we use this physics equation:\r\n\r\n$$F = qvB \\sin \\theta$$\r\n\r\nwhere <b>F</b> is the force, <b>q</b> is the charge, <b>v</b> is the velocity, <b>B</b> is the magnetic field, and <b>&theta;</b> is the angle between the velocity and the magnetic field.\r\n\r\n<br/><br/>\r\n\r\nComplete the Python function <i>magnetic_force</i> to correctly calculate and return the magnetic force on any moving charged particle given to it. You can use Python's <b>math.sin()</b> function to calculate the sine of any number given to it.	<block type="import" id="=OxOf`cZxX8Ml;W1T;3(" x="-99" y="16">\r\n    <field name="libname">math</field>\r\n    <next>\r\n      <block type="def" id="3od`QJX+)oY%yn{^gY!_">\r\n        <field name="funcname">magnetic_force</field>\r\n        <field name="funcargs">charge, velocity, magnetic_field, angle</field>\r\n        <next>\r\n          <block type="varprint" id="ZY!ctbo!)Le?m-~.n+-0">\r\n            <field name="var">magnetic_force(0.4, 10.3, 1.2, 40.4)</field>\r\n            <next>\r\n              <block type="varprint" id="qTLZ-?{/%o%skXq:{3hL">\r\n                <field name="var">magnetic_force(1.4, 4.3, 5.5, -90.0)</field>\r\n                <next>\r\n                  <block type="varprint" id="~zYlkLtz7@?bnIvaBv1X">\r\n                    <field name="var">magnetic_force(8.3, 1.0, 6.7, 270.0)</field>\r\n                  </block>\r\n                </next>\r\n              </block>\r\n            </next>\r\n          </block>\r\n        </next>\r\n      </block>\r\n    </next>\r\n  </block>	print("=== Testing your program... =============================")\r\ntest = 1\r\ntests = [(0.4, 10.3, 1.2, 40.4, '2.11'), (1.4, 4.3, 5.5, -90.0, '-29.60'), (8.3, 1.0, 6.7, 270.0, '-9.79')]\r\ndef verifier_results():\r\n    print('NT_VERIFIER_RESULTS:%d:%d' % (test-1, len(tests)))\r\n    import sys\r\n    sys.exit(0)\r\nfor (q, v, b, theta, answer) in tests:\r\n    print("TEST %d) Does magnetic_force(%.2f, %.2f, %.2f, %.2f) return %s?" % (test, q, v, b, theta, answer))\r\n    result = "%.2f" % magnetic_force(q, v, b, theta)\r\n    if result == answer:\r\n        print("\\t-> CORRECT")\r\n        test += 1\r\n    else:\r\n        print("\\t-> INCORRECT. Your code returns %s. Fix your mistake and try again." % result)\r\n        verifier_results()\r\nprint("ALL TESTS PASSED.")\r\nverifier_results()	11	f
34	Vodacom and Halotel	In Tanzania, Vodacom phone numbers start with <b>07</b>. Halotel phone numbers start with <b>06</b>.\r\n\r\n<br/><br/>\r\n\r\nComplete the Python function <i>count_voda_halotel_numbers</i> so that it correctly counts the number of Vodacom phone numbers and the number of Halotel numbers in any <i>phone_numbers</i> list given to it. You will need to check <b>the first two digits of every phone number</b>; for example, if you have a variable called <i>phone_number</i>, you can get just the first two digits using:\r\n\r\n$$phone\\_number[\\text{:2}]$$\r\n\r\nUse this inside an <b>if block</b> to check if the first two digits of a phone number are '06' or '07'.	<block type="def" id="1kn(rhRtd3AtD):;B7Ou" x="-21" y="42">\r\n    <field name="funcname">count_voda_halotel_numbers</field>\r\n    <field name="funcargs">phone_numbers</field>\r\n    <statement name="funcbody">\r\n      <block type="varstore" id="j_;p%GA;o2:s1yfO/sk^">\r\n        <field name="1">num_voda</field>\r\n        <field name="2">0</field>\r\n        <next>\r\n          <block type="varstore" id="nwBf{:hU2:C8-Z|SS@N}">\r\n            <field name="1">num_halotel</field>\r\n            <field name="2">0</field>\r\n            <next>\r\n              <block type="return" id=".7r|{0%G1e08BRHZ5lbg">\r\n                <field name="expr">num_voda, num_halotel</field>\r\n              </block>\r\n            </next>\r\n          </block>\r\n        </next>\r\n      </block>\r\n    </statement>\r\n    <next>\r\n      <block type="varprint" id="gZW+_ebA]t-eEd-;eW%Q">\r\n        <field name="var">count_voda_halotel_numbers([])</field>\r\n        <next>\r\n          <block type="varprint" id="@s(|E1uLG]q#4VXozCU^">\r\n            <field name="var">count_voda_halotel_numbers(['0762046294'])</field>\r\n            <next>\r\n              <block type="varprint" id=")G}CN^u4DbOqH4QjbEB^">\r\n                <field name="var">count_voda_halotel_numbers(['0677745521'])</field>\r\n                <next>\r\n                  <block type="varprint" id="I7yi~/mL|=8.dewnj8a7">\r\n                    <field name="var">count_voda_halotel_numbers(['0762046294', '0677745521'])</field>\r\n                  </block>\r\n                </next>\r\n              </block>\r\n            </next>\r\n          </block>\r\n        </next>\r\n      </block>\r\n    </next>\r\n  </block>	print("=== Testing your program... =============================")\r\ntest = 1\r\ntests = [([], (0, 0)), (['0762046294'], (1, 0)), (['0677745521'], (0, 1)), (['0762046294', '0677745521'], (1, 1)), (['0788824116','0655273863','0768200442','0761788962','0664604533','0732814641','0673857280','0626349704','0650566071','0618384027'], (4, 6)), (['0671258752','0875563055','0790288495','0756601476','0638843366','0775770419','0777997979','0840231955','0687192941','0689373256','0773903069','0718944661','0698336611',\r\n'0799274857','0657590000'], (7,6))]\r\ndef verifier_results():\r\n    print('NT_VERIFIER_RESULTS:%d:%d' % (test-1, len(tests)))\r\n    import sys\r\n    sys.exit(0)\r\nfor (l, answer) in tests:\r\n    print("TEST %d) Does count_voda_halotel_numbers(%s) return (%s, %s)?" % (test, l, answer[0], answer[1]))\r\n    result = count_voda_halotel_numbers(l)\r\n    if result == answer:\r\n        print("\\t-> CORRECT")\r\n        test += 1\r\n    else:\r\n        print("\\t-> INCORRECT. Your code returns (%s, %s). Fix your mistake and try again." % (result[0], result[1]))\r\n        verifier_results()\r\nprint("ALL TESTS PASSED.")\r\nverifier_results()	12	f
38	Counting Vowels in Names	Complete the function <i>count_vowels</i> so that it correctly counts the number of vowels in any name given to it.	<block type="def" id="B)_.++WeyVXp:~-m/9/E" x="67" y="27">\r\n    <field name="funcname">count_vowels</field>\r\n    <field name="funcargs">jina</field>\r\n    <statement name="funcbody">\r\n      <block type="varstore" id="@MMYFkuAP?tr-gLM0-!a">\r\n        <field name="1">count</field>\r\n        <field name="2">0</field>\r\n        <next>\r\n          <block type="return" id="WI%hU_)MF+XZSp#/gr/`">\r\n            <field name="expr">count</field>\r\n          </block>\r\n        </next>\r\n      </block>\r\n    </statement>\r\n    <next>\r\n      <block type="varprint" id="XH8UY:X5=d;S8Olm+*sk">\r\n        <field name="var">"Vowels in 'Julius Nyerere': %d" % count_vowels('Julius Nyerere')</field>\r\n        <next>\r\n          <block type="varprint" id="/(o]1u=os+!#m`30L0Or">\r\n            <field name="var">"Vowels in 'Barack Obama': %d" % count_vowels('Barack Obama')</field>\r\n          </block>\r\n        </next>\r\n      </block>\r\n    </next>\r\n  </block>	print("=== Testing your program... =============================")\r\ntest = 1\r\ntests = [('Julius Nyerere', 6), ('Barack Obama', 5), ('Jesus Christ', 3), ('Buddha', 2), ('Oprah Winfrey', 4), ('Muhammed Ali', 5), ('George W. Bush', 4), ('Donald Trump', 3), ('Mao Zedong', 4), ('Ho Chi Minh', 3)]\r\ndef verifier_results():\r\n    print('NT_VERIFIER_RESULTS:%d:%d' % (test-1, len(tests)))\r\n    import sys\r\n    sys.exit(0)\r\nfor (name, answer) in tests:\r\n    print("TEST %d) Does count_vowels('%s') return %s?" % (test, name, answer))\r\n    result = count_vowels(name)\r\n    if result == answer:\r\n        print("\\t-> CORRECT")\r\n        test += 1\r\n    else:\r\n        print("\\t-> INCORRECT. Your code returns %s. Fix your mistake and try again." % result)\r\n        verifier_results()\r\nprint("ALL TESTS PASSED.")\r\nverifier_results()	13	f
39	Bei Jumla	A shop sells three items:\r\n\r\n<ul>\r\n  <li>Samaki for TSH 1000</li>\r\n  <li>Chipsi for TSH 2500</li>\r\n  <li>Fanta for TSH 1000</li>\r\n</ul>\r\n\r\nYou can buy any combination of these three things. Complete the Python function <i>bei_jumla</i> to calculate for any combination: mfanyabiashara atakudai shingapi?	<block type="varstore" id="D=D)f;|?T^i4]q;I#tGC" x="-216" y="23">\r\n    <field name="1">prices</field>\r\n    <field name="2">{}</field>\r\n    <next>\r\n      <block type="varstore" id="-v`y`Bgcsrv1_rap98}V">\r\n        <field name="1">prices['samaki']</field>\r\n        <field name="2">1000</field>\r\n        <next>\r\n          <block type="varstore" id="E|9pe;@^2jia?_o4%s/`">\r\n            <field name="1">prices['chipsi']</field>\r\n            <field name="2">2500</field>\r\n            <next>\r\n              <block type="varstore" id="yX.5!jEF`MLcx%:om2h(">\r\n                <field name="1">prices['fanta']</field>\r\n                <field name="2">1000</field>\r\n                <next>\r\n                  <block type="def" id="16Rm7#[Lo)@Bi)zvmsN;">\r\n                    <field name="funcname">bei_jumla</field>\r\n                    <field name="funcargs">purchased</field>\r\n                    <statement name="funcbody">\r\n                      <block type="varstore" id=".;SX^DEe8YEUbv|GC|Sy">\r\n                        <field name="1">bei</field>\r\n                        <field name="2">0</field>\r\n                        <next>\r\n                          <block type="return" id="MmN,FHduh8ppGKi]%Uz+">\r\n                            <field name="expr">bei</field>\r\n                          </block>\r\n                        </next>\r\n                      </block>\r\n                    </statement>\r\n                    <next>\r\n                      <block type="varprint" id="5cDX~tRG!U)GaNV/=;d,">\r\n                        <field name="var">bei_jumla({'samaki': 2, 'fanta': 1})</field>\r\n                        <next>\r\n                          <block type="varprint" id="#udBuU@Yv/F):(]JD/kf">\r\n                            <field name="var">bei_jumla({'fanta': 3, 'chipsi': 5})</field>\r\n                            <next>\r\n                              <block type="varprint" id="OpIYPZwuKN/2kuxD)ceW">\r\n                                <field name="var">bei_jumla({'chipsi': 2, 'fanta': 2})</field>\r\n                                <next>\r\n                                  <block type="varprint" id="[Qv1,w|ED697qJ{wJaXj">\r\n                                    <field name="var">bei_jumla({})</field>\r\n                                  </block>\r\n                                </next>\r\n                              </block>\r\n                            </next>\r\n                          </block>\r\n                        </next>\r\n                      </block>\r\n                    </next>\r\n                  </block>\r\n                </next>\r\n              </block>\r\n            </next>\r\n          </block>\r\n        </next>\r\n      </block>\r\n    </next>\r\n  </block>	print("=== Testing your program... =============================")\r\ntest = 1\r\ntests = [({'samaki': 2, 'fanta': 1}, 3000), ({'fanta': 3, 'chipsi': 5}, 15500), ({'chipsi': 2, 'fanta': 2}, 7000), ({}, 0), ({'samaki': 10, 'chipsi': 9, 'fanta': 8}, 40500)]\r\ndef verifier_results():\r\n    print('NT_VERIFIER_RESULTS:%d:%d' % (test-1, len(tests)))\r\n    import sys\r\n    sys.exit(0)\r\nfor (items, answer) in tests:\r\n    print("TEST %d) Does bei_jumla(%s) return %s?" % (test, items, answer))\r\n    result = bei_jumla(items)\r\n    if result == answer:\r\n        print("\\t-> CORRECT")\r\n        test += 1\r\n    else:\r\n        print("\\t-> INCORRECT. Your code returns %s. Fix your mistake and try again." % result)\r\n        verifier_results()\r\nprint("ALL TESTS PASSED.")\r\nverifier_results()	14	f
40	Counting Maneno ya Shairi	Complete the Python function <i>count_maneno</i> so that it correctly returns the number of words in any poem given to it. One poem, entitled <i>Shairi la Mnazi</i>, has been given to you as an example.	<block type="def" id="VjM+LE@X5WCdq~}e*bsB" x="-32" y="35">\r\n    <field name="funcname">count_maneno</field>\r\n    <field name="funcargs">shairi</field>\r\n    <statement name="funcbody">\r\n      <block type="varstore" id="(7w)+Q!nUn`hza;WHHA#">\r\n        <field name="1">count</field>\r\n        <field name="2">0</field>\r\n        <next>\r\n          <block type="return" id=":N*+5-*fcMc|`=i;srJ`">\r\n            <field name="expr">count</field>\r\n          </block>\r\n        </next>\r\n      </block>\r\n    </statement>\r\n    <next>\r\n      <block type="varstore" id="tBZl9ikuoQ5did~Ri:[7">\r\n        <field name="1">shairi_la_mnazi</field>\r\n        <field name="2">[''] * 10</field>\r\n        <next>\r\n          <block type="varstore" id="(ejILTpWjI-{0^.pDON)">\r\n            <field name="1">shairi_la_mnazi[0]</field>\r\n            <field name="2">'Pani kiti nikae kitako niwambie sifa za mnazi.'</field>\r\n            <next>\r\n              <block type="varstore" id="b1cpkQr[eoiO,^0+NKN_">\r\n                <field name="1">shairi_la_mnazi[1]</field>\r\n                <field name="2">'Mti huu unzapo kumeya makutiye yanga panga wazi.'</field>\r\n                <next>\r\n                  <block type="varstore" id="Ejk9ZIL^m*YV=N`vBN~n">\r\n                    <field name="1">shairi_la_mnazi[2]</field>\r\n                    <field name="2">'Baadaye hushuska kigogo hutoleza mapanda na mizi,'</field>\r\n                    <next>\r\n                      <block type="varstore" id="^%=}XG1-~|o]+rO)%~M%">\r\n                        <field name="1">shairi_la_mnazi[3]</field>\r\n                        <field name="2">'hatimaye huwaa matunda matundaye inakwitwa nazi.'</field>\r\n                        <next>\r\n                          <block type="varstore" id="]Cr(7ZK?WzpQx@n]_@-[">\r\n                            <field name="1">shairi_la_mnazi[4]</field>\r\n                            <field name="2">'Huyangwa hwambua makutiye hapikia wali na mtunzi,'</field>\r\n                            <next>\r\n                              <block type="varstore" id=";Gtr[HEH/];Pon3398f}">\r\n                                <field name="1">shairi_la_mnazi[5]</field>\r\n                                <field name="2">'kifwuche hatonga upawa kapikia Saada muwandazi.'</field>\r\n                                <next>\r\n                                  <block type="varstore" id="PUN^M{3XNqc/+)wm#B{s">\r\n                                    <field name="1">shairi_la_mnazi[6]</field>\r\n                                    <field name="2">'Na takizi hamwaya jaani katakura yimbi mtakuzi,'</field>\r\n                                    <next>\r\n                                      <block type="varstore" id="iz6s-Ix*sO(MKiu`ZLc-">\r\n                                        <field name="1">shairi_la_mnazi[7]</field>\r\n                                        <field name="2">'makumbiye hasokota kamba haundia sambwe na jahazi.'</field>\r\n                                        <next>\r\n                                          <block type="varstore" id="e9/I[}cIwRA7sEE+e_JU">\r\n                                            <field name="1">shairi_la_mnazi[8]</field>\r\n                                            <field name="2">'Makutiye hazibia nyumba hazuia pepo na fusizi,'</field>\r\n                                            <next>\r\n                                              <block type="varstore" id="rwobNLa(xaR{#FL?kA2P">\r\n                                                <field name="1">shairi_la_mnazi[9]</field>\r\n                                                <field name="2">'kigogoche hafanyia mlango hazuia harubu na mwizi.'</field>\r\n                                                <next>\r\n                                                  <block type="varprint" id="o}k-aT}Y#=VME]Me[gO8">\r\n                                                    <field name="var">count_maneno(shairi_la_mnazi)</field>\r\n                                                  </block>\r\n                                                </next>\r\n                                              </block>\r\n                                            </next>\r\n                                          </block>\r\n                                        </next>\r\n                                      </block>\r\n                                    </next>\r\n                                  </block>\r\n                                </next>\r\n                              </block>\r\n                            </next>\r\n                          </block>\r\n                        </next>\r\n                      </block>\r\n                    </next>\r\n                  </block>\r\n                </next>\r\n              </block>\r\n            </next>\r\n          </block>\r\n        </next>\r\n      </block>\r\n    </next>\r\n  </block>	print("=== Testing your program... =============================")\r\nshairi_la_mnazi=[''] * 10\r\nshairi_la_mnazi[0]='Pani kiti nikae kitako niwambie sifa za mnazi.'\r\nshairi_la_mnazi[1]='Mti huu unzapo kumeya makutiye yanga panga wazi.'\r\nshairi_la_mnazi[2]='Baadaye hushuska kigogo hutoleza mapanda na mizi,'\r\nshairi_la_mnazi[3]='hatimaye huwaa matunda matundaye inakwitwa nazi.'\r\nshairi_la_mnazi[4]='Huyangwa hwambua makutiye hapikia wali na mtunzi,'\r\nshairi_la_mnazi[5]='kifwuche hatonga upawa kapikia Saada muwandazi.'\r\nshairi_la_mnazi[6]='Na takizi hamwaya jaani katakura yimbi mtakuzi,'\r\nshairi_la_mnazi[7]='makumbiye hasokota kamba haundia sambwe na jahazi.'\r\nshairi_la_mnazi[8]='Makutiye hazibia nyumba hazuia pepo na fusizi,'\r\nshairi_la_mnazi[9]='kigogoche hafanyia mlango hazuia harubu na mwizi.'\r\nshairi2 = [''] * 18\r\nshairi2[0] = 'Mama, nipeeke, haoe kaoe'\r\nshairi2[1] = 'Urembo na shani Ungama,'\r\nshairi2[2] = 'Haoe mnara mpambo mpambe,'\r\nshairi2[3] = 'Uzainyeo hcshima.'\r\nshairi2[4] = 'Na wenyi kupamba patoto patoto.'\r\nshairi2[5] = 'Wavete vitindi na kama,'\r\nshairi2[6] = 'Wavete saufo ziemba ziemba,'\r\nshairi2[7] = 'Na mikili bee na nyuma.'\r\nshairi2[8] = 'Wavete libasi teule teule,'\r\nshairi2[9] = 'Kwa zitwana bee na nyuma.'\r\nshairi2[10] = 'Watukuze panga ngao na ngao.'\r\nshairi2[11] = 'Mtu hutoshea kuona.'\r\nshairi2[12] = 'Kujile Mngazidja na kubu na kubu,'\r\nshairi2[13] = 'Ujile kutaka harubu.'\r\nshairi2[14] = 'Kujile Mgala na mata na mata,'\r\nshairi2[15] = 'Ujile kutaka kuteta.'\r\nshairi2[16] = 'Tutawatilia ukuta ukuta,'\r\nshairi2[17] = 'Wasituingilie myini.'\r\ntest = 1\r\ntests = [(shairi_la_mnazi, 70), (shairi2, 72)]\r\ndef verifier_results():\r\n    print('NT_VERIFIER_RESULTS:%d:%d' % (test-1, len(tests)))\r\n    import sys\r\n    sys.exit(0)\r\nfor (shairi, answer) in tests:\r\n    print("TEST %d) Does count_maneno(%s) return %s?" % (test, shairi, answer))\r\n    result = count_maneno(shairi)\r\n    if result == answer:\r\n        print("\\t-> CORRECT")\r\n        test += 1\r\n    else:\r\n        print("\\t-> INCORRECT. Your code returns %s. Fix your mistake and try again." % result)\r\n        verifier_results()\r\nprint("ALL TESTS PASSED.")\r\nverifier_results()	15	f
43	Wasichana na Wavulana	Complete the Python function <i>wasichana_wavulana</i> so that it correctly counts the number of boys and girls in the <i>watu</i> variable.	<block type="def" id="9mvE0XIw1XMWt0Srsieu" x="104" y="96">\r\n    <field name="funcname">wasichana_wavulana</field>\r\n    <field name="funcargs">watu</field>\r\n    <statement name="funcbody">\r\n      <block type="varstore" id="^d{x%nIEJTDj,KOYJJ1W">\r\n        <field name="1">num_wasichana</field>\r\n        <field name="2">0</field>\r\n        <next>\r\n          <block type="varstore" id="(DJeV*7R)g,u{d1VFWRq">\r\n            <field name="1">num_wavulana</field>\r\n            <field name="2">0</field>\r\n            <next>\r\n              <block type="return" id="_c:8bIN0HgOQF^Q}?yu5">\r\n                <field name="expr">(num_wasichana, num_wavulana)</field>\r\n              </block>\r\n            </next>\r\n          </block>\r\n        </next>\r\n      </block>\r\n    </statement>\r\n    <next>\r\n      <block type="varstore" id="5YFlo=p~|8Ku{v[%j8~`">\r\n        <field name="1">wanafunzi</field>\r\n        <field name="2">{}</field>\r\n        <next>\r\n          <block type="varstore" id="gMsSCC27)p(B#[b-%B-3">\r\n            <field name="1">wanafunzi['Anitha']</field>\r\n            <field name="2">'F'</field>\r\n            <next>\r\n              <block type="varstore" id="f^qjh!HmU:/G{lA,CDzL">\r\n                <field name="1">wanafunzi['James']</field>\r\n                <field name="2">'M'</field>\r\n                <next>\r\n                  <block type="varstore" id="CCQ/,uf8@B*f1a(,mJ0p">\r\n                    <field name="1">wanafunzi['Godlove']</field>\r\n                    <field name="2">'M'</field>\r\n                    <next>\r\n                      <block type="varstore" id="8c*!TWzh;U3x+Y@Zhab4">\r\n                        <field name="1">wanafunzi['Endesh']</field>\r\n                        <field name="2">'F'</field>\r\n                        <next>\r\n                          <block type="varstore" id=".`{Kbl*,#C}j6.i(+M)s">\r\n                            <field name="1">wanafunzi['Fred']</field>\r\n                            <field name="2">'M'</field>\r\n                            <next>\r\n                              <block type="varstore" id="oOT(9*(LIk]`D8YJ80I/">\r\n                                <field name="1">wanafunzi['Nice']</field>\r\n                                <field name="2">'F'</field>\r\n                                <next>\r\n                                  <block type="varprint" id="wn_aECylpL;rMB31wnYu">\r\n                                    <field name="var">"Wasichana: %d, Wavulana: %d" % wasichana_wavulana(wanafunzi)</field>\r\n                                  </block>\r\n                                </next>\r\n                              </block>\r\n                            </next>\r\n                          </block>\r\n                        </next>\r\n                      </block>\r\n                    </next>\r\n                  </block>\r\n                </next>\r\n              </block>\r\n            </next>\r\n          </block>\r\n        </next>\r\n      </block>\r\n    </next>\r\n  </block>	print("=== Testing your program... =============================")\r\ntest = 1\r\ntests = [({'Anitha': 'F', 'James': 'M', 'Godlove': 'M', 'Endesh': 'F', 'Fred': 'M', 'Nice': 'F'}, (3, 3)), ({}, (0, 0)), ({'A': 'F', 'B': 'F', 'C': 'M', 'D': 'F', 'E': 'F', 'G': 'M'}, (4, 2))]\r\ndef verifier_results():\r\n    print('NT_VERIFIER_RESULTS:%d:%d' % (test-1, len(tests)))\r\n    import sys\r\n    sys.exit(0)\r\nfor (watu, answer) in tests:\r\n    print("TEST %d) Does wasichana_wavulana(%s) return %s?" % (test, watu, answer))\r\n    result = wasichana_wavulana(watu)\r\n    if result == answer:\r\n        print("\\t-> CORRECT")\r\n        test += 1\r\n    else:\r\n        print("\\t-> INCORRECT. Your code returns (%s, %s). Fix your mistake and try again." % (result[0], result[1]))\r\n        verifier_results()\r\nprint("ALL TESTS PASSED.")\r\nverifier_results()	17	f
7	Shule Iko Wapi?	This program first puts "Karatu" inside the variable <i>mahali</i>.Then it puts "TJS" inside the variable <i>shule</i>, kwa hiyo inasema "TJS iko Karatu."\r\n\r\n<br/><br/>\r\n\r\nChange the value of the <i>mahali</i> variable so that it prints "TSSS iko Makuyuni" instead.	<block type="varstore" id="=0p)}y/T},b2[uB.;6{`" x="-436" y="24">\r\n    <field name="1">mahali</field>\r\n    <field name="2">"Karatu"</field>\r\n    <next>\r\n      <block type="if" id="#!#%YElqI6Par-e+!JF2">\r\n        <field name="expr">mahali == "Karatu"</field>\r\n        <statement name="stmts">\r\n          <block type="varstore" id="2+bivTUv~sT:*gbfJ|U9">\r\n            <field name="1">shule</field>\r\n            <field name="2">"TJS"</field>\r\n          </block>\r\n        </statement>\r\n        <next>\r\n          <block type="elif" id="Z22_Fi}`*kNR:nrUdSDC">\r\n            <field name="expr">mahali == "Makuyuni"</field>\r\n            <statement name="stmts">\r\n              <block type="varstore" id="~.t_DNs=07i!.p,mnWpK">\r\n                <field name="1">shule</field>\r\n                <field name="2">"TSSS"</field>\r\n              </block>\r\n            </statement>\r\n            <next>\r\n              <block type="else" id="Lo#H:*tvL*)]X=zFziqK">\r\n                <statement name="DO">\r\n                  <block type="varstore" id="n_!st2SljSa{9O{^./;7">\r\n                    <field name="1">shule</field>\r\n                    <field name="2">"Shule nyingine"</field>\r\n                  </block>\r\n                </statement>\r\n                <next>\r\n                  <block type="varprint" id="[(i[%koKVrC?f:ys{sS?">\r\n                    <field name="var">"%s iko %s." % (shule, mahali)</field>\r\n                  </block>\r\n                </next>\r\n              </block>\r\n            </next>\r\n          </block>\r\n        </next>\r\n      </block>\r\n    </next>\r\n  </block>	print("=== Testing your program... =============================")\r\ntest = 1\r\ntests = [("mahali", mahali, "Makuyuni"), ("shule", shule, "TSSS")]\r\ndef verifier_results():\r\n    print('NT_VERIFIER_RESULTS:%d:%d' % (test-1, len(tests)))\r\n    import sys\r\n    sys.exit(0)\r\nfor (varname, var, answer) in tests:\r\n    print("TEST %d) Is %s equal to '%s'?" % (test, varname, answer))\r\n    if var == answer:\r\n        print("\\t-> CORRECT")\r\n        test += 1\r\n    else:\r\n        print("\\t-> INCORRECT. %s is equal to '%s' . Fix your mistake and try again." % (varname, var))\r\n        verifier_results()\r\nprint("ALL TESTS PASSED.")\r\nverifier_results()	3	f
6	Odd and Even	In this challenge, you are given code that puts 5 inside the variable <i>n</i>, then displays whether <i>n</i> is odd and whether it is even.\r\n\r\n<br/><br/>\r\n\r\nChange the code so that <i>n</i> contains any even number, not an odd number.	<block type="varstore" id="xRLmA07lvm4%Gg!g.{(F" x="-222" y="28">\r\n    <field name="1">n</field>\r\n    <field name="2">5</field>\r\n    <next>\r\n      <block type="varprint" id="|E~!YrZ5.r7PXpnTk6c:">\r\n        <field name="var">"Is %d odd: %s" % (n, n % 2 == 1)</field>\r\n        <next>\r\n          <block type="varprint" id="PFVe*2}N6O[_7PWu}d=:">\r\n            <field name="var">"Is %d even: %s" % (n, n % 2 == 0)</field>\r\n          </block>\r\n        </next>\r\n      </block>\r\n    </next>\r\n  </block>	print("=== Testing your program... =============================")\r\ntest = 1\r\ntests = [True]\r\ndef verifier_results():\r\n    print('NT_VERIFIER_RESULTS:%d:%d' % (test-1, len(tests)))\r\n    import sys\r\n    sys.exit(0)\r\nfor answer in tests:\r\n    print("TEST %d) Is n even?" % test)\r\n    result = (n % 2 == 0)\r\n    if result == answer:\r\n        print("\\t-> CORRECT")\r\n        test += 1\r\n    else:\r\n        print("\\t-> INCORRECT. You put an odd number in n. Fix your mistake and try again.")\r\n        verifier_results()\r\nprint("ALL TESTS PASSED.")\r\nverifier_results()	3	f
5	Counting Numbers in a List	In this challenge, you are given Python code that is supposed to count how many numbers are in a list. However, the code is wrong because it always returns 0. Fix the problem to solve this challenge.	<block type="def" id="GcO3J!8*60i8lcVgVHy+" x="21" y="32">\r\n    <field name="funcname">count_numbers</field>\r\n    <field name="funcargs">list</field>\r\n    <statement name="funcbody">\r\n      <block type="varstore" id="#aY4~-Qj2*Y@U`;C*chv">\r\n        <field name="1">count</field>\r\n        <field name="2">0</field>\r\n        <next>\r\n          <block type="for" id="{uJIL:Z#4MOu1Z|h2F`N">\r\n            <field name="item">number</field>\r\n            <field name="seq">list</field>\r\n            <statement name="stmts">\r\n              <block type="varplus" id="1U_-^bZ7/XL{nI-0^L?a">\r\n                <field name="lhs">count</field>\r\n                <field name="rhs">0</field>\r\n              </block>\r\n            </statement>\r\n            <next>\r\n              <block type="return" id="Z0]k3`Lf,WAkG^y+rzS?">\r\n                <field name="expr">count</field>\r\n              </block>\r\n            </next>\r\n          </block>\r\n        </next>\r\n      </block>\r\n    </statement>\r\n    <next>\r\n      <block type="varprint" id="i2?q)r54tvP?k.!tt/v*">\r\n        <field name="var">count_numbers([])</field>\r\n        <next>\r\n          <block type="varprint" id="E/uMU58]]1O4yApp_:_b">\r\n            <field name="var">count_numbers([0])</field>\r\n            <next>\r\n              <block type="varprint" id="z_c~V`WmoTBH9bMtY(G;">\r\n                <field name="var">count_numbers([1,2,3])</field>\r\n                <next>\r\n                  <block type="varprint" id="S7`9jt+HLZuQ0kZR,SCc">\r\n                    <field name="var">count_numbers([7,5,10,9,7,55])</field>\r\n                  </block>\r\n                </next>\r\n              </block>\r\n            </next>\r\n          </block>\r\n        </next>\r\n      </block>\r\n    </next>\r\n  </block>	print("=== Testing your program... =============================")\r\ntest = 1\r\ntests = [([], 0), ([0], 1), ([1,2,3], 3), ([7,5,10,9,7,55], 6)]\r\ndef verifier_results():\r\n    print('NT_VERIFIER_RESULTS:%d:%d' % (test-1, len(tests)))\r\n    import sys\r\n    sys.exit(0)\r\nfor tuple in tests:\r\n    print("TEST %d) Does count_numbers(%s) return %d?" % (test, tuple[0], tuple[1]))\r\n    result = count_numbers(tuple[0])\r\n    if result == tuple[1]:\r\n        print("\\t-> CORRECT")\r\n        test += 1\r\n    else:\r\n        print("\\t-> INCORRECT. Your code returns %s. Fix your mistake and try again." % result)\r\n        verifier_results()\r\nprint("ALL TESTS PASSED.")\r\nverifier_results()	3	f
10	Meza Ngapi?	This Python program asks you a question. Answer the question correctly to complete this challenge.	<block type="varstore" id="WeW)x7u~l_7D(xO2v5la" x="59" y="71">\r\n    <field name="1">jibu</field>\r\n    <field name="2">int(input("Chumba cha kompyuta kina meza ngapi? "))</field>\r\n    <next>\r\n      <block type="if" id="#GGLZ@i?l,1UpeWKpZP`">\r\n        <field name="expr">jibu &lt; 6</field>\r\n        <statement name="stmts">\r\n          <block type="print" id="5`qNmp[xYyichAP[eg_[">\r\n            <field name="print">Ongeza.</field>\r\n          </block>\r\n        </statement>\r\n        <next>\r\n          <block type="elif" id="P!!D5ciA79,jN@95DpJ0">\r\n            <field name="expr">jibu &gt; 6</field>\r\n            <statement name="stmts">\r\n              <block type="print" id="!;SKWbHf:#jxYI=/79jo">\r\n                <field name="print">Punguza.</field>\r\n              </block>\r\n            </statement>\r\n            <next>\r\n              <block type="else" id="%0w@4~gGVobBaz=jA/{J">\r\n                <statement name="DO">\r\n                  <block type="print" id="2kM6k+IS]M%sfD*JS.5^">\r\n                    <field name="print">Ndiyo.</field>\r\n                  </block>\r\n                </statement>\r\n              </block>\r\n            </next>\r\n          </block>\r\n        </next>\r\n      </block>\r\n    </next>\r\n  </block>	print("=== Testing your program... =============================")\r\ntest = 1\r\ntests = [("jibu", jibu, 6)]\r\ndef verifier_results():\r\n    print('NT_VERIFIER_RESULTS:%d:%d' % (test-1, len(tests)))\r\n    import sys\r\n    sys.exit(0)\r\nfor (varname, var, answer) in tests:\r\n    print("TEST %d) Did you answer correctly?" % test)\r\n    if var == answer:\r\n        print("\\t-> CORRECT")\r\n        test += 1\r\n    else:\r\n        print("\\t-> INCORRECT. You answered %d. Try again." % var)\r\n        verifier_results()\r\nprint("ALL TESTS PASSED.")\r\nverifier_results()	3	f
11	Sum Function	This Python code has a function to calculate the sum of two numbers, but it always returns 0 no matter what numbers it's given.\r\n\r\n<br/><br/>\r\n\r\nFix the code so that it returns the correct sum for any two numbers.	<block type="def" id="buKm|`z#dn.^?[1H,/BB" x="28" y="14">\r\n    <field name="funcname">sum</field>\r\n    <field name="funcargs">a, b</field>\r\n    <statement name="funcbody">\r\n      <block type="return" id="[Fma8xw`TO!%OGq(7Hmp">\r\n        <field name="expr">0</field>\r\n      </block>\r\n    </statement>\r\n    <next>\r\n      <block type="varprint" id="ob^+GyBxzF9UO:wH0g#3">\r\n        <field name="var">"Sum of 0 and 0: %d" % sum(0, 0)</field>\r\n        <next>\r\n          <block type="varprint" id="/jF3_#)Y3qGG5FPdDyTr">\r\n            <field name="var">"Sum of 1 and 2: %d" % sum(1, 2)</field>\r\n            <next>\r\n              <block type="varprint" id="|+`;]r:Hg@/Sd.}(Q.rm">\r\n                <field name="var">"Sum of 4 and 5: %d" % sum(4, 5)</field>\r\n                <next>\r\n                  <block type="varprint" id="3E.tad%3}poR=(ZH`41b">\r\n                    <field name="var">"Sum of 100 and 8: %d" % sum(100, 8)</field>\r\n                  </block>\r\n                </next>\r\n              </block>\r\n            </next>\r\n          </block>\r\n        </next>\r\n      </block>\r\n    </next>\r\n  </block>	print("=== Testing your program... =============================")\r\ntest = 1\r\ntests = [(0,0,0), (1,2,3), (4,5,9), (100,8,108), (50,200,250), (7,-20,-13), (-4, -4, -8)]\r\ndef verifier_result():\r\n    pyprint('NT_VERIFIER_RESULTS:%d:%d' % (test-1, len(tests)))\r\n    import sys\r\n    sys.exit(0)\r\nfor triple in tests:\r\n    print("TEST %d) Does sum(%d, %d) return %d?" % (test, triple[0], triple[1], triple[2]))\r\n    result = sum(triple[0], triple[1])\r\n    if result == triple[2]:\r\n        print("\\t-> CORRECT")\r\n        test += 1\r\n    else:\r\n        print("\\t-> INCORRECT. Your code returns %s. Fix the problem and try again." % result)\r\n        verifier_result()\r\nprint("ALL TESTS PASSED.")\r\nverifier_result()	3	f
4	Sum of Two Numbers	This Python program puts 5 in <i>a</i> and 8 in <i>b</i>. The sum of 5 and 8 is 13.\r\n\r\n<br/><br/>\r\n\r\nChange <i>a</i> and/or <i>b</i> so that <i>a + b</i> is equal to 24 instead of 13.	<block type="varstore" id="1:P*HYm|hXRm=cpRB9E;" x="41" y="27">\r\n    <field name="1">a</field>\r\n    <field name="2">5</field>\r\n    <next>\r\n      <block type="varprint" id="6}W9X,;@lXy1p[JG4m#g">\r\n        <field name="var">a</field>\r\n        <next>\r\n          <block type="varstore" id="HGB37-aOC?JegEk6`Ul?">\r\n            <field name="1">b</field>\r\n            <field name="2">8</field>\r\n            <next>\r\n              <block type="varprint" id="`6lS*hAWS[={Qp91ETQU">\r\n                <field name="var">b</field>\r\n                <next>\r\n                  <block type="varstore" id="Zs?I{g}cm#Q1J]~]iI,-">\r\n                    <field name="1">sum</field>\r\n                    <field name="2">a + b</field>\r\n                    <next>\r\n                      <block type="varprint" id="Ku=^]/#dg*pYr3AZ.z-t">\r\n                        <field name="var">sum</field>\r\n                      </block>\r\n                    </next>\r\n                  </block>\r\n                </next>\r\n              </block>\r\n            </next>\r\n          </block>\r\n        </next>\r\n      </block>\r\n    </next>\r\n  </block>	print("=== Testing your program... =============================")\r\ntest = 1\r\ntests = [24]\r\ndef verifier_results():\r\n    print('NT_VERIFIER_RESULTS:%d:%d' % (test-1, len(tests)))\r\n    import sys\r\n    sys.exit(0)\r\nfor sum in tests:\r\n    print("TEST %d) Does (a + b) sum to %s?" % (test, sum))\r\n    result = a + b\r\n    if result == sum:\r\n        print("\\t-> CORRECT")\r\n        test += 1\r\n    else:\r\n        print("\\t-> INCORRECT. Your code returns %s. Fix your mistake and try again." % result)\r\n        verifier_results()\r\nprint("ALL TESTS PASSED.")\r\nverifier_results()	3	f
