48	Add Level	45	### IMPORTANT: Preamble required on server; omitted here. ####\r\n\r\nimport pyxel\r\nfrom random import randint\r\n\r\nclass App:\r\n    def __init__(self):\r\n        pyxel.init(160, 120, caption='Mchezo')\r\n\r\n        pyxel.image(0).load(0, 0, 'sprites2.png')\r\n\r\n        self.clouds = [(10, 10), (60, 20), (120, 5)]\r\n        self.player_x = 70\r\n        self.player_y = 50\r\n        self.score = 0\r\n        self.makombora = []\r\n        self.player_xdir = 1\r\n        self.malimau = [(150, randint(0, 120), False)]\r\n        self.cherries = [(0, randint(0, 120), False)]\r\n        self.game_over = False\r\n        # SOLN: Added this var\r\n        self.level = 1\r\n        pyxel.run(self.update, self.draw)\r\n\r\n    def update(self):\r\n        if pyxel.btnp(pyxel.KEY_ESCAPE):\r\n            pyxel.quit()\r\n        if self.game_over:\r\n            return\r\n        self.update_player()\r\n        self.update_score()\r\n\r\n    def is_fruit_hit_by_kombora(self, fruit_x, fruit_y):\r\n        for kom_x, kom_y, _ in self.makombora:\r\n            if kom_x >= fruit_x and kom_x <= fruit_x + 16 \\\r\n                    and kom_y >= fruit_y and kom_y <= fruit_y + 16:\r\n                return True\r\n        return False\r\n\r\n    def update_score(self):\r\n        self.malimau = [(x, y, True if abs(x - self.player_x) < 14 \\\r\n                                   and abs(y - self.player_y) < 14 else False) \\\r\n                        for x, y, hit in self.malimau]\r\n        self.score -= 5 * len(list(filter(lambda limau: limau[2], self.malimau)))\r\n        self.malimau = list(filter(lambda limau: not limau[2], self.malimau))\r\n        self.malimau = [(x, y, True if self.is_fruit_hit_by_kombora(x, y) \\\r\n                                    else False) for x, y, hit in self.malimau]\r\n        self.score += 10 * len(list(filter(lambda limau: limau[2], self.malimau)))\r\n        while len(self.malimau) < 1:\r\n            self.malimau.append((150, randint(0, 120), False))\r\n        self.cherries = [(x, y, True if abs(x - self.player_x) < 14 \\\r\n                                   and abs(y - self.player_y) < 14 else False) \\\r\n                        for x, y, hit in self.cherries]\r\n        self.score += 7 * len(list(filter(lambda cherry: cherry[2], self.cherries)))\r\n        self.cherries = list(filter(lambda cherry: not cherry[2], self.cherries))\r\n        self.cherries = [(x, y, True if self.is_fruit_hit_by_kombora(x, y) \\\r\n                                    else False) for x, y, hit in self.cherries]\r\n        self.score -= 20 * len(list(filter(lambda cherry: cherry[2], self.cherries)))\r\n        while len(self.cherries) < 1:\r\n            self.cherries.append((0, randint(0, 120), False))\r\n        if self.score < 0:\r\n            self.game_over = True\r\n\r\n    def update_player(self):\r\n        if pyxel.btn(pyxel.KEY_W) or pyxel.btn(pyxel.KEY_UP):\r\n            self.player_y -= 2\r\n\r\n        if pyxel.btn(pyxel.KEY_A) or pyxel.btn(pyxel.KEY_LEFT):\r\n            self.player_x -= 2\r\n\r\n        if pyxel.btn(pyxel.KEY_S) or pyxel.btn(pyxel.KEY_DOWN):\r\n            self.player_y += 2\r\n\r\n        if pyxel.btn(pyxel.KEY_D) or pyxel.btn(pyxel.KEY_RIGHT):\r\n            self.player_x += 2\r\n\r\n        if pyxel.btnp(pyxel.KEY_SPACE):\r\n            self.makombora.append((self.player_x+8, \\\r\n                    self.player_y+8, self.player_xdir))\r\n\r\n        if pyxel.btnp(pyxel.KEY_F):\r\n            self.player_xdir *= -1\r\n\r\n    def draw(self):\r\n    \t# clear screen, paint sky blue\r\n        pyxel.cls(12)\r\n\r\n        # draw horizon + mountain + forest\r\n        pyxel.blt(0, 0, 0, 0, 120, 160, 120)\r\n\r\n        # draw clouds\r\n        offset = (pyxel.frame_count / 4) % 160\r\n        for i in range(2):\r\n          for x, y in self.clouds:\r\n            pyxel.blt(x + (i * 160) - offset, y, 0, 0, 32, 56, 8)\r\n\r\n        # draw malimau\r\n        for x, y, hit in self.malimau:\r\n            pyxel.blt(x, y, 0, 48, 0, 16, 16, 12)\r\n        self.malimau = [(x - 1, y, hit) if x > -16 and not hit \\\r\n                else (150, randint(0, 120), False) for x, y, hit in self.malimau]\r\n\r\n        # draw cherries\r\n        for x, y, hit in self.cherries:\r\n            pyxel.blt(x, y, 0, 32, 0, 16, 16, 12)\r\n        self.cherries = [(x + 1, y, hit) if x < 160 + 16 and not hit \\\r\n                else (0, randint(0, 120), False) for x, y, hit in self.cherries]\r\n\r\n        # draw girl\r\n        pyxel.blt(self.player_x, self.player_y, 0, 0, 0,\r\n                16*self.player_xdir, 16, 12)\r\n\r\n        # draw makombora\r\n        for x, y, _ in self.makombora:\r\n            pyxel.pix(x, y, 8)\r\n        self.makombora = [(x+1*direction, y, direction) \\\r\n                for x, y, direction in self.makombora if x < 160 and x > 0]\r\n\r\n        # draw score\r\n        pyxel.text(5, 4, f"SCORE: {self.score}", 1)\r\n        pyxel.text(4, 4, f"SCORE: {self.score}", 7)\r\n\r\n        # SOLN: Added this block\r\n        # draw level\r\n        pyxel.text(121, 4, f"LEVEL: {self.level}", 1)\r\n        pyxel.text(120, 4, f"LEVEL: {self.level}", 7)\r\n\r\n        # draw end of game\r\n        if self.game_over:\r\n            pyxel.text(60, 50, f"UMESHINDWA!", pyxel.frame_count % 16)\r\nApp()	As the player gets more points, they should go up in levels. For that we need a new variable.\r\n<br/><br/>\r\n<ul>\r\n<li>Create a new variable called <code>self.level</code>. When the game starts you should start the player at level 1.</li>\r\n<li>In your <code>draw(self)</code> function, <b>immediately after you draw the score</b>, write the text: "LEVEL: _____" at 120 on the X axis and 4 on the Y axis. In your code, don't write a blank: fill this in with the actual level variable. Also be sure to put a black shadow under the text, as you did with the score.</li>\r\n</ul>	# Note: PD_STATIC_IMAGES_PATH varies based on address\r\n# of server and thus is prepended to this value in views.py\r\nimport os, requests\r\nBASE_DIR = os.path.dirname(os.path.abspath(__file__))\r\nfiles_to_load = ['sprites2.png']\r\nfor fname in files_to_load:\r\n  fpath = os.path.join(BASE_DIR, fname)\r\n  if not os.path.exists(fpath):\r\n    with open(fpath, 'wb') as f:\r\n      f.write(requests.get(PD_STATIC_IMAGES_PATH+fname).content)
47	If Points Go Negative, Ushindwe	44	### IMPORTANT: Preamble required on server; omitted here. ####\r\n\r\nimport pyxel\r\nfrom random import randint\r\n\r\nclass App:\r\n    def __init__(self):\r\n        pyxel.init(160, 120, caption='Mchezo')\r\n\r\n        pyxel.image(0).load(0, 0, 'sprites2.png')\r\n\r\n        self.clouds = [(10, 10), (60, 20), (120, 5)]\r\n        self.player_x = 70\r\n        self.player_y = 50\r\n        self.score = 0\r\n        self.makombora = []\r\n        self.player_xdir = 1\r\n        self.malimau = [(150, randint(0, 120), False)]\r\n        self.cherries = [(0, randint(0, 120), False)]\r\n        # SOLN: Added this line\r\n        self.game_over = False\r\n        pyxel.run(self.update, self.draw)\r\n\r\n    def update(self):\r\n        if pyxel.btnp(pyxel.KEY_ESCAPE):\r\n            pyxel.quit()\r\n        # SOLN: Added this if\r\n        if self.game_over:\r\n            return\r\n        self.update_player()\r\n        self.update_score()\r\n\r\n    def is_fruit_hit_by_kombora(self, fruit_x, fruit_y):\r\n        for kom_x, kom_y, _ in self.makombora:\r\n            if kom_x >= fruit_x and kom_x <= fruit_x + 16 \\\r\n                    and kom_y >= fruit_y and kom_y <= fruit_y + 16:\r\n                return True\r\n        return False\r\n\r\n    def update_score(self):\r\n        self.malimau = [(x, y, True if abs(x - self.player_x) < 14 \\\r\n                                   and abs(y - self.player_y) < 14 else False) \\\r\n                        for x, y, hit in self.malimau]\r\n        self.score -= 5 * len(list(filter(lambda limau: limau[2], self.malimau)))\r\n        self.malimau = list(filter(lambda limau: not limau[2], self.malimau))\r\n        self.malimau = [(x, y, True if self.is_fruit_hit_by_kombora(x, y) \\\r\n                                    else False) for x, y, hit in self.malimau]\r\n        self.score += 10 * len(list(filter(lambda limau: limau[2], self.malimau)))\r\n        while len(self.malimau) < 1:\r\n            self.malimau.append((150, randint(0, 120), False))\r\n        self.cherries = [(x, y, True if abs(x - self.player_x) < 14 \\\r\n                                   and abs(y - self.player_y) < 14 else False) \\\r\n                        for x, y, hit in self.cherries]\r\n        self.score += 7 * len(list(filter(lambda cherry: cherry[2], self.cherries)))\r\n        self.cherries = list(filter(lambda cherry: not cherry[2], self.cherries))\r\n        self.cherries = [(x, y, True if self.is_fruit_hit_by_kombora(x, y) \\\r\n                                    else False) for x, y, hit in self.cherries]\r\n        self.score -= 20 * len(list(filter(lambda cherry: cherry[2], self.cherries)))\r\n        while len(self.cherries) < 1:\r\n            self.cherries.append((0, randint(0, 120), False))\r\n        # SOLN: Added this if\r\n        if self.score < 0:\r\n            self.game_over = True\r\n\r\n    def update_player(self):\r\n        if pyxel.btn(pyxel.KEY_W) or pyxel.btn(pyxel.KEY_UP):\r\n            self.player_y -= 2\r\n\r\n        if pyxel.btn(pyxel.KEY_A) or pyxel.btn(pyxel.KEY_LEFT):\r\n            self.player_x -= 2\r\n\r\n        if pyxel.btn(pyxel.KEY_S) or pyxel.btn(pyxel.KEY_DOWN):\r\n            self.player_y += 2\r\n\r\n        if pyxel.btn(pyxel.KEY_D) or pyxel.btn(pyxel.KEY_RIGHT):\r\n            self.player_x += 2\r\n\r\n        if pyxel.btnp(pyxel.KEY_SPACE):\r\n            self.makombora.append((self.player_x+8, \\\r\n                    self.player_y+8, self.player_xdir))\r\n\r\n        if pyxel.btnp(pyxel.KEY_F):\r\n            self.player_xdir *= -1\r\n\r\n    def draw(self):\r\n    \t# clear screen, paint sky blue\r\n        pyxel.cls(12)\r\n\r\n        # draw horizon + mountain + forest\r\n        pyxel.blt(0, 0, 0, 0, 120, 160, 120)\r\n\r\n        # draw clouds\r\n        offset = (pyxel.frame_count / 4) % 160\r\n        for i in range(2):\r\n          for x, y in self.clouds:\r\n            pyxel.blt(x + (i * 160) - offset, y, 0, 0, 32, 56, 8)\r\n\r\n        # draw malimau\r\n        for x, y, hit in self.malimau:\r\n            pyxel.blt(x, y, 0, 48, 0, 16, 16, 12)\r\n        self.malimau = [(x - 1, y, hit) if x > -16 and not hit \\\r\n                else (150, randint(0, 120), False) for x, y, hit in self.malimau]\r\n\r\n        # draw cherries\r\n        for x, y, hit in self.cherries:\r\n            pyxel.blt(x, y, 0, 32, 0, 16, 16, 12)\r\n        self.cherries = [(x + 1, y, hit) if x < 160 + 16 and not hit \\\r\n                else (0, randint(0, 120), False) for x, y, hit in self.cherries]\r\n\r\n        # draw girl\r\n        pyxel.blt(self.player_x, self.player_y, 0, 0, 0,\r\n                16*self.player_xdir, 16, 12)\r\n\r\n        # draw makombora\r\n        for x, y, _ in self.makombora:\r\n            pyxel.pix(x, y, 8)\r\n        self.makombora = [(x+1*direction, y, direction) \\\r\n                for x, y, direction in self.makombora if x < 160 and x > 0]\r\n\r\n        # draw score\r\n        pyxel.text(5, 4, f"SCORE: {self.score}", 1)\r\n        pyxel.text(4, 4, f"SCORE: {self.score}", 7)\r\n\r\n        # SOLN: Added this block\r\n        # draw end of game\r\n        if self.game_over:\r\n            pyxel.text(60, 50, f"UMESHINDWA!", pyxel.frame_count % 16)\r\nApp()	If the player's score goes negative, end the game and tell them that they lost:\r\n<br/><br/>\r\n<ul>\r\n<li>Create a new variable called <code>self.game_over</code>. When the game starts, it should be <code>False</code>.</li>\r\n<li>At the <b>very end</b> of your <code>update_score(self)</code> function, add an <code>if</code> that checks if the score is less than 0. If it is, set <code>self.game_over</code> to <code>True</code>.</li>\r\n<li>Inside your <code>update(self)</code> function, <b>after you check for the Escape key but before you call your other functions</b>, use an <code>if</code> to check if the game is over. If it is, use <code>return</code> to exit the function without doing anything else.</li>\r\n<li>Finally, at the very end of your <code>draw(self)</code> function, add an <code>if</code> that checks if the game is over. If it is, write the text "UMESHINDWA!" at 60 on the X axis and 50 on the Y axis. Use <code>pyxel.frame_count % 16</code> for the color of the text.</li>\r\n</ul>	# Note: PD_STATIC_IMAGES_PATH varies based on address\r\n# of server and thus is prepended to this value in views.py\r\nimport os, requests\r\nBASE_DIR = os.path.dirname(os.path.abspath(__file__))\r\nfiles_to_load = ['sprites2.png']\r\nfor fname in files_to_load:\r\n  fpath = os.path.join(BASE_DIR, fname)\r\n  if not os.path.exists(fpath):\r\n    with open(fpath, 'wb') as f:\r\n      f.write(requests.get(PD_STATIC_IMAGES_PATH+fname).content)
51	Remove Kombora After First Hit	48	### IMPORTANT: Preamble required on server; omitted here. ####\r\n\r\nimport pyxel\r\nfrom random import randint\r\n\r\nclass App:\r\n    def __init__(self):\r\n        pyxel.init(160, 120, caption='Mchezo')\r\n\r\n        pyxel.image(0).load(0, 0, 'sprites2.png')\r\n\r\n        self.clouds = [(10, 10), (60, 20), (120, 5)]\r\n        self.player_x = 70\r\n        self.player_y = 50\r\n        self.score = 0\r\n        self.makombora = []\r\n        self.player_xdir = 1\r\n        self.malimau = [(150, randint(0, 120), False)]\r\n        self.cherries = [(0, randint(0, 120), False)]\r\n        self.game_over = False\r\n        self.level = 1\r\n        pyxel.run(self.update, self.draw)\r\n\r\n    def update(self):\r\n        if pyxel.btnp(pyxel.KEY_ESCAPE):\r\n            pyxel.quit()\r\n        if self.game_over:\r\n            return\r\n        self.update_player()\r\n        self.update_score()\r\n        self.update_level()\r\n\r\n    def is_fruit_hit_by_kombora(self, fruit_x, fruit_y):\r\n        # SOLN: Changed function body\r\n        len_before_filter = len(self.makombora)\r\n        self.makombora = list(filter(lambda kom: \\\r\n                not (kom[0] >= fruit_x and kom[0] <= fruit_x + 16 \\\r\n                    and kom[1] >= fruit_y and kom[1] <= fruit_y + 16),\\\r\n                        self.makombora))\r\n        return len_before_filter != len(self.makombora)\r\n\r\n    def update_level(self):\r\n        self.level = (self.score // 20) + 1\r\n\r\n    def update_score(self):\r\n        self.malimau = [(x, y, True if abs(x - self.player_x) < 14 \\\r\n                                   and abs(y - self.player_y) < 14 else False) \\\r\n                        for x, y, hit in self.malimau]\r\n        self.score -= 5 * len(list(filter(lambda limau: limau[2], self.malimau)))\r\n        self.malimau = list(filter(lambda limau: not limau[2], self.malimau))\r\n        self.malimau = [(x, y, True if self.is_fruit_hit_by_kombora(x, y) \\\r\n                                    else False) for x, y, hit in self.malimau]\r\n        self.score += 10 * len(list(filter(lambda limau: limau[2], self.malimau)))\r\n        while len(self.malimau) < self.level:\r\n            self.malimau.append((150, randint(0, 120), False))\r\n        self.cherries = [(x, y, True if abs(x - self.player_x) < 14 \\\r\n                                   and abs(y - self.player_y) < 14 else False) \\\r\n                        for x, y, hit in self.cherries]\r\n        self.score += 7 * len(list(filter(lambda cherry: cherry[2], self.cherries)))\r\n        self.cherries = list(filter(lambda cherry: not cherry[2], self.cherries))\r\n        self.cherries = [(x, y, True if self.is_fruit_hit_by_kombora(x, y) \\\r\n                                    else False) for x, y, hit in self.cherries]\r\n        self.score -= 20 * len(list(filter(lambda cherry: cherry[2], self.cherries)))\r\n        while len(self.cherries) < 1:\r\n            self.cherries.append((0, randint(0, 120), False))\r\n        if self.score < 0:\r\n            self.game_over = True\r\n\r\n    def update_player(self):\r\n        if pyxel.btn(pyxel.KEY_W) or pyxel.btn(pyxel.KEY_UP):\r\n            self.player_y -= 2\r\n\r\n        if pyxel.btn(pyxel.KEY_A) or pyxel.btn(pyxel.KEY_LEFT):\r\n            self.player_x -= 2\r\n\r\n        if pyxel.btn(pyxel.KEY_S) or pyxel.btn(pyxel.KEY_DOWN):\r\n            self.player_y += 2\r\n\r\n        if pyxel.btn(pyxel.KEY_D) or pyxel.btn(pyxel.KEY_RIGHT):\r\n            self.player_x += 2\r\n\r\n        if pyxel.btnp(pyxel.KEY_SPACE):\r\n            self.makombora.append((self.player_x+8, \\\r\n                    self.player_y+8, self.player_xdir))\r\n\r\n        if pyxel.btnp(pyxel.KEY_F):\r\n            self.player_xdir *= -1\r\n\r\n    def draw(self):\r\n    \t# clear screen, paint sky blue\r\n        pyxel.cls(12)\r\n\r\n        # draw horizon + mountain + forest\r\n        pyxel.blt(0, 0, 0, 0, 120, 160, 120)\r\n\r\n        # draw clouds\r\n        offset = (pyxel.frame_count / 4) % 160\r\n        for i in range(2):\r\n          for x, y in self.clouds:\r\n            pyxel.blt(x + (i * 160) - offset, y, 0, 0, 32, 56, 8)\r\n\r\n        # draw malimau\r\n        for x, y, hit in self.malimau:\r\n            pyxel.blt(x, y, 0, 48, 0, 16, 16, 12)\r\n        self.malimau = [(x - 1, y, hit) if x > -16 and not hit \\\r\n                else (150, randint(0, 120), False) for x, y, hit in self.malimau]\r\n\r\n        # draw cherries\r\n        for x, y, hit in self.cherries:\r\n            pyxel.blt(x, y, 0, 32, 0, 16, 16, 12)\r\n        self.cherries = [(x + 1, y, hit) if x < 160 + 16 and not hit \\\r\n                else (0, randint(0, 120), False) for x, y, hit in self.cherries]\r\n\r\n        # draw girl\r\n        pyxel.blt(self.player_x, self.player_y, 0, 0, 0,\r\n                16*self.player_xdir, 16, 12)\r\n\r\n        # draw makombora\r\n        for x, y, _ in self.makombora:\r\n            pyxel.pix(x, y, 8)\r\n        self.makombora = [(x+1*direction, y, direction) \\\r\n                for x, y, direction in self.makombora if x < 160 and x > 0]\r\n\r\n        # draw score\r\n        pyxel.text(5, 4, f"SCORE: {self.score}", 1)\r\n        pyxel.text(4, 4, f"SCORE: {self.score}", 7)\r\n\r\n        # draw level\r\n        pyxel.text(121, 4, f"LEVEL: {self.level}", 1)\r\n        pyxel.text(120, 4, f"LEVEL: {self.level}", 7)\r\n\r\n        # draw end of game\r\n        if self.game_over:\r\n            pyxel.text(60, 50, f"UMESHINDWA!", pyxel.frame_count % 16)\r\nApp()	In our game right now, a single kombora can hit multiple fruit before it goes off the screen. This makes the game too easy. Let's change it so that a kombora disappears after it hits just a single fruit. Change your <code>is_fruit_hit_by_kombora(self, fruit_x, fruit_y)</code> function to look like this:\r\n<br/><br/>\r\n<p><code>\r\nlen_before_filter = len(self.makombora)<br/>\r\nself.makombora = ______________________________________<br/>\r\nreturn len_before_filter != len(self.makombora)\r\n</code></p>\r\n\r\nIn the blank, write a filter that keeps only those makombora <b>that have not hit a fruit</b>. Think carefully: this is the opposite of what you wrote for your old <code>if</code> inside this function. This means you should reuse what you wrote before inside that <code>if</code>, but use a Python word here to get its opposite.	# Note: PD_STATIC_IMAGES_PATH varies based on address\r\n# of server and thus is prepended to this value in views.py\r\nimport os, requests\r\nBASE_DIR = os.path.dirname(os.path.abspath(__file__))\r\nfiles_to_load = ['sprites2.png']\r\nfor fname in files_to_load:\r\n  fpath = os.path.join(BASE_DIR, fname)\r\n  if not os.path.exists(fpath):\r\n    with open(fpath, 'wb') as f:\r\n      f.write(requests.get(PD_STATIC_IMAGES_PATH+fname).content)
49	Change Level Based on Score	46	### IMPORTANT: Preamble required on server; omitted here. ####\r\n\r\nimport pyxel\r\nfrom random import randint\r\n\r\nclass App:\r\n    def __init__(self):\r\n        pyxel.init(160, 120, caption='Mchezo')\r\n\r\n        pyxel.image(0).load(0, 0, 'sprites2.png')\r\n\r\n        self.clouds = [(10, 10), (60, 20), (120, 5)]\r\n        self.player_x = 70\r\n        self.player_y = 50\r\n        self.score = 0\r\n        self.makombora = []\r\n        self.player_xdir = 1\r\n        self.malimau = [(150, randint(0, 120), False)]\r\n        self.cherries = [(0, randint(0, 120), False)]\r\n        self.game_over = False\r\n        self.level = 1\r\n        pyxel.run(self.update, self.draw)\r\n\r\n    def update(self):\r\n        if pyxel.btnp(pyxel.KEY_ESCAPE):\r\n            pyxel.quit()\r\n        if self.game_over:\r\n            return\r\n        self.update_player()\r\n        self.update_score()\r\n        # SOLN: Added this call\r\n        self.update_level()\r\n\r\n    def is_fruit_hit_by_kombora(self, fruit_x, fruit_y):\r\n        for kom_x, kom_y, _ in self.makombora:\r\n            if kom_x >= fruit_x and kom_x <= fruit_x + 16 \\\r\n                    and kom_y >= fruit_y and kom_y <= fruit_y + 16:\r\n                return True\r\n        return False\r\n\r\n    # SOLN: Added this function\r\n    def update_level(self):\r\n        self.level = (self.score // 20) + 1\r\n\r\n    def update_score(self):\r\n        self.malimau = [(x, y, True if abs(x - self.player_x) < 14 \\\r\n                                   and abs(y - self.player_y) < 14 else False) \\\r\n                        for x, y, hit in self.malimau]\r\n        self.score -= 5 * len(list(filter(lambda limau: limau[2], self.malimau)))\r\n        self.malimau = list(filter(lambda limau: not limau[2], self.malimau))\r\n        self.malimau = [(x, y, True if self.is_fruit_hit_by_kombora(x, y) \\\r\n                                    else False) for x, y, hit in self.malimau]\r\n        self.score += 10 * len(list(filter(lambda limau: limau[2], self.malimau)))\r\n        while len(self.malimau) < 1:\r\n            self.malimau.append((150, randint(0, 120), False))\r\n        self.cherries = [(x, y, True if abs(x - self.player_x) < 14 \\\r\n                                   and abs(y - self.player_y) < 14 else False) \\\r\n                        for x, y, hit in self.cherries]\r\n        self.score += 7 * len(list(filter(lambda cherry: cherry[2], self.cherries)))\r\n        self.cherries = list(filter(lambda cherry: not cherry[2], self.cherries))\r\n        self.cherries = [(x, y, True if self.is_fruit_hit_by_kombora(x, y) \\\r\n                                    else False) for x, y, hit in self.cherries]\r\n        self.score -= 20 * len(list(filter(lambda cherry: cherry[2], self.cherries)))\r\n        while len(self.cherries) < 1:\r\n            self.cherries.append((0, randint(0, 120), False))\r\n        if self.score < 0:\r\n            self.game_over = True\r\n\r\n    def update_player(self):\r\n        if pyxel.btn(pyxel.KEY_W) or pyxel.btn(pyxel.KEY_UP):\r\n            self.player_y -= 2\r\n\r\n        if pyxel.btn(pyxel.KEY_A) or pyxel.btn(pyxel.KEY_LEFT):\r\n            self.player_x -= 2\r\n\r\n        if pyxel.btn(pyxel.KEY_S) or pyxel.btn(pyxel.KEY_DOWN):\r\n            self.player_y += 2\r\n\r\n        if pyxel.btn(pyxel.KEY_D) or pyxel.btn(pyxel.KEY_RIGHT):\r\n            self.player_x += 2\r\n\r\n        if pyxel.btnp(pyxel.KEY_SPACE):\r\n            self.makombora.append((self.player_x+8, \\\r\n                    self.player_y+8, self.player_xdir))\r\n\r\n        if pyxel.btnp(pyxel.KEY_F):\r\n            self.player_xdir *= -1\r\n\r\n    def draw(self):\r\n    \t# clear screen, paint sky blue\r\n        pyxel.cls(12)\r\n\r\n        # draw horizon + mountain + forest\r\n        pyxel.blt(0, 0, 0, 0, 120, 160, 120)\r\n\r\n        # draw clouds\r\n        offset = (pyxel.frame_count / 4) % 160\r\n        for i in range(2):\r\n          for x, y in self.clouds:\r\n            pyxel.blt(x + (i * 160) - offset, y, 0, 0, 32, 56, 8)\r\n\r\n        # draw malimau\r\n        for x, y, hit in self.malimau:\r\n            pyxel.blt(x, y, 0, 48, 0, 16, 16, 12)\r\n        self.malimau = [(x - 1, y, hit) if x > -16 and not hit \\\r\n                else (150, randint(0, 120), False) for x, y, hit in self.malimau]\r\n\r\n        # draw cherries\r\n        for x, y, hit in self.cherries:\r\n            pyxel.blt(x, y, 0, 32, 0, 16, 16, 12)\r\n        self.cherries = [(x + 1, y, hit) if x < 160 + 16 and not hit \\\r\n                else (0, randint(0, 120), False) for x, y, hit in self.cherries]\r\n\r\n        # draw girl\r\n        pyxel.blt(self.player_x, self.player_y, 0, 0, 0,\r\n                16*self.player_xdir, 16, 12)\r\n\r\n        # draw makombora\r\n        for x, y, _ in self.makombora:\r\n            pyxel.pix(x, y, 8)\r\n        self.makombora = [(x+1*direction, y, direction) \\\r\n                for x, y, direction in self.makombora if x < 160 and x > 0]\r\n\r\n        # draw score\r\n        pyxel.text(5, 4, f"SCORE: {self.score}", 1)\r\n        pyxel.text(4, 4, f"SCORE: {self.score}", 7)\r\n\r\n        # draw level\r\n        pyxel.text(121, 4, f"LEVEL: {self.level}", 1)\r\n        pyxel.text(120, 4, f"LEVEL: {self.level}", 7)\r\n\r\n        # draw end of game\r\n        if self.game_over:\r\n            pyxel.text(60, 50, f"UMESHINDWA!", pyxel.frame_count % 16)\r\nApp()	As the score increases and decreases, we should increase and decrease the level of the game. Create a new function called <code>update_level(self)</code> and call this from your <code>update(self)</code> function. Inside your new function, write this line:\r\n<br/><br/>\r\n<center><code>self.level = ________________________</code></center>\r\n<br/>\r\nFill in the blank with a formula that increases/decreases the level by 1 every time the player increases/decreases their score by 20. So, a score between 0 and 19 is level 1. A score between 20 and 39 is level 2. A score between 40 and 59 is level 3. And so on.	# Note: PD_STATIC_IMAGES_PATH varies based on address\r\n# of server and thus is prepended to this value in views.py\r\nimport os, requests\r\nBASE_DIR = os.path.dirname(os.path.abspath(__file__))\r\nfiles_to_load = ['sprites2.png']\r\nfor fname in files_to_load:\r\n  fpath = os.path.join(BASE_DIR, fname)\r\n  if not os.path.exists(fpath):\r\n    with open(fpath, 'wb') as f:\r\n      f.write(requests.get(PD_STATIC_IMAGES_PATH+fname).content)
52	Improve Makombora Appearance	49	### IMPORTANT: Preamble required on server; omitted here. ####\r\n\r\nimport pyxel\r\nfrom random import randint\r\n\r\nclass App:\r\n    def __init__(self):\r\n        pyxel.init(160, 120, caption='Mchezo')\r\n\r\n        # SOLN: Changed to sprites3\r\n        pyxel.image(0).load(0, 0, 'sprites3.png')\r\n\r\n        self.clouds = [(10, 10), (60, 20), (120, 5)]\r\n        self.player_x = 70\r\n        self.player_y = 50\r\n        self.score = 0\r\n        self.makombora = []\r\n        self.player_xdir = 1\r\n        self.malimau = [(150, randint(0, 120), False)]\r\n        self.cherries = [(0, randint(0, 120), False)]\r\n        self.game_over = False\r\n        self.level = 1\r\n        pyxel.run(self.update, self.draw)\r\n\r\n    def update(self):\r\n        if pyxel.btnp(pyxel.KEY_ESCAPE):\r\n            pyxel.quit()\r\n        if self.game_over:\r\n            return\r\n        self.update_player()\r\n        self.update_score()\r\n        self.update_level()\r\n\r\n    def is_fruit_hit_by_kombora(self, fruit_x, fruit_y):\r\n        len_before_filter = len(self.makombora)\r\n        self.makombora = list(filter(lambda kom: \\\r\n                not (kom[0] >= fruit_x and kom[0] <= fruit_x + 16 \\\r\n                    and kom[1] >= fruit_y and kom[1] <= fruit_y + 16),\\\r\n                        self.makombora))\r\n        return len_before_filter != len(self.makombora)\r\n\r\n    def update_level(self):\r\n        self.level = (self.score // 20) + 1\r\n\r\n    def update_score(self):\r\n        self.malimau = [(x, y, True if abs(x - self.player_x) < 14 \\\r\n                                   and abs(y - self.player_y) < 14 else False) \\\r\n                        for x, y, hit in self.malimau]\r\n        self.score -= 5 * len(list(filter(lambda limau: limau[2], self.malimau)))\r\n        self.malimau = list(filter(lambda limau: not limau[2], self.malimau))\r\n        self.malimau = [(x, y, True if self.is_fruit_hit_by_kombora(x, y) \\\r\n                                    else False) for x, y, hit in self.malimau]\r\n        self.score += 10 * len(list(filter(lambda limau: limau[2], self.malimau)))\r\n        while len(self.malimau) < self.level:\r\n            self.malimau.append((150, randint(0, 120), False))\r\n        self.cherries = [(x, y, True if abs(x - self.player_x) < 14 \\\r\n                                   and abs(y - self.player_y) < 14 else False) \\\r\n                        for x, y, hit in self.cherries]\r\n        self.score += 7 * len(list(filter(lambda cherry: cherry[2], self.cherries)))\r\n        self.cherries = list(filter(lambda cherry: not cherry[2], self.cherries))\r\n        self.cherries = [(x, y, True if self.is_fruit_hit_by_kombora(x, y) \\\r\n                                    else False) for x, y, hit in self.cherries]\r\n        self.score -= 20 * len(list(filter(lambda cherry: cherry[2], self.cherries)))\r\n        while len(self.cherries) < 1:\r\n            self.cherries.append((0, randint(0, 120), False))\r\n        if self.score < 0:\r\n            self.game_over = True\r\n\r\n    def update_player(self):\r\n        if pyxel.btn(pyxel.KEY_W) or pyxel.btn(pyxel.KEY_UP):\r\n            self.player_y -= 2\r\n\r\n        if pyxel.btn(pyxel.KEY_A) or pyxel.btn(pyxel.KEY_LEFT):\r\n            self.player_x -= 2\r\n\r\n        if pyxel.btn(pyxel.KEY_S) or pyxel.btn(pyxel.KEY_DOWN):\r\n            self.player_y += 2\r\n\r\n        if pyxel.btn(pyxel.KEY_D) or pyxel.btn(pyxel.KEY_RIGHT):\r\n            self.player_x += 2\r\n\r\n        if pyxel.btnp(pyxel.KEY_SPACE):\r\n            self.makombora.append((self.player_x+8, \\\r\n                    self.player_y+8, self.player_xdir))\r\n\r\n        if pyxel.btnp(pyxel.KEY_F):\r\n            self.player_xdir *= -1\r\n\r\n    def draw(self):\r\n    \t# clear screen, paint sky blue\r\n        pyxel.cls(12)\r\n\r\n        # draw horizon + mountain + forest\r\n        pyxel.blt(0, 0, 0, 0, 120, 160, 120)\r\n\r\n        # draw clouds\r\n        offset = (pyxel.frame_count / 4) % 160\r\n        for i in range(2):\r\n          for x, y in self.clouds:\r\n            pyxel.blt(x + (i * 160) - offset, y, 0, 0, 32, 56, 8)\r\n\r\n        # draw malimau\r\n        for x, y, hit in self.malimau:\r\n            pyxel.blt(x, y, 0, 48, 0, 16, 16, 12)\r\n        self.malimau = [(x - 1, y, hit) if x > -16 and not hit \\\r\n                else (150, randint(0, 120), False) for x, y, hit in self.malimau]\r\n\r\n        # draw cherries\r\n        for x, y, hit in self.cherries:\r\n            pyxel.blt(x, y, 0, 32, 0, 16, 16, 12)\r\n        self.cherries = [(x + 1, y, hit) if x < 160 + 16 and not hit \\\r\n                else (0, randint(0, 120), False) for x, y, hit in self.cherries]\r\n\r\n        # draw girl\r\n        pyxel.blt(self.player_x, self.player_y, 0, 0, 0,\r\n                16*self.player_xdir, 16, 12)\r\n\r\n        # draw makombora\r\n        for x, y, _ in self.makombora:\r\n            # SOLN: Replaced pix call with this\r\n            pyxel.blt(x, y, 0, 81, 0, 26, 7, 12)\r\n        self.makombora = [(x+1*direction, y, direction) \\\r\n                for x, y, direction in self.makombora if x < 160 and x > 0]\r\n\r\n        # draw score\r\n        pyxel.text(5, 4, f"SCORE: {self.score}", 1)\r\n        pyxel.text(4, 4, f"SCORE: {self.score}", 7)\r\n\r\n        # draw level\r\n        pyxel.text(121, 4, f"LEVEL: {self.level}", 1)\r\n        pyxel.text(120, 4, f"LEVEL: {self.level}", 7)\r\n\r\n        # draw end of game\r\n        if self.game_over:\r\n            pyxel.text(60, 50, f"UMESHINDWA!", pyxel.frame_count % 16)\r\nApp()	Right now, our makombora are just small red dots. Let's use an actual image of a kombora.\r\n<br/><br/>\r\nIn your <code>__init__(self)</code> function, load <code>sprites3.png</code> instead of <code>sprites2.png</code>. Then, in your <code>draw(self)</code> function, find the code that draws makombora. Instead of drawing a pixel, draw the new kombora image. It's in image 0, sx 81, sy 0, is 26 pixels wide, 7 pixels high, and has a transparent color of 12.	# Note: PD_STATIC_IMAGES_PATH varies based on address\r\n# of server and thus is prepended to this value in views.py\r\nimport os, requests\r\nBASE_DIR = os.path.dirname(os.path.abspath(__file__))\r\nfiles_to_load = ['sprites3.png']\r\nfor fname in files_to_load:\r\n  fpath = os.path.join(BASE_DIR, fname)\r\n  if not os.path.exists(fpath):\r\n    with open(fpath, 'wb') as f:\r\n      f.write(requests.get(PD_STATIC_IMAGES_PATH+fname).content)
50	Increase Malimau in Each Level	47	### IMPORTANT: Preamble required on server; omitted here. ####\r\n\r\nimport pyxel\r\nfrom random import randint\r\n\r\nclass App:\r\n    def __init__(self):\r\n        pyxel.init(160, 120, caption='Mchezo')\r\n\r\n        pyxel.image(0).load(0, 0, 'sprites2.png')\r\n\r\n        self.clouds = [(10, 10), (60, 20), (120, 5)]\r\n        self.player_x = 70\r\n        self.player_y = 50\r\n        self.score = 0\r\n        self.makombora = []\r\n        self.player_xdir = 1\r\n        self.malimau = [(150, randint(0, 120), False)]\r\n        self.cherries = [(0, randint(0, 120), False)]\r\n        self.game_over = False\r\n        self.level = 1\r\n        pyxel.run(self.update, self.draw)\r\n\r\n    def update(self):\r\n        if pyxel.btnp(pyxel.KEY_ESCAPE):\r\n            pyxel.quit()\r\n        if self.game_over:\r\n            return\r\n        self.update_player()\r\n        self.update_score()\r\n        self.update_level()\r\n\r\n    def is_fruit_hit_by_kombora(self, fruit_x, fruit_y):\r\n        for kom_x, kom_y, _ in self.makombora:\r\n            if kom_x >= fruit_x and kom_x <= fruit_x + 16 \\\r\n                    and kom_y >= fruit_y and kom_y <= fruit_y + 16:\r\n                return True\r\n        return False\r\n\r\n    def update_level(self):\r\n        self.level = (self.score // 20) + 1\r\n\r\n    def update_score(self):\r\n        self.malimau = [(x, y, True if abs(x - self.player_x) < 14 \\\r\n                                   and abs(y - self.player_y) < 14 else False) \\\r\n                        for x, y, hit in self.malimau]\r\n        self.score -= 5 * len(list(filter(lambda limau: limau[2], self.malimau)))\r\n        self.malimau = list(filter(lambda limau: not limau[2], self.malimau))\r\n        self.malimau = [(x, y, True if self.is_fruit_hit_by_kombora(x, y) \\\r\n                                    else False) for x, y, hit in self.malimau]\r\n        self.score += 10 * len(list(filter(lambda limau: limau[2], self.malimau)))\r\n        # SOLN: Changed this while condition\r\n        while len(self.malimau) < self.level:\r\n            self.malimau.append((150, randint(0, 120), False))\r\n        self.cherries = [(x, y, True if abs(x - self.player_x) < 14 \\\r\n                                   and abs(y - self.player_y) < 14 else False) \\\r\n                        for x, y, hit in self.cherries]\r\n        self.score += 7 * len(list(filter(lambda cherry: cherry[2], self.cherries)))\r\n        self.cherries = list(filter(lambda cherry: not cherry[2], self.cherries))\r\n        self.cherries = [(x, y, True if self.is_fruit_hit_by_kombora(x, y) \\\r\n                                    else False) for x, y, hit in self.cherries]\r\n        self.score -= 20 * len(list(filter(lambda cherry: cherry[2], self.cherries)))\r\n        while len(self.cherries) < 1:\r\n            self.cherries.append((0, randint(0, 120), False))\r\n        if self.score < 0:\r\n            self.game_over = True\r\n\r\n    def update_player(self):\r\n        if pyxel.btn(pyxel.KEY_W) or pyxel.btn(pyxel.KEY_UP):\r\n            self.player_y -= 2\r\n\r\n        if pyxel.btn(pyxel.KEY_A) or pyxel.btn(pyxel.KEY_LEFT):\r\n            self.player_x -= 2\r\n\r\n        if pyxel.btn(pyxel.KEY_S) or pyxel.btn(pyxel.KEY_DOWN):\r\n            self.player_y += 2\r\n\r\n        if pyxel.btn(pyxel.KEY_D) or pyxel.btn(pyxel.KEY_RIGHT):\r\n            self.player_x += 2\r\n\r\n        if pyxel.btnp(pyxel.KEY_SPACE):\r\n            self.makombora.append((self.player_x+8, \\\r\n                    self.player_y+8, self.player_xdir))\r\n\r\n        if pyxel.btnp(pyxel.KEY_F):\r\n            self.player_xdir *= -1\r\n\r\n    def draw(self):\r\n    \t# clear screen, paint sky blue\r\n        pyxel.cls(12)\r\n\r\n        # draw horizon + mountain + forest\r\n        pyxel.blt(0, 0, 0, 0, 120, 160, 120)\r\n\r\n        # draw clouds\r\n        offset = (pyxel.frame_count / 4) % 160\r\n        for i in range(2):\r\n          for x, y in self.clouds:\r\n            pyxel.blt(x + (i * 160) - offset, y, 0, 0, 32, 56, 8)\r\n\r\n        # draw malimau\r\n        for x, y, hit in self.malimau:\r\n            pyxel.blt(x, y, 0, 48, 0, 16, 16, 12)\r\n        self.malimau = [(x - 1, y, hit) if x > -16 and not hit \\\r\n                else (150, randint(0, 120), False) for x, y, hit in self.malimau]\r\n\r\n        # draw cherries\r\n        for x, y, hit in self.cherries:\r\n            pyxel.blt(x, y, 0, 32, 0, 16, 16, 12)\r\n        self.cherries = [(x + 1, y, hit) if x < 160 + 16 and not hit \\\r\n                else (0, randint(0, 120), False) for x, y, hit in self.cherries]\r\n\r\n        # draw girl\r\n        pyxel.blt(self.player_x, self.player_y, 0, 0, 0,\r\n                16*self.player_xdir, 16, 12)\r\n\r\n        # draw makombora\r\n        for x, y, _ in self.makombora:\r\n            pyxel.pix(x, y, 8)\r\n        self.makombora = [(x+1*direction, y, direction) \\\r\n                for x, y, direction in self.makombora if x < 160 and x > 0]\r\n\r\n        # draw score\r\n        pyxel.text(5, 4, f"SCORE: {self.score}", 1)\r\n        pyxel.text(4, 4, f"SCORE: {self.score}", 7)\r\n\r\n        # draw level\r\n        pyxel.text(121, 4, f"LEVEL: {self.level}", 1)\r\n        pyxel.text(120, 4, f"LEVEL: {self.level}", 7)\r\n\r\n        # draw end of game\r\n        if self.game_over:\r\n            pyxel.text(60, 50, f"UMESHINDWA!", pyxel.frame_count % 16)\r\nApp()	The number of malimau should increase as the level increases, and decrease as the level decreases. In your <code>update_score(self)</code> function, there is a <code>while</code> loop that controls how many malimau are on the screen. Make <b>a single change</b> to this loop so that the number of malimau on the screen is equal to the level the player is on.	# Note: PD_STATIC_IMAGES_PATH varies based on address\r\n# of server and thus is prepended to this value in views.py\r\nimport os, requests\r\nBASE_DIR = os.path.dirname(os.path.abspath(__file__))\r\nfiles_to_load = ['sprites2.png']\r\nfor fname in files_to_load:\r\n  fpath = os.path.join(BASE_DIR, fname)\r\n  if not os.path.exists(fpath):\r\n    with open(fpath, 'wb') as f:\r\n      f.write(requests.get(PD_STATIC_IMAGES_PATH+fname).content)
53	Fix Problem with Makombora Flying Left	50	### IMPORTANT: Preamble required on server; omitted here. ####\r\n\r\nimport pyxel\r\nfrom random import randint\r\n\r\nclass App:\r\n    def __init__(self):\r\n        pyxel.init(160, 120, caption='Mchezo')\r\n\r\n        pyxel.image(0).load(0, 0, 'sprites3.png')\r\n\r\n        self.clouds = [(10, 10), (60, 20), (120, 5)]\r\n        self.player_x = 70\r\n        self.player_y = 50\r\n        self.score = 0\r\n        self.makombora = []\r\n        self.player_xdir = 1\r\n        self.malimau = [(150, randint(0, 120), False)]\r\n        self.cherries = [(0, randint(0, 120), False)]\r\n        self.game_over = False\r\n        self.level = 1\r\n        pyxel.run(self.update, self.draw)\r\n\r\n    def update(self):\r\n        if pyxel.btnp(pyxel.KEY_ESCAPE):\r\n            pyxel.quit()\r\n        if self.game_over:\r\n            return\r\n        self.update_player()\r\n        self.update_score()\r\n        self.update_level()\r\n\r\n    def is_fruit_hit_by_kombora(self, fruit_x, fruit_y):\r\n        len_before_filter = len(self.makombora)\r\n        self.makombora = list(filter(lambda kom: \\\r\n                not (kom[0] >= fruit_x and kom[0] <= fruit_x + 16 \\\r\n                    and kom[1] >= fruit_y and kom[1] <= fruit_y + 16),\\\r\n                        self.makombora))\r\n        return len_before_filter != len(self.makombora)\r\n\r\n    def update_level(self):\r\n        self.level = (self.score // 20) + 1\r\n\r\n    def update_score(self):\r\n        self.malimau = [(x, y, True if abs(x - self.player_x) < 14 \\\r\n                                   and abs(y - self.player_y) < 14 else False) \\\r\n                        for x, y, hit in self.malimau]\r\n        self.score -= 5 * len(list(filter(lambda limau: limau[2], self.malimau)))\r\n        self.malimau = list(filter(lambda limau: not limau[2], self.malimau))\r\n        self.malimau = [(x, y, True if self.is_fruit_hit_by_kombora(x, y) \\\r\n                                    else False) for x, y, hit in self.malimau]\r\n        self.score += 10 * len(list(filter(lambda limau: limau[2], self.malimau)))\r\n        while len(self.malimau) < self.level:\r\n            self.malimau.append((150, randint(0, 120), False))\r\n        self.cherries = [(x, y, True if abs(x - self.player_x) < 14 \\\r\n                                   and abs(y - self.player_y) < 14 else False) \\\r\n                        for x, y, hit in self.cherries]\r\n        self.score += 7 * len(list(filter(lambda cherry: cherry[2], self.cherries)))\r\n        self.cherries = list(filter(lambda cherry: not cherry[2], self.cherries))\r\n        self.cherries = [(x, y, True if self.is_fruit_hit_by_kombora(x, y) \\\r\n                                    else False) for x, y, hit in self.cherries]\r\n        self.score -= 20 * len(list(filter(lambda cherry: cherry[2], self.cherries)))\r\n        while len(self.cherries) < 1:\r\n            self.cherries.append((0, randint(0, 120), False))\r\n        if self.score < 0:\r\n            self.game_over = True\r\n\r\n    def update_player(self):\r\n        if pyxel.btn(pyxel.KEY_W) or pyxel.btn(pyxel.KEY_UP):\r\n            self.player_y -= 2\r\n\r\n        if pyxel.btn(pyxel.KEY_A) or pyxel.btn(pyxel.KEY_LEFT):\r\n            self.player_x -= 2\r\n\r\n        if pyxel.btn(pyxel.KEY_S) or pyxel.btn(pyxel.KEY_DOWN):\r\n            self.player_y += 2\r\n\r\n        if pyxel.btn(pyxel.KEY_D) or pyxel.btn(pyxel.KEY_RIGHT):\r\n            self.player_x += 2\r\n\r\n        if pyxel.btnp(pyxel.KEY_SPACE):\r\n            self.makombora.append((self.player_x+8, \\\r\n                    self.player_y+8, self.player_xdir))\r\n\r\n        if pyxel.btnp(pyxel.KEY_F):\r\n            self.player_xdir *= -1\r\n\r\n    def draw(self):\r\n    \t# clear screen, paint sky blue\r\n        pyxel.cls(12)\r\n\r\n        # draw horizon + mountain + forest\r\n        pyxel.blt(0, 0, 0, 0, 120, 160, 120)\r\n\r\n        # draw clouds\r\n        offset = (pyxel.frame_count / 4) % 160\r\n        for i in range(2):\r\n          for x, y in self.clouds:\r\n            pyxel.blt(x + (i * 160) - offset, y, 0, 0, 32, 56, 8)\r\n\r\n        # draw malimau\r\n        for x, y, hit in self.malimau:\r\n            pyxel.blt(x, y, 0, 48, 0, 16, 16, 12)\r\n        self.malimau = [(x - 1, y, hit) if x > -16 and not hit \\\r\n                else (150, randint(0, 120), False) for x, y, hit in self.malimau]\r\n\r\n        # draw cherries\r\n        for x, y, hit in self.cherries:\r\n            pyxel.blt(x, y, 0, 32, 0, 16, 16, 12)\r\n        self.cherries = [(x + 1, y, hit) if x < 160 + 16 and not hit \\\r\n                else (0, randint(0, 120), False) for x, y, hit in self.cherries]\r\n\r\n        # draw girl\r\n        pyxel.blt(self.player_x, self.player_y, 0, 0, 0,\r\n                16*self.player_xdir, 16, 12)\r\n\r\n        # draw makombora\r\n        # SOLN: Multiplying by direction\r\n        for x, y, direction in self.makombora:\r\n            pyxel.blt(x, y, 0, 81, 0, 26*direction, 7, 12)\r\n        self.makombora = [(x+1*direction, y, direction) \\\r\n                for x, y, direction in self.makombora if x < 160 and x > 0]\r\n\r\n        # draw score\r\n        pyxel.text(5, 4, f"SCORE: {self.score}", 1)\r\n        pyxel.text(4, 4, f"SCORE: {self.score}", 7)\r\n\r\n        # draw level\r\n        pyxel.text(121, 4, f"LEVEL: {self.level}", 1)\r\n        pyxel.text(120, 4, f"LEVEL: {self.level}", 7)\r\n\r\n        # draw end of game\r\n        if self.game_over:\r\n            pyxel.text(60, 50, f"UMESHINDWA!", pyxel.frame_count % 16)\r\nApp()	Now that we are using actual makombora, we need to fix the issue where makombora flying left are not actually facing left.\r\n<br/><br/>\r\nFind your code that draws makombora. Remember that the third part of each kombora is its direction. Make a change so that each kombora is drawn to face the direction in which it is flying.	# Note: PD_STATIC_IMAGES_PATH varies based on address\r\n# of server and thus is prepended to this value in views.py\r\nimport os, requests\r\nBASE_DIR = os.path.dirname(os.path.abspath(__file__))\r\nfiles_to_load = ['sprites3.png']\r\nfor fname in files_to_load:\r\n  fpath = os.path.join(BASE_DIR, fname)\r\n  if not os.path.exists(fpath):\r\n    with open(fpath, 'wb') as f:\r\n      f.write(requests.get(PD_STATIC_IMAGES_PATH+fname).content)
54	Fix Problem with Detecting Makombora Collisions	51	### IMPORTANT: Preamble required on server; omitted here. ####\r\n\r\nimport pyxel\r\nfrom random import randint\r\n\r\nclass App:\r\n    def __init__(self):\r\n        pyxel.init(160, 120, caption='Mchezo')\r\n\r\n        pyxel.image(0).load(0, 0, 'sprites3.png')\r\n\r\n        self.clouds = [(10, 10), (60, 20), (120, 5)]\r\n        self.player_x = 70\r\n        self.player_y = 50\r\n        self.score = 0\r\n        self.makombora = []\r\n        self.player_xdir = 1\r\n        self.malimau = [(150, randint(0, 120), False)]\r\n        self.cherries = [(0, randint(0, 120), False)]\r\n        self.game_over = False\r\n        self.level = 1\r\n        pyxel.run(self.update, self.draw)\r\n\r\n    def update(self):\r\n        if pyxel.btnp(pyxel.KEY_ESCAPE):\r\n            pyxel.quit()\r\n        if self.game_over:\r\n            return\r\n        self.update_player()\r\n        self.update_score()\r\n        self.update_level()\r\n\r\n    def is_fruit_hit_by_kombora(self, fruit_x, fruit_y):\r\n        len_before_filter = len(self.makombora)\r\n        # SOLN: Changed lambda\r\n        self.makombora = list(filter(lambda kom: \\\r\n                max(0, min(kom[0] + 26, fruit_x + 16) - max(kom[0], fruit_x)) * \\\r\n                max(0, min(kom[1] + 7, fruit_y + 16) - max(kom[1], fruit_y)) == 0,\r\n                self.makombora))\r\n        return len_before_filter != len(self.makombora)\r\n\r\n    def update_level(self):\r\n        self.level = (self.score // 20) + 1\r\n\r\n    def update_score(self):\r\n        self.malimau = [(x, y, True if abs(x - self.player_x) < 14 \\\r\n                                   and abs(y - self.player_y) < 14 else False) \\\r\n                        for x, y, hit in self.malimau]\r\n        self.score -= 5 * len(list(filter(lambda limau: limau[2], self.malimau)))\r\n        self.malimau = list(filter(lambda limau: not limau[2], self.malimau))\r\n        self.malimau = [(x, y, True if self.is_fruit_hit_by_kombora(x, y) \\\r\n                                    else False) for x, y, hit in self.malimau]\r\n        self.score += 10 * len(list(filter(lambda limau: limau[2], self.malimau)))\r\n        while len(self.malimau) < self.level:\r\n            self.malimau.append((150, randint(0, 120), False))\r\n        self.cherries = [(x, y, True if abs(x - self.player_x) < 14 \\\r\n                                   and abs(y - self.player_y) < 14 else False) \\\r\n                        for x, y, hit in self.cherries]\r\n        self.score += 7 * len(list(filter(lambda cherry: cherry[2], self.cherries)))\r\n        self.cherries = list(filter(lambda cherry: not cherry[2], self.cherries))\r\n        self.cherries = [(x, y, True if self.is_fruit_hit_by_kombora(x, y) \\\r\n                                    else False) for x, y, hit in self.cherries]\r\n        self.score -= 20 * len(list(filter(lambda cherry: cherry[2], self.cherries)))\r\n        while len(self.cherries) < 1:\r\n            self.cherries.append((0, randint(0, 120), False))\r\n        if self.score < 0:\r\n            self.game_over = True\r\n\r\n    def update_player(self):\r\n        if pyxel.btn(pyxel.KEY_W) or pyxel.btn(pyxel.KEY_UP):\r\n            self.player_y -= 2\r\n\r\n        if pyxel.btn(pyxel.KEY_A) or pyxel.btn(pyxel.KEY_LEFT):\r\n            self.player_x -= 2\r\n\r\n        if pyxel.btn(pyxel.KEY_S) or pyxel.btn(pyxel.KEY_DOWN):\r\n            self.player_y += 2\r\n\r\n        if pyxel.btn(pyxel.KEY_D) or pyxel.btn(pyxel.KEY_RIGHT):\r\n            self.player_x += 2\r\n\r\n        if pyxel.btnp(pyxel.KEY_SPACE):\r\n            self.makombora.append((self.player_x+8, \\\r\n                    self.player_y+8, self.player_xdir))\r\n\r\n        if pyxel.btnp(pyxel.KEY_F):\r\n            self.player_xdir *= -1\r\n\r\n    def draw(self):\r\n    \t# clear screen, paint sky blue\r\n        pyxel.cls(12)\r\n\r\n        # draw horizon + mountain + forest\r\n        pyxel.blt(0, 0, 0, 0, 120, 160, 120)\r\n\r\n        # draw clouds\r\n        offset = (pyxel.frame_count / 4) % 160\r\n        for i in range(2):\r\n          for x, y in self.clouds:\r\n            pyxel.blt(x + (i * 160) - offset, y, 0, 0, 32, 56, 8)\r\n\r\n        # draw malimau\r\n        for x, y, hit in self.malimau:\r\n            pyxel.blt(x, y, 0, 48, 0, 16, 16, 12)\r\n        self.malimau = [(x - 1, y, hit) if x > -16 and not hit \\\r\n                else (150, randint(0, 120), False) for x, y, hit in self.malimau]\r\n\r\n        # draw cherries\r\n        for x, y, hit in self.cherries:\r\n            pyxel.blt(x, y, 0, 32, 0, 16, 16, 12)\r\n        self.cherries = [(x + 1, y, hit) if x < 160 + 16 and not hit \\\r\n                else (0, randint(0, 120), False) for x, y, hit in self.cherries]\r\n\r\n        # draw girl\r\n        pyxel.blt(self.player_x, self.player_y, 0, 0, 0,\r\n                16*self.player_xdir, 16, 12)\r\n\r\n        # draw makombora\r\n        for x, y, direction in self.makombora:\r\n            pyxel.blt(x, y, 0, 81, 0, 26*direction, 7, 12)\r\n        self.makombora = [(x+1*direction, y, direction) \\\r\n                for x, y, direction in self.makombora if x < 160 and x > 0]\r\n\r\n        # draw score\r\n        pyxel.text(5, 4, f"SCORE: {self.score}", 1)\r\n        pyxel.text(4, 4, f"SCORE: {self.score}", 7)\r\n\r\n        # draw level\r\n        pyxel.text(121, 4, f"LEVEL: {self.level}", 1)\r\n        pyxel.text(120, 4, f"LEVEL: {self.level}", 7)\r\n\r\n        # draw end of game\r\n        if self.game_over:\r\n            pyxel.text(60, 50, f"UMESHINDWA!", pyxel.frame_count % 16)\r\nApp()	Now that our makombora are much larger, we need to fix the code we are using to detect when a kombora hits a fruit. In your <code>is_fruit_hit_by_kombora(self, fruit_x, fruit_y)</code> function, change the lambda inside the filter to this:\r\n<br/><br/>\r\n<center><code>lambda kom: max(0, min(kom[0] + 26, fruit_x + 16) - max(kom[0], fruit_x)) * max(0, min(kom[1] + 7, fruit_y + 16) - max(kom[1], fruit_y)) == 0</code></center>	# Note: PD_STATIC_IMAGES_PATH varies based on address\r\n# of server and thus is prepended to this value in views.py\r\nimport os, requests\r\nBASE_DIR = os.path.dirname(os.path.abspath(__file__))\r\nfiles_to_load = ['sprites3.png']\r\nfor fname in files_to_load:\r\n  fpath = os.path.join(BASE_DIR, fname)\r\n  if not os.path.exists(fpath):\r\n    with open(fpath, 'wb') as f:\r\n      f.write(requests.get(PD_STATIC_IMAGES_PATH+fname).content)
55	Increase Speed of Makombora	52	### IMPORTANT: Preamble required on server; omitted here. ####\r\n\r\nimport pyxel\r\nfrom random import randint\r\n\r\nclass App:\r\n    def __init__(self):\r\n        pyxel.init(160, 120, caption='Mchezo')\r\n\r\n        pyxel.image(0).load(0, 0, 'sprites3.png')\r\n\r\n        self.clouds = [(10, 10), (60, 20), (120, 5)]\r\n        self.player_x = 70\r\n        self.player_y = 50\r\n        self.score = 0\r\n        self.makombora = []\r\n        self.player_xdir = 1\r\n        self.malimau = [(150, randint(0, 120), False)]\r\n        self.cherries = [(0, randint(0, 120), False)]\r\n        self.game_over = False\r\n        self.level = 1\r\n        pyxel.run(self.update, self.draw)\r\n\r\n    def update(self):\r\n        if pyxel.btnp(pyxel.KEY_ESCAPE):\r\n            pyxel.quit()\r\n        if self.game_over:\r\n            return\r\n        self.update_player()\r\n        self.update_score()\r\n        self.update_level()\r\n\r\n    def is_fruit_hit_by_kombora(self, fruit_x, fruit_y):\r\n        len_before_filter = len(self.makombora)\r\n        self.makombora = list(filter(lambda kom: \\\r\n                max(0, min(kom[0] + 26, fruit_x + 16) - max(kom[0], fruit_x)) * \\\r\n                max(0, min(kom[1] + 7, fruit_y + 16) - max(kom[1], fruit_y)) == 0,\r\n                self.makombora))\r\n        return len_before_filter != len(self.makombora)\r\n\r\n    def update_level(self):\r\n        self.level = (self.score // 20) + 1\r\n\r\n    def update_score(self):\r\n        self.malimau = [(x, y, True if abs(x - self.player_x) < 14 \\\r\n                                   and abs(y - self.player_y) < 14 else False) \\\r\n                        for x, y, hit in self.malimau]\r\n        self.score -= 5 * len(list(filter(lambda limau: limau[2], self.malimau)))\r\n        self.malimau = list(filter(lambda limau: not limau[2], self.malimau))\r\n        self.malimau = [(x, y, True if self.is_fruit_hit_by_kombora(x, y) \\\r\n                                    else False) for x, y, hit in self.malimau]\r\n        self.score += 10 * len(list(filter(lambda limau: limau[2], self.malimau)))\r\n        while len(self.malimau) < self.level:\r\n            self.malimau.append((150, randint(0, 120), False))\r\n        self.cherries = [(x, y, True if abs(x - self.player_x) < 14 \\\r\n                                   and abs(y - self.player_y) < 14 else False) \\\r\n                        for x, y, hit in self.cherries]\r\n        self.score += 7 * len(list(filter(lambda cherry: cherry[2], self.cherries)))\r\n        self.cherries = list(filter(lambda cherry: not cherry[2], self.cherries))\r\n        self.cherries = [(x, y, True if self.is_fruit_hit_by_kombora(x, y) \\\r\n                                    else False) for x, y, hit in self.cherries]\r\n        self.score -= 20 * len(list(filter(lambda cherry: cherry[2], self.cherries)))\r\n        while len(self.cherries) < 1:\r\n            self.cherries.append((0, randint(0, 120), False))\r\n        if self.score < 0:\r\n            self.game_over = True\r\n\r\n    def update_player(self):\r\n        if pyxel.btn(pyxel.KEY_W) or pyxel.btn(pyxel.KEY_UP):\r\n            self.player_y -= 2\r\n\r\n        if pyxel.btn(pyxel.KEY_A) or pyxel.btn(pyxel.KEY_LEFT):\r\n            self.player_x -= 2\r\n\r\n        if pyxel.btn(pyxel.KEY_S) or pyxel.btn(pyxel.KEY_DOWN):\r\n            self.player_y += 2\r\n\r\n        if pyxel.btn(pyxel.KEY_D) or pyxel.btn(pyxel.KEY_RIGHT):\r\n            self.player_x += 2\r\n\r\n        if pyxel.btnp(pyxel.KEY_SPACE):\r\n            self.makombora.append((self.player_x+8, \\\r\n                    self.player_y+8, self.player_xdir))\r\n\r\n        if pyxel.btnp(pyxel.KEY_F):\r\n            self.player_xdir *= -1\r\n\r\n    def draw(self):\r\n    \t# clear screen, paint sky blue\r\n        pyxel.cls(12)\r\n\r\n        # draw horizon + mountain + forest\r\n        pyxel.blt(0, 0, 0, 0, 120, 160, 120)\r\n\r\n        # draw clouds\r\n        offset = (pyxel.frame_count / 4) % 160\r\n        for i in range(2):\r\n          for x, y in self.clouds:\r\n            pyxel.blt(x + (i * 160) - offset, y, 0, 0, 32, 56, 8)\r\n\r\n        # draw malimau\r\n        for x, y, hit in self.malimau:\r\n            pyxel.blt(x, y, 0, 48, 0, 16, 16, 12)\r\n        self.malimau = [(x - 1, y, hit) if x > -16 and not hit \\\r\n                else (150, randint(0, 120), False) for x, y, hit in self.malimau]\r\n\r\n        # draw cherries\r\n        for x, y, hit in self.cherries:\r\n            pyxel.blt(x, y, 0, 32, 0, 16, 16, 12)\r\n        self.cherries = [(x + 1, y, hit) if x < 160 + 16 and not hit \\\r\n                else (0, randint(0, 120), False) for x, y, hit in self.cherries]\r\n\r\n        # draw girl\r\n        pyxel.blt(self.player_x, self.player_y, 0, 0, 0,\r\n                16*self.player_xdir, 16, 12)\r\n\r\n        # draw makombora\r\n        for x, y, direction in self.makombora:\r\n            pyxel.blt(x, y, 0, 81, 0, 26*direction, 7, 12)\r\n        # SOLN: Changed speed using min\r\n        self.makombora = [(x+min(self.level, 3)*direction, y, direction) \\\r\n                for x, y, direction in self.makombora if x < 160 and x > 0]\r\n\r\n        # draw score\r\n        pyxel.text(5, 4, f"SCORE: {self.score}", 1)\r\n        pyxel.text(4, 4, f"SCORE: {self.score}", 7)\r\n\r\n        # draw level\r\n        pyxel.text(121, 4, f"LEVEL: {self.level}", 1)\r\n        pyxel.text(120, 4, f"LEVEL: {self.level}", 7)\r\n\r\n        # draw end of game\r\n        if self.game_over:\r\n            pyxel.text(60, 50, f"UMESHINDWA!", pyxel.frame_count % 16)\r\nApp()	As the levels increase, let's make makombora fly up to 3x faster. In your <code>draw(self)</code> function, find the line that moves the makombora. Currently it moves each kombora 1 pixel at a time. <b>Replace the number 1 with this:</b>\r\n<br/><br/>\r\n<center><code>min(_____, _____)</code></center>\r\n<br/>\r\nFill in the blanks so that we pick whichever is less: either the level, or the number 3. In other words, if the level is less than 3, we'll use the level for the speed; if the level is higher than 3, we'll use 3.	# Note: PD_STATIC_IMAGES_PATH varies based on address\r\n# of server and thus is prepended to this value in views.py\r\nimport os, requests\r\nBASE_DIR = os.path.dirname(os.path.abspath(__file__))\r\nfiles_to_load = ['sprites3.png']\r\nfor fname in files_to_load:\r\n  fpath = os.path.join(BASE_DIR, fname)\r\n  if not os.path.exists(fpath):\r\n    with open(fpath, 'wb') as f:\r\n      f.write(requests.get(PD_STATIC_IMAGES_PATH+fname).content)
56	Increase Speed of Malimau	53	### IMPORTANT: Preamble required on server; omitted here. ####\r\n\r\nimport pyxel\r\nfrom random import randint\r\n\r\nclass App:\r\n    def __init__(self):\r\n        pyxel.init(160, 120, caption='Mchezo')\r\n\r\n        pyxel.image(0).load(0, 0, 'sprites3.png')\r\n\r\n        self.clouds = [(10, 10), (60, 20), (120, 5)]\r\n        self.player_x = 70\r\n        self.player_y = 50\r\n        self.score = 0\r\n        self.makombora = []\r\n        self.player_xdir = 1\r\n        self.malimau = [(150, randint(0, 120), False)]\r\n        self.cherries = [(0, randint(0, 120), False)]\r\n        self.game_over = False\r\n        self.level = 1\r\n        pyxel.run(self.update, self.draw)\r\n\r\n    def update(self):\r\n        if pyxel.btnp(pyxel.KEY_ESCAPE):\r\n            pyxel.quit()\r\n        if self.game_over:\r\n            return\r\n        self.update_player()\r\n        self.update_score()\r\n        self.update_level()\r\n\r\n    def is_fruit_hit_by_kombora(self, fruit_x, fruit_y):\r\n        len_before_filter = len(self.makombora)\r\n        self.makombora = list(filter(lambda kom: \\\r\n                max(0, min(kom[0] + 26, fruit_x + 16) - max(kom[0], fruit_x)) * \\\r\n                max(0, min(kom[1] + 7, fruit_y + 16) - max(kom[1], fruit_y)) == 0,\r\n                self.makombora))\r\n        return len_before_filter != len(self.makombora)\r\n\r\n    def update_level(self):\r\n        self.level = (self.score // 20) + 1\r\n\r\n    def update_score(self):\r\n        self.malimau = [(x, y, True if abs(x - self.player_x) < 14 \\\r\n                                   and abs(y - self.player_y) < 14 else False) \\\r\n                        for x, y, hit in self.malimau]\r\n        self.score -= 5 * len(list(filter(lambda limau: limau[2], self.malimau)))\r\n        self.malimau = list(filter(lambda limau: not limau[2], self.malimau))\r\n        self.malimau = [(x, y, True if self.is_fruit_hit_by_kombora(x, y) \\\r\n                                    else False) for x, y, hit in self.malimau]\r\n        self.score += 10 * len(list(filter(lambda limau: limau[2], self.malimau)))\r\n        while len(self.malimau) < self.level:\r\n            self.malimau.append((150, randint(0, 120), False))\r\n        self.cherries = [(x, y, True if abs(x - self.player_x) < 14 \\\r\n                                   and abs(y - self.player_y) < 14 else False) \\\r\n                        for x, y, hit in self.cherries]\r\n        self.score += 7 * len(list(filter(lambda cherry: cherry[2], self.cherries)))\r\n        self.cherries = list(filter(lambda cherry: not cherry[2], self.cherries))\r\n        self.cherries = [(x, y, True if self.is_fruit_hit_by_kombora(x, y) \\\r\n                                    else False) for x, y, hit in self.cherries]\r\n        self.score -= 20 * len(list(filter(lambda cherry: cherry[2], self.cherries)))\r\n        while len(self.cherries) < 1:\r\n            self.cherries.append((0, randint(0, 120), False))\r\n        if self.score < 0:\r\n            self.game_over = True\r\n\r\n    def update_player(self):\r\n        if pyxel.btn(pyxel.KEY_W) or pyxel.btn(pyxel.KEY_UP):\r\n            self.player_y -= 2\r\n\r\n        if pyxel.btn(pyxel.KEY_A) or pyxel.btn(pyxel.KEY_LEFT):\r\n            self.player_x -= 2\r\n\r\n        if pyxel.btn(pyxel.KEY_S) or pyxel.btn(pyxel.KEY_DOWN):\r\n            self.player_y += 2\r\n\r\n        if pyxel.btn(pyxel.KEY_D) or pyxel.btn(pyxel.KEY_RIGHT):\r\n            self.player_x += 2\r\n\r\n        if pyxel.btnp(pyxel.KEY_SPACE):\r\n            self.makombora.append((self.player_x+8, \\\r\n                    self.player_y+8, self.player_xdir))\r\n\r\n        if pyxel.btnp(pyxel.KEY_F):\r\n            self.player_xdir *= -1\r\n\r\n    def draw(self):\r\n    \t# clear screen, paint sky blue\r\n        pyxel.cls(12)\r\n\r\n        # draw horizon + mountain + forest\r\n        pyxel.blt(0, 0, 0, 0, 120, 160, 120)\r\n\r\n        # draw clouds\r\n        offset = (pyxel.frame_count / 4) % 160\r\n        for i in range(2):\r\n          for x, y in self.clouds:\r\n            pyxel.blt(x + (i * 160) - offset, y, 0, 0, 32, 56, 8)\r\n\r\n        # draw malimau\r\n        for x, y, hit in self.malimau:\r\n            pyxel.blt(x, y, 0, 48, 0, 16, 16, 12)\r\n        # SOLN: Using min for speed\r\n        self.malimau = [(x - min(self.level, 2), y, hit) if x > -16 and not hit \\\r\n                else (150, randint(0, 120), False) for x, y, hit in self.malimau]\r\n\r\n        # draw cherries\r\n        for x, y, hit in self.cherries:\r\n            pyxel.blt(x, y, 0, 32, 0, 16, 16, 12)\r\n        self.cherries = [(x + 1, y, hit) if x < 160 + 16 and not hit \\\r\n                else (0, randint(0, 120), False) for x, y, hit in self.cherries]\r\n\r\n        # draw girl\r\n        pyxel.blt(self.player_x, self.player_y, 0, 0, 0,\r\n                16*self.player_xdir, 16, 12)\r\n\r\n        # draw makombora\r\n        for x, y, direction in self.makombora:\r\n            pyxel.blt(x, y, 0, 81, 0, 26*direction, 7, 12)\r\n        self.makombora = [(x+min(self.level, 3)*direction, y, direction) \\\r\n                for x, y, direction in self.makombora if x < 160 and x > 0]\r\n\r\n        # draw score\r\n        pyxel.text(5, 4, f"SCORE: {self.score}", 1)\r\n        pyxel.text(4, 4, f"SCORE: {self.score}", 7)\r\n\r\n        # draw level\r\n        pyxel.text(121, 4, f"LEVEL: {self.level}", 1)\r\n        pyxel.text(120, 4, f"LEVEL: {self.level}", 7)\r\n\r\n        # draw end of game\r\n        if self.game_over:\r\n            pyxel.text(60, 50, f"UMESHINDWA!", pyxel.frame_count % 16)\r\nApp()	As the levels increase, let's make malimau fly up to 2x faster. In your <code>draw(self)</code> function, find the line that moves the malimau. Currently it moves each limau 1 pixel at a time. <b>Replace the number 1 with this:</b>\r\n<br/><br/>\r\n<center><code>min(_____, _____)</code></center>\r\n<br/>\r\nFill in the blanks so that we pick whichever is less: either the level, or the number 2. In other words, if the level is less than 2, we'll use the level for the speed; if the level is higher than 2, we'll use 2.	# Note: PD_STATIC_IMAGES_PATH varies based on address\r\n# of server and thus is prepended to this value in views.py\r\nimport os, requests\r\nBASE_DIR = os.path.dirname(os.path.abspath(__file__))\r\nfiles_to_load = ['sprites3.png']\r\nfor fname in files_to_load:\r\n  fpath = os.path.join(BASE_DIR, fname)\r\n  if not os.path.exists(fpath):\r\n    with open(fpath, 'wb') as f:\r\n      f.write(requests.get(PD_STATIC_IMAGES_PATH+fname).content)
57	Oscillating Makombora	54	### IMPORTANT: Preamble required on server; omitted here. ####\r\n\r\nimport pyxel\r\nfrom random import randint\r\n\r\nclass App:\r\n    def __init__(self):\r\n        pyxel.init(160, 120, caption='Mchezo')\r\n\r\n        pyxel.image(0).load(0, 0, 'sprites3.png')\r\n\r\n        self.clouds = [(10, 10), (60, 20), (120, 5)]\r\n        self.player_x = 70\r\n        self.player_y = 50\r\n        self.score = 0\r\n        self.makombora = []\r\n        self.player_xdir = 1\r\n        self.malimau = [(150, randint(0, 120), False)]\r\n        self.cherries = [(0, randint(0, 120), False)]\r\n        self.game_over = False\r\n        self.level = 1\r\n        pyxel.run(self.update, self.draw)\r\n\r\n    def update(self):\r\n        if pyxel.btnp(pyxel.KEY_ESCAPE):\r\n            pyxel.quit()\r\n        if self.game_over:\r\n            return\r\n        self.update_player()\r\n        self.update_score()\r\n        self.update_level()\r\n\r\n    def is_fruit_hit_by_kombora(self, fruit_x, fruit_y):\r\n        len_before_filter = len(self.makombora)\r\n        self.makombora = list(filter(lambda kom: \\\r\n                max(0, min(kom[0] + 26, fruit_x + 16) - max(kom[0], fruit_x)) * \\\r\n                max(0, min(kom[1] + 7, fruit_y + 16) - max(kom[1], fruit_y)) == 0,\r\n                self.makombora))\r\n        return len_before_filter != len(self.makombora)\r\n\r\n    def update_level(self):\r\n        self.level = (self.score // 20) + 1\r\n\r\n    def update_score(self):\r\n        self.malimau = [(x, y, True if abs(x - self.player_x) < 14 \\\r\n                                   and abs(y - self.player_y) < 14 else False) \\\r\n                        for x, y, hit in self.malimau]\r\n        self.score -= 5 * len(list(filter(lambda limau: limau[2], self.malimau)))\r\n        self.malimau = list(filter(lambda limau: not limau[2], self.malimau))\r\n        self.malimau = [(x, y, True if self.is_fruit_hit_by_kombora(x, y) \\\r\n                                    else False) for x, y, hit in self.malimau]\r\n        self.score += 10 * len(list(filter(lambda limau: limau[2], self.malimau)))\r\n        while len(self.malimau) < self.level:\r\n            self.malimau.append((150, randint(0, 120), False))\r\n        self.cherries = [(x, y, True if abs(x - self.player_x) < 14 \\\r\n                                   and abs(y - self.player_y) < 14 else False) \\\r\n                        for x, y, hit in self.cherries]\r\n        self.score += 7 * len(list(filter(lambda cherry: cherry[2], self.cherries)))\r\n        self.cherries = list(filter(lambda cherry: not cherry[2], self.cherries))\r\n        self.cherries = [(x, y, True if self.is_fruit_hit_by_kombora(x, y) \\\r\n                                    else False) for x, y, hit in self.cherries]\r\n        self.score -= 20 * len(list(filter(lambda cherry: cherry[2], self.cherries)))\r\n        while len(self.cherries) < 1:\r\n            self.cherries.append((0, randint(0, 120), False))\r\n        if self.score < 0:\r\n            self.game_over = True\r\n\r\n    def update_player(self):\r\n        if pyxel.btn(pyxel.KEY_W) or pyxel.btn(pyxel.KEY_UP):\r\n            self.player_y -= 2\r\n\r\n        if pyxel.btn(pyxel.KEY_A) or pyxel.btn(pyxel.KEY_LEFT):\r\n            self.player_x -= 2\r\n\r\n        if pyxel.btn(pyxel.KEY_S) or pyxel.btn(pyxel.KEY_DOWN):\r\n            self.player_y += 2\r\n\r\n        if pyxel.btn(pyxel.KEY_D) or pyxel.btn(pyxel.KEY_RIGHT):\r\n            self.player_x += 2\r\n\r\n        if pyxel.btnp(pyxel.KEY_SPACE):\r\n            self.makombora.append((self.player_x+8, \\\r\n                    self.player_y+8, self.player_xdir))\r\n\r\n        if pyxel.btnp(pyxel.KEY_F):\r\n            self.player_xdir *= -1\r\n\r\n    def draw(self):\r\n    \t# clear screen, paint sky blue\r\n        pyxel.cls(12)\r\n\r\n        # draw horizon + mountain + forest\r\n        pyxel.blt(0, 0, 0, 0, 120, 160, 120)\r\n\r\n        # draw clouds\r\n        offset = (pyxel.frame_count / 4) % 160\r\n        for i in range(2):\r\n          for x, y in self.clouds:\r\n            pyxel.blt(x + (i * 160) - offset, y, 0, 0, 32, 56, 8)\r\n\r\n        # draw malimau\r\n        for x, y, hit in self.malimau:\r\n            pyxel.blt(x, y, 0, 48, 0, 16, 16, 12)\r\n        self.malimau = [(x - min(self.level, 2), y, hit) if x > -16 and not hit \\\r\n                else (150, randint(0, 120), False) for x, y, hit in self.malimau]\r\n\r\n        # draw cherries\r\n        for x, y, hit in self.cherries:\r\n            pyxel.blt(x, y, 0, 32, 0, 16, 16, 12)\r\n        self.cherries = [(x + 1, y, hit) if x < 160 + 16 and not hit \\\r\n                else (0, randint(0, 120), False) for x, y, hit in self.cherries]\r\n\r\n        # draw girl\r\n        pyxel.blt(self.player_x, self.player_y, 0, 0, 0,\r\n                16*self.player_xdir, 16, 12)\r\n\r\n        # draw makombora\r\n        for x, y, direction in self.makombora:\r\n            pyxel.blt(x, y, 0, 81, 0, 26*direction, 7, 12)\r\n        # SOLN: Added randint call to y\r\n        self.makombora = [(x+min(self.level, 3)*direction, y + randint(-2, 2), direction) \\\r\n                for x, y, direction in self.makombora if x < 160 and x > 0]\r\n\r\n        # draw score\r\n        pyxel.text(5, 4, f"SCORE: {self.score}", 1)\r\n        pyxel.text(4, 4, f"SCORE: {self.score}", 7)\r\n\r\n        # draw level\r\n        pyxel.text(121, 4, f"LEVEL: {self.level}", 1)\r\n        pyxel.text(120, 4, f"LEVEL: {self.level}", 7)\r\n\r\n        # draw end of game\r\n        if self.game_over:\r\n            pyxel.text(60, 50, f"UMESHINDWA!", pyxel.frame_count % 16)\r\nApp()	Makombora don't always travel in a straight line. Find the line that moves your makombora in your <code>draw(self)</code> function. Notice that right now, the Y value never changes. Use the <code>randint</code> function to randomly add between -2 to 2 pixels to each kombora's Y value.	# Note: PD_STATIC_IMAGES_PATH varies based on address\r\n# of server and thus is prepended to this value in views.py\r\nimport os, requests\r\nBASE_DIR = os.path.dirname(os.path.abspath(__file__))\r\nfiles_to_load = ['sprites3.png']\r\nfor fname in files_to_load:\r\n  fpath = os.path.join(BASE_DIR, fname)\r\n  if not os.path.exists(fpath):\r\n    with open(fpath, 'wb') as f:\r\n      f.write(requests.get(PD_STATIC_IMAGES_PATH+fname).content)
58	Going Down a Level Loses the Game	55	### IMPORTANT: Preamble required on server; omitted here. ####\r\n\r\nimport pyxel\r\nfrom random import randint\r\n\r\nclass App:\r\n    def __init__(self):\r\n        pyxel.init(160, 120, caption='Mchezo')\r\n\r\n        pyxel.image(0).load(0, 0, 'sprites3.png')\r\n\r\n        self.clouds = [(10, 10), (60, 20), (120, 5)]\r\n        self.player_x = 70\r\n        self.player_y = 50\r\n        self.score = 0\r\n        self.makombora = []\r\n        self.player_xdir = 1\r\n        self.malimau = [(150, randint(0, 120), False)]\r\n        self.cherries = [(0, randint(0, 120), False)]\r\n        self.game_over = False\r\n        self.level = 1\r\n        pyxel.run(self.update, self.draw)\r\n\r\n    def update(self):\r\n        if pyxel.btnp(pyxel.KEY_ESCAPE):\r\n            pyxel.quit()\r\n        if self.game_over:\r\n            return\r\n        self.update_player()\r\n        self.update_score()\r\n        self.update_level()\r\n\r\n    def is_fruit_hit_by_kombora(self, fruit_x, fruit_y):\r\n        len_before_filter = len(self.makombora)\r\n        self.makombora = list(filter(lambda kom: \\\r\n                max(0, min(kom[0] + 26, fruit_x + 16) - max(kom[0], fruit_x)) * \\\r\n                max(0, min(kom[1] + 7, fruit_y + 16) - max(kom[1], fruit_y)) == 0,\r\n                self.makombora))\r\n        return len_before_filter != len(self.makombora)\r\n\r\n    def update_level(self):\r\n        # SOLN: Added this line\r\n        previous_level = self.level\r\n        self.level = (self.score // 20) + 1\r\n        # SOLN: Added tihs line\r\n        if self.level < previous_level:\r\n            self.game_over = True\r\n\r\n    def update_score(self):\r\n        self.malimau = [(x, y, True if abs(x - self.player_x) < 14 \\\r\n                                   and abs(y - self.player_y) < 14 else False) \\\r\n                        for x, y, hit in self.malimau]\r\n        self.score -= 5 * len(list(filter(lambda limau: limau[2], self.malimau)))\r\n        self.malimau = list(filter(lambda limau: not limau[2], self.malimau))\r\n        self.malimau = [(x, y, True if self.is_fruit_hit_by_kombora(x, y) \\\r\n                                    else False) for x, y, hit in self.malimau]\r\n        self.score += 10 * len(list(filter(lambda limau: limau[2], self.malimau)))\r\n        while len(self.malimau) < self.level:\r\n            self.malimau.append((150, randint(0, 120), False))\r\n        self.cherries = [(x, y, True if abs(x - self.player_x) < 14 \\\r\n                                   and abs(y - self.player_y) < 14 else False) \\\r\n                        for x, y, hit in self.cherries]\r\n        self.score += 7 * len(list(filter(lambda cherry: cherry[2], self.cherries)))\r\n        self.cherries = list(filter(lambda cherry: not cherry[2], self.cherries))\r\n        self.cherries = [(x, y, True if self.is_fruit_hit_by_kombora(x, y) \\\r\n                                    else False) for x, y, hit in self.cherries]\r\n        self.score -= 20 * len(list(filter(lambda cherry: cherry[2], self.cherries)))\r\n        while len(self.cherries) < 1:\r\n            self.cherries.append((0, randint(0, 120), False))\r\n        if self.score < 0:\r\n            self.game_over = True\r\n\r\n    def update_player(self):\r\n        if pyxel.btn(pyxel.KEY_W) or pyxel.btn(pyxel.KEY_UP):\r\n            self.player_y -= 2\r\n\r\n        if pyxel.btn(pyxel.KEY_A) or pyxel.btn(pyxel.KEY_LEFT):\r\n            self.player_x -= 2\r\n\r\n        if pyxel.btn(pyxel.KEY_S) or pyxel.btn(pyxel.KEY_DOWN):\r\n            self.player_y += 2\r\n\r\n        if pyxel.btn(pyxel.KEY_D) or pyxel.btn(pyxel.KEY_RIGHT):\r\n            self.player_x += 2\r\n\r\n        if pyxel.btnp(pyxel.KEY_SPACE):\r\n            self.makombora.append((self.player_x+8, \\\r\n                    self.player_y+8, self.player_xdir))\r\n\r\n        if pyxel.btnp(pyxel.KEY_F):\r\n            self.player_xdir *= -1\r\n\r\n    def draw(self):\r\n    \t# clear screen, paint sky blue\r\n        pyxel.cls(12)\r\n\r\n        # draw horizon + mountain + forest\r\n        pyxel.blt(0, 0, 0, 0, 120, 160, 120)\r\n\r\n        # draw clouds\r\n        offset = (pyxel.frame_count / 4) % 160\r\n        for i in range(2):\r\n          for x, y in self.clouds:\r\n            pyxel.blt(x + (i * 160) - offset, y, 0, 0, 32, 56, 8)\r\n\r\n        # draw malimau\r\n        for x, y, hit in self.malimau:\r\n            pyxel.blt(x, y, 0, 48, 0, 16, 16, 12)\r\n        self.malimau = [(x - min(self.level, 2), y, hit) if x > -16 and not hit \\\r\n                else (150, randint(0, 120), False) for x, y, hit in self.malimau]\r\n\r\n        # draw cherries\r\n        for x, y, hit in self.cherries:\r\n            pyxel.blt(x, y, 0, 32, 0, 16, 16, 12)\r\n        self.cherries = [(x + 1, y, hit) if x < 160 + 16 and not hit \\\r\n                else (0, randint(0, 120), False) for x, y, hit in self.cherries]\r\n\r\n        # draw girl\r\n        pyxel.blt(self.player_x, self.player_y, 0, 0, 0,\r\n                16*self.player_xdir, 16, 12)\r\n\r\n        # draw makombora\r\n        for x, y, direction in self.makombora:\r\n            pyxel.blt(x, y, 0, 81, 0, 26*direction, 7, 12)\r\n        self.makombora = [(x+min(self.level, 3)*direction, y + randint(-2, 2), direction) \\\r\n                for x, y, direction in self.makombora if x < 160 and x > 0]\r\n\r\n        # draw score\r\n        pyxel.text(5, 4, f"SCORE: {self.score}", 1)\r\n        pyxel.text(4, 4, f"SCORE: {self.score}", 7)\r\n\r\n        # draw level\r\n        pyxel.text(121, 4, f"LEVEL: {self.level}", 1)\r\n        pyxel.text(120, 4, f"LEVEL: {self.level}", 7)\r\n\r\n        # draw end of game\r\n        if self.game_over:\r\n            pyxel.text(60, 50, f"UMESHINDWA!", pyxel.frame_count % 16)\r\nApp()	If the player loses too many points, he/she will go down a level. If this happens, the player should lose the game.\r\n<br/><br/>\r\nIn your <code>update_level(self)</code> function, add code that compares the previous level with the new level. If the new level is <b>less than</b> the previous level, you should make the game be over.	# Note: PD_STATIC_IMAGES_PATH varies based on address\r\n# of server and thus is prepended to this value in views.py\r\nimport os, requests\r\nBASE_DIR = os.path.dirname(os.path.abspath(__file__))\r\nfiles_to_load = ['sprites3.png']\r\nfor fname in files_to_load:\r\n  fpath = os.path.join(BASE_DIR, fname)\r\n  if not os.path.exists(fpath):\r\n    with open(fpath, 'wb') as f:\r\n      f.write(requests.get(PD_STATIC_IMAGES_PATH+fname).content)
