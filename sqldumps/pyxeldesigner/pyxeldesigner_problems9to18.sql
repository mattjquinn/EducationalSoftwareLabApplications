10	Enable Up Direction	10	### IMPORTANT: Preamble required on server; omitted here. ####\r\n\r\nimport pyxel\r\n\r\nclass App:\r\n    def __init__(self):\r\n        pyxel.init(160, 120, caption='Mchezo')\r\n\r\n        pyxel.image(0).load(0, 0, 'sprites1.png')\r\n\r\n        self.clouds = [(10, 10), (60, 20), (120, 5)]\r\n        self.player_x = 70\r\n        self.player_y = 50\r\n\r\n        pyxel.run(self.update, self.draw)\r\n\r\n    def update(self):\r\n        if pyxel.btnp(pyxel.KEY_Q):\r\n            pyxel.quit()\r\n\r\n        # SOLN: Added this function call\r\n        self.update_player()\r\n\r\n    # SOLN: Added this function + body\r\n    def update_player(self):\r\n        if pyxel.btnp(pyxel.KEY_W) or pyxel.btnp(pyxel.KEY_UP):\r\n            self.player_y -= 2\r\n\r\n    def draw(self):\r\n        pyxel.cls(12)\r\n\r\n        offset = (pyxel.frame_count / 4) % 160\r\n        for i in range(2):\r\n          for x, y in self.clouds:\r\n            pyxel.blt(x + (i * 160) - offset, y, 0, 0, 32, 56, 8)\r\n\r\n        pyxel.blt(self.player_x, self.player_y, 0, 0, 0, 16, 16)\r\nApp()	Now let's enable the girl to move up. First define a new function named <code>update_player(self)</code>. Then, in your <code>update(self)</code> function, call your new function. We do this because we will write a lot of code to update the player, and it's better to keep this code separate than to mix it in with other unrelated code.\r\n<br/><br/>\r\nNow, in your new <code>update_player(self)</code> function, write an <code>if</code> statement that moves the girl up 2 pixels every time the player pushes the <b>W key</b> or <b>Up arrow key</b>.	# Note: PD_STATIC_IMAGES_PATH varies based on address\r\n# of server and thus is prepended to this value in views.py\r\nimport os, requests\r\nBASE_DIR = os.path.dirname(os.path.abspath(__file__))\r\nfiles_to_load = ['sprites1.png']\r\nfor fname in files_to_load:\r\n  fpath = os.path.join(BASE_DIR, fname)\r\n  if not os.path.exists(fpath):\r\n    with open(fpath, 'wb') as f:\r\n      f.write(requests.get(PD_STATIC_IMAGES_PATH+fname).content)
11	Enable Left Direction	11	### IMPORTANT: Preamble required on server; omitted here. ####\r\n\r\nimport pyxel\r\n\r\nclass App:\r\n    def __init__(self):\r\n        pyxel.init(160, 120, caption='Mchezo')\r\n\r\n        pyxel.image(0).load(0, 0, 'sprites1.png')\r\n\r\n        self.clouds = [(10, 10), (60, 20), (120, 5)]\r\n        self.player_x = 70\r\n        self.player_y = 50\r\n\r\n        pyxel.run(self.update, self.draw)\r\n\r\n    def update(self):\r\n        if pyxel.btnp(pyxel.KEY_Q):\r\n            pyxel.quit()\r\n\r\n        self.update_player()\r\n\r\n    def update_player(self):\r\n        if pyxel.btnp(pyxel.KEY_W) or pyxel.btnp(pyxel.KEY_UP):\r\n            self.player_y -= 2\r\n\r\n        # SOLN: Added this if stmt\r\n        if pyxel.btnp(pyxel.KEY_A) or pyxel.btnp(pyxel.KEY_LEFT):\r\n            self.player_x -= 2\r\n\r\n    def draw(self):\r\n        pyxel.cls(12)\r\n\r\n        offset = (pyxel.frame_count / 4) % 160\r\n        for i in range(2):\r\n          for x, y in self.clouds:\r\n            pyxel.blt(x + (i * 160) - offset, y, 0, 0, 32, 56, 8)\r\n\r\n        pyxel.blt(self.player_x, self.player_y, 0, 0, 0, 16, 16)\r\nApp()	Now add an <code>if</code> statement that moves the girl 2 pixels to the left every time the player pushes the <b>A key</b> or <b>Left arrow key</b>.	# Note: PD_STATIC_IMAGES_PATH varies based on address\r\n# of server and thus is prepended to this value in views.py\r\nimport os, requests\r\nBASE_DIR = os.path.dirname(os.path.abspath(__file__))\r\nfiles_to_load = ['sprites1.png']\r\nfor fname in files_to_load:\r\n  fpath = os.path.join(BASE_DIR, fname)\r\n  if not os.path.exists(fpath):\r\n    with open(fpath, 'wb') as f:\r\n      f.write(requests.get(PD_STATIC_IMAGES_PATH+fname).content)
15	Transparency for Girl's Background	15	### IMPORTANT: Preamble required on server; omitted here. ####\r\n\r\nimport pyxel\r\n\r\nclass App:\r\n    def __init__(self):\r\n        pyxel.init(160, 120, caption='Mchezo')\r\n\r\n        pyxel.image(0).load(0, 0, 'sprites1.png')\r\n\r\n        self.clouds = [(10, 10), (60, 20), (120, 5)]\r\n        self.player_x = 70\r\n        self.player_y = 50\r\n\r\n        pyxel.run(self.update, self.draw)\r\n\r\n    def update(self):\r\n        if pyxel.btnp(pyxel.KEY_ESCAPE):\r\n            pyxel.quit()\r\n\r\n        self.update_player()\r\n\r\n    def update_player(self):\r\n        if pyxel.btnp(pyxel.KEY_W) or pyxel.btnp(pyxel.KEY_UP):\r\n            self.player_y -= 2\r\n\r\n        if pyxel.btnp(pyxel.KEY_A) or pyxel.btnp(pyxel.KEY_LEFT):\r\n            self.player_x -= 2\r\n\r\n        if pyxel.btnp(pyxel.KEY_S) or pyxel.btnp(pyxel.KEY_DOWN):\r\n            self.player_y += 2\r\n\r\n        if pyxel.btnp(pyxel.KEY_D) or pyxel.btnp(pyxel.KEY_RIGHT):\r\n            self.player_x += 2\r\n\r\n    def draw(self):\r\n        pyxel.cls(12)\r\n\r\n        offset = (pyxel.frame_count / 4) % 160\r\n        for i in range(2):\r\n          for x, y in self.clouds:\r\n            pyxel.blt(x + (i * 160) - offset, y, 0, 0, 32, 56, 8)\r\n\r\n        # SOLN: Added final argument 12 to this line:\r\n        pyxel.blt(self.player_x, self.player_y, 0, 0, 0, 16, 16, 12)\r\nApp()	As you move the girl around the screen, you may notice a problem. When you move her on top of a cloud, you can't see the cloud behind her. This doesn't look good.\r\n<br/><br/>\r\nFind your call to the <code>pyxel.blt(...)</code> function which is placing the girl on the screen. Add an argument to this call that makes the blue color around the girl transparent. Look at the Pyxel documentation for the <b>blt</b> function if you need a hint.	# Note: PD_STATIC_IMAGES_PATH varies based on address\r\n# of server and thus is prepended to this value in views.py\r\nimport os, requests\r\nBASE_DIR = os.path.dirname(os.path.abspath(__file__))\r\nfiles_to_load = ['sprites1.png']\r\nfor fname in files_to_load:\r\n  fpath = os.path.join(BASE_DIR, fname)\r\n  if not os.path.exists(fpath):\r\n    with open(fpath, 'wb') as f:\r\n      f.write(requests.get(PD_STATIC_IMAGES_PATH+fname).content)
9	Make Variables for The Player's X and Y Coords	9	### IMPORTANT: Preamble required on server; omitted here. ####\r\n\r\nimport pyxel\r\n\r\nclass App:\r\n    def __init__(self):\r\n        pyxel.init(160, 120, caption='Mchezo')\r\n\r\n        pyxel.image(0).load(0, 0, 'sprites1.png')\r\n\r\n        self.clouds = [(10, 10), (60, 20), (120, 5)]\r\n        # SOLN: Added these two lines:\r\n        self.player_x = 70\r\n        self.player_y = 50\r\n\r\n        pyxel.run(self.update, self.draw)\r\n\r\n    def update(self):\r\n        if pyxel.btnp(pyxel.KEY_Q):\r\n            pyxel.quit()\r\n\r\n    def draw(self):\r\n        pyxel.cls(12)\r\n\r\n        offset = (pyxel.frame_count / 4) % 160\r\n        for i in range(2):\r\n          for x, y in self.clouds:\r\n            pyxel.blt(x + (i * 160) - offset, y, 0, 0, 32, 56, 8)\r\n\r\n        # SOLN: Changed this line to use _x and _y vars\r\n        pyxel.blt(self.player_x, self.player_y, 0, 0, 0, 16, 16)\r\nApp()	In the last challenge, you placed the player at (70, 50). If the player always stayed at (70, 50), the game would be boring. We want the player to be able to move around.\r\n<br/><br/>\r\nIn your <code>__init__(self)</code> function, add two variables <b>after</b> your list of clouds: <code>self.player_x</code> and <code>self.player_y</code>. Like before, use 70 for X and 50 for Y.\r\n<br/><br/>\r\nFinally, remove <code>70</code> and <code>50</code> from the <code>pyxel.blt(...)</code> call that draws the girl. Use the two variables you just created instead.	# Note: PD_STATIC_IMAGES_PATH varies based on address\r\n# of server and thus is prepended to this value in views.py\r\nimport os, requests\r\nBASE_DIR = os.path.dirname(os.path.abspath(__file__))\r\nfiles_to_load = ['sprites1.png']\r\nfor fname in files_to_load:\r\n  fpath = os.path.join(BASE_DIR, fname)\r\n  if not os.path.exists(fpath):\r\n    with open(fpath, 'wb') as f:\r\n      f.write(requests.get(PD_STATIC_IMAGES_PATH+fname).content)
12	Enable Down Direction	12	### IMPORTANT: Preamble required on server; omitted here. ####\r\n\r\nimport pyxel\r\n\r\nclass App:\r\n    def __init__(self):\r\n        pyxel.init(160, 120, caption='Mchezo')\r\n\r\n        pyxel.image(0).load(0, 0, 'sprites1.png')\r\n\r\n        self.clouds = [(10, 10), (60, 20), (120, 5)]\r\n        self.player_x = 70\r\n        self.player_y = 50\r\n\r\n        pyxel.run(self.update, self.draw)\r\n\r\n    def update(self):\r\n        if pyxel.btnp(pyxel.KEY_Q):\r\n            pyxel.quit()\r\n\r\n        self.update_player()\r\n\r\n    def update_player(self):\r\n        if pyxel.btnp(pyxel.KEY_W) or pyxel.btnp(pyxel.KEY_UP):\r\n            self.player_y -= 2\r\n\r\n        if pyxel.btnp(pyxel.KEY_A) or pyxel.btnp(pyxel.KEY_LEFT):\r\n            self.player_x -= 2\r\n\r\n        # SOLN: Added this if stmt\r\n        if pyxel.btnp(pyxel.KEY_S) or pyxel.btnp(pyxel.KEY_DOWN):\r\n            self.player_y += 2\r\n\r\n    def draw(self):\r\n        pyxel.cls(12)\r\n\r\n        offset = (pyxel.frame_count / 4) % 160\r\n        for i in range(2):\r\n          for x, y in self.clouds:\r\n            pyxel.blt(x + (i * 160) - offset, y, 0, 0, 32, 56, 8)\r\n\r\n        pyxel.blt(self.player_x, self.player_y, 0, 0, 0, 16, 16)\r\nApp()	Now move the girl 2 pixels down every time the player pushes the <b>S key</b> or <b>Down arrow key</b>.	# Note: PD_STATIC_IMAGES_PATH varies based on address\r\n# of server and thus is prepended to this value in views.py\r\nimport os, requests\r\nBASE_DIR = os.path.dirname(os.path.abspath(__file__))\r\nfiles_to_load = ['sprites1.png']\r\nfor fname in files_to_load:\r\n  fpath = os.path.join(BASE_DIR, fname)\r\n  if not os.path.exists(fpath):\r\n    with open(fpath, 'wb') as f:\r\n      f.write(requests.get(PD_STATIC_IMAGES_PATH+fname).content)
13	Enable Right Direction	13	### IMPORTANT: Preamble required on server; omitted here. ####\r\n\r\nimport pyxel\r\n\r\nclass App:\r\n    def __init__(self):\r\n        pyxel.init(160, 120, caption='Mchezo')\r\n\r\n        pyxel.image(0).load(0, 0, 'sprites1.png')\r\n\r\n        self.clouds = [(10, 10), (60, 20), (120, 5)]\r\n        self.player_x = 70\r\n        self.player_y = 50\r\n\r\n        pyxel.run(self.update, self.draw)\r\n\r\n    def update(self):\r\n        if pyxel.btnp(pyxel.KEY_Q):\r\n            pyxel.quit()\r\n\r\n        self.update_player()\r\n\r\n    def update_player(self):\r\n        if pyxel.btnp(pyxel.KEY_W) or pyxel.btnp(pyxel.KEY_UP):\r\n            self.player_y -= 2\r\n\r\n        if pyxel.btnp(pyxel.KEY_A) or pyxel.btnp(pyxel.KEY_LEFT):\r\n            self.player_x -= 2\r\n\r\n        if pyxel.btnp(pyxel.KEY_S) or pyxel.btnp(pyxel.KEY_DOWN):\r\n            self.player_y += 2\r\n\r\n        # SOLN: Added this if stmt\r\n        if pyxel.btnp(pyxel.KEY_D) or pyxel.btnp(pyxel.KEY_RIGHT):\r\n            self.player_x += 2\r\n\r\n    def draw(self):\r\n        pyxel.cls(12)\r\n\r\n        offset = (pyxel.frame_count / 4) % 160\r\n        for i in range(2):\r\n          for x, y in self.clouds:\r\n            pyxel.blt(x + (i * 160) - offset, y, 0, 0, 32, 56, 8)\r\n\r\n        pyxel.blt(self.player_x, self.player_y, 0, 0, 0, 16, 16)\r\nApp()	Now move the girl 2 pixels to the right every time the player pushes the <b>D key</b> or <b>Right arrow key</b>.	# Note: PD_STATIC_IMAGES_PATH varies based on address\r\n# of server and thus is prepended to this value in views.py\r\nimport os, requests\r\nBASE_DIR = os.path.dirname(os.path.abspath(__file__))\r\nfiles_to_load = ['sprites1.png']\r\nfor fname in files_to_load:\r\n  fpath = os.path.join(BASE_DIR, fname)\r\n  if not os.path.exists(fpath):\r\n    with open(fpath, 'wb') as f:\r\n      f.write(requests.get(PD_STATIC_IMAGES_PATH+fname).content)
14	Remap Quit from Q Key to Escape Key	14	### IMPORTANT: Preamble required on server; omitted here. ####\r\n\r\nimport pyxel\r\n\r\nclass App:\r\n    def __init__(self):\r\n        pyxel.init(160, 120, caption='Mchezo')\r\n\r\n        pyxel.image(0).load(0, 0, 'sprites1.png')\r\n\r\n        self.clouds = [(10, 10), (60, 20), (120, 5)]\r\n        self.player_x = 70\r\n        self.player_y = 50\r\n\r\n        pyxel.run(self.update, self.draw)\r\n\r\n    def update(self):\r\n        # SOLN: Changed this from Q to ESCAPE\r\n        if pyxel.btnp(pyxel.KEY_ESCAPE):\r\n            pyxel.quit()\r\n\r\n        self.update_player()\r\n\r\n    def update_player(self):\r\n        if pyxel.btnp(pyxel.KEY_W) or pyxel.btnp(pyxel.KEY_UP):\r\n            self.player_y -= 2\r\n\r\n        if pyxel.btnp(pyxel.KEY_A) or pyxel.btnp(pyxel.KEY_LEFT):\r\n            self.player_x -= 2\r\n\r\n        if pyxel.btnp(pyxel.KEY_S) or pyxel.btnp(pyxel.KEY_DOWN):\r\n            self.player_y += 2\r\n\r\n        if pyxel.btnp(pyxel.KEY_D) or pyxel.btnp(pyxel.KEY_RIGHT):\r\n            self.player_x += 2\r\n\r\n    def draw(self):\r\n        pyxel.cls(12)\r\n\r\n        offset = (pyxel.frame_count / 4) % 160\r\n        for i in range(2):\r\n          for x, y in self.clouds:\r\n            pyxel.blt(x + (i * 160) - offset, y, 0, 0, 32, 56, 8)\r\n\r\n        pyxel.blt(self.player_x, self.player_y, 0, 0, 0, 16, 16)\r\nApp()	Currently your game allows the player to press the <b>Q key</b> to quit the game. But Q is very close to W on the keyboard. If the player accidentally presses Q, they'll lose their game.\r\n<br/><br/>\r\nChange your game so that only the <b>Escape key</b> causes the game to quit. The <b>Q key</b> should do nothing.	# Note: PD_STATIC_IMAGES_PATH varies based on address\r\n# of server and thus is prepended to this value in views.py\r\nimport os, requests\r\nBASE_DIR = os.path.dirname(os.path.abspath(__file__))\r\nfiles_to_load = ['sprites1.png']\r\nfor fname in files_to_load:\r\n  fpath = os.path.join(BASE_DIR, fname)\r\n  if not os.path.exists(fpath):\r\n    with open(fpath, 'wb') as f:\r\n      f.write(requests.get(PD_STATIC_IMAGES_PATH+fname).content)
17	Draw the Mountain	17	### IMPORTANT: Preamble required on server; omitted here. ####\r\n\r\nimport pyxel\r\n\r\nclass App:\r\n    def __init__(self):\r\n        pyxel.init(160, 120, caption='Mchezo')\r\n\r\n        pyxel.image(0).load(0, 0, 'sprites1.png')\r\n\r\n        self.clouds = [(10, 10), (60, 20), (120, 5)]\r\n        self.player_x = 70\r\n        self.player_y = 50\r\n\r\n        pyxel.run(self.update, self.draw)\r\n\r\n    def update(self):\r\n        if pyxel.btnp(pyxel.KEY_ESCAPE):\r\n            pyxel.quit()\r\n\r\n        self.update_player()\r\n\r\n    def update_player(self):\r\n        if pyxel.btnp(pyxel.KEY_W) or pyxel.btnp(pyxel.KEY_UP):\r\n            self.player_y -= 2\r\n\r\n        if pyxel.btnp(pyxel.KEY_A) or pyxel.btnp(pyxel.KEY_LEFT):\r\n            self.player_x -= 2\r\n\r\n        if pyxel.btnp(pyxel.KEY_S) or pyxel.btnp(pyxel.KEY_DOWN):\r\n            self.player_y += 2\r\n\r\n        if pyxel.btnp(pyxel.KEY_D) or pyxel.btnp(pyxel.KEY_RIGHT):\r\n            self.player_x += 2\r\n\r\n    def draw(self):\r\n    \t# clear screen, paint sky blue\r\n        pyxel.cls(12)\r\n\r\n        # draw horizon\r\n        pyxel.blt(0, 88, 0, 0, 88, 160, 32)\r\n\r\n        # SOLN: Added this comment and succeeding blt line\r\n        # draw mountain\r\n        pyxel.blt(0, 88, 0, 0, 64, 160, 24, 12)\r\n\r\n        # draw clouds\r\n        offset = (pyxel.frame_count / 4) % 160\r\n        for i in range(2):\r\n          for x, y in self.clouds:\r\n            pyxel.blt(x + (i * 160) - offset, y, 0, 0, 32, 56, 8)\r\n\r\n        # draw girl\r\n        pyxel.blt(self.player_x, self.player_y, 0, 0, 0, 16, 16, 12)\r\n\r\nApp()	Let's draw the mountain on the screen now. <b>Immediately after you draw the horizon</b>, add a call to the <code>pyxel.blt(...)</code> function that places the mountain at <code>0</code> on the X axis and <code>88</code> on the Y axis. The mountain is in image <code>0</code>, its sx is <code>0</code>, its sy is <code>64</code>, its width is <code>160</code>, and its height is <code>24</code>. <b>You must also make the blue background color of the mountain transparent.</b>\r\n<br/><br/>\r\n<b>Do not forget:</b> Add a comment <code># draw mountain</code> above the line you just wrote so that you won't forget what it does in the future.	# Note: PD_STATIC_IMAGES_PATH varies based on address\r\n# of server and thus is prepended to this value in views.py\r\nimport os, requests\r\nBASE_DIR = os.path.dirname(os.path.abspath(__file__))\r\nfiles_to_load = ['sprites1.png']\r\nfor fname in files_to_load:\r\n  fpath = os.path.join(BASE_DIR, fname)\r\n  if not os.path.exists(fpath):\r\n    with open(fpath, 'wb') as f:\r\n      f.write(requests.get(PD_STATIC_IMAGES_PATH+fname).content)
16	Draw the Horizon	16	### IMPORTANT: Preamble required on server; omitted here. ####\r\n\r\nimport pyxel\r\n\r\nclass App:\r\n    def __init__(self):\r\n        pyxel.init(160, 120, caption='Mchezo')\r\n\r\n        pyxel.image(0).load(0, 0, 'sprites1.png')\r\n\r\n        self.clouds = [(10, 10), (60, 20), (120, 5)]\r\n        self.player_x = 70\r\n        self.player_y = 50\r\n\r\n        pyxel.run(self.update, self.draw)\r\n\r\n    def update(self):\r\n        if pyxel.btnp(pyxel.KEY_ESCAPE):\r\n            pyxel.quit()\r\n\r\n        self.update_player()\r\n\r\n    def update_player(self):\r\n        if pyxel.btnp(pyxel.KEY_W) or pyxel.btnp(pyxel.KEY_UP):\r\n            self.player_y -= 2\r\n\r\n        if pyxel.btnp(pyxel.KEY_A) or pyxel.btnp(pyxel.KEY_LEFT):\r\n            self.player_x -= 2\r\n\r\n        if pyxel.btnp(pyxel.KEY_S) or pyxel.btnp(pyxel.KEY_DOWN):\r\n            self.player_y += 2\r\n\r\n        if pyxel.btnp(pyxel.KEY_D) or pyxel.btnp(pyxel.KEY_RIGHT):\r\n            self.player_x += 2\r\n\r\n    def draw(self):\r\n    \t# clear screen, paint sky blue\r\n        pyxel.cls(12)\r\n\r\n        # SOLN: Added this call to blt for drawing horizon\r\n        # draw horizon\r\n        pyxel.blt(0, 88, 0, 0, 88, 160, 32)\r\n\r\n        # draw clouds\r\n        offset = (pyxel.frame_count / 4) % 160\r\n        for i in range(2):\r\n          for x, y in self.clouds:\r\n            pyxel.blt(x + (i * 160) - offset, y, 0, 0, 32, 56, 8)\r\n\r\n        # draw girl\r\n        pyxel.blt(self.player_x, self.player_y, 0, 0, 0, 16, 16, 12)\r\n\r\nApp()	Now let's draw the horizon underneath the sky. In your <code>draw(self)</code> function, add a call to <code>pyxel.blt</code> <b>immediately after you clear the screen</b>. Place the horizon image at <code>0</code> on the X axis and <code>88</code> on the Y axis. It's in image <code>0</code>, its <code>sx</code> is <code>0</code>, its <code>sy</code> is <code>88</code>, its width is <code>160</code> and its height is <code>32</code>.\r\n<br/><br/>\r\n<span style="color: red; font-weight: bold">IMPORTANT: Notice how your code is getting bigger.</span> Haiwezekani kukumbuka mambo yote yanayotokea hapa. Kwa hiyo, uandike comments. In Python, comments start with the symbol <code>#</code>. In your <code>draw(self)</code> function, you are doing four things: clearing the screen, drawing the horizon, drawing clouds, and drawing the girl; so, place the following comments in the appropriate places:\r\n<ul>\r\n  <li><code># clear screen and paint it sky blue</code></li>\r\n  <li><code># draw horizon</code></li>\r\n  <li><code># draw clouds</code></li>\r\n  <li><code># draw girl</code></li>\r\n</ul>	# Note: PD_STATIC_IMAGES_PATH varies based on address\r\n# of server and thus is prepended to this value in views.py\r\nimport os, requests\r\nBASE_DIR = os.path.dirname(os.path.abspath(__file__))\r\nfiles_to_load = ['sprites1.png']\r\nfor fname in files_to_load:\r\n  fpath = os.path.join(BASE_DIR, fname)\r\n  if not os.path.exists(fpath):\r\n    with open(fpath, 'wb') as f:\r\n      f.write(requests.get(PD_STATIC_IMAGES_PATH+fname).content)
18	Draw the Forest	18	### IMPORTANT: Preamble required on server; omitted here. ####\r\n\r\nimport pyxel\r\n\r\nclass App:\r\n    def __init__(self):\r\n        pyxel.init(160, 120, caption='Mchezo')\r\n\r\n        pyxel.image(0).load(0, 0, 'sprites1.png')\r\n\r\n        self.clouds = [(10, 10), (60, 20), (120, 5)]\r\n        self.player_x = 70\r\n        self.player_y = 50\r\n\r\n        pyxel.run(self.update, self.draw)\r\n\r\n    def update(self):\r\n        if pyxel.btnp(pyxel.KEY_ESCAPE):\r\n            pyxel.quit()\r\n\r\n        self.update_player()\r\n\r\n    def update_player(self):\r\n        if pyxel.btnp(pyxel.KEY_W) or pyxel.btnp(pyxel.KEY_UP):\r\n            self.player_y -= 2\r\n\r\n        if pyxel.btnp(pyxel.KEY_A) or pyxel.btnp(pyxel.KEY_LEFT):\r\n            self.player_x -= 2\r\n\r\n        if pyxel.btnp(pyxel.KEY_S) or pyxel.btnp(pyxel.KEY_DOWN):\r\n            self.player_y += 2\r\n\r\n        if pyxel.btnp(pyxel.KEY_D) or pyxel.btnp(pyxel.KEY_RIGHT):\r\n            self.player_x += 2\r\n\r\n    def draw(self):\r\n    \t# clear screen, paint sky blue\r\n        pyxel.cls(12)\r\n\r\n        # draw horizon\r\n        pyxel.blt(0, 88, 0, 0, 88, 160, 32)\r\n\r\n        # draw mountain\r\n        pyxel.blt(0, 88, 0, 0, 64, 160, 24, 12)\r\n\r\n        # SOLN: Added comment and succeeding line\r\n        # draw forest\r\n        pyxel.blt(0, 104, 0, 0, 48, 160, 16, 12)\r\n\r\n        # draw clouds\r\n        offset = (pyxel.frame_count / 4) % 160\r\n        for i in range(2):\r\n          for x, y in self.clouds:\r\n            pyxel.blt(x + (i * 160) - offset, y, 0, 0, 32, 56, 8)\r\n\r\n        # draw girl\r\n        pyxel.blt(self.player_x, self.player_y, 0, 0, 0, 16, 16, 12)\r\n\r\nApp()	Let's draw the forest on the screen now. <b>Immediately after you draw the mountain</b>, add a call to the <code>pyxel.blt(...)</code> function that places the forest at <code>0</code> on the X axis and <code>104</code> on the Y axis. The forest is in image <code>0</code>, its sx is <code>0</code>, its sy is <code>48</code>, its width is <code>160</code>, and its height is <code>16</code>. <b>You must also make the blue background color of the forest transparent.</b>\r\n<br/><br/>\r\n<b>Do not forget:</b> Add a comment <code># draw forest</code> above the line you just wrote so that you won't forget what it does in the future.	# Note: PD_STATIC_IMAGES_PATH varies based on address\r\n# of server and thus is prepended to this value in views.py\r\nimport os, requests\r\nBASE_DIR = os.path.dirname(os.path.abspath(__file__))\r\nfiles_to_load = ['sprites1.png']\r\nfor fname in files_to_load:\r\n  fpath = os.path.join(BASE_DIR, fname)\r\n  if not os.path.exists(fpath):\r\n    with open(fpath, 'wb') as f:\r\n      f.write(requests.get(PD_STATIC_IMAGES_PATH+fname).content)
