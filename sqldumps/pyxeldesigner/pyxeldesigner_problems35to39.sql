41	Girl Shoots Malimau	38	### IMPORTANT: Preamble required on server; omitted here. ####\r\n\r\nimport pyxel\r\nfrom random import randint\r\n\r\nclass App:\r\n    def __init__(self):\r\n        pyxel.init(160, 120, caption='Mchezo')\r\n\r\n        pyxel.image(0).load(0, 0, 'sprites2.png')\r\n\r\n        self.clouds = [(10, 10), (60, 20), (120, 5)]\r\n        self.player_x = 70\r\n        self.player_y = 50\r\n        self.score = 0\r\n        self.makombora = []\r\n        self.player_xdir = 1\r\n        self.malimau = [(150, randint(0, 120), False)]\r\n\r\n        pyxel.run(self.update, self.draw)\r\n\r\n    def update(self):\r\n        if pyxel.btnp(pyxel.KEY_ESCAPE):\r\n            pyxel.quit()\r\n        self.update_player()\r\n        self.update_score()\r\n\r\n    def is_limau_hit_by_kombora(self, limau_x, limau_y):\r\n        for kom_x, kom_y, _ in self.makombora:\r\n            if kom_x >= limau_x and kom_x <= limau_x + 16 \\\r\n                    and kom_y >= limau_y and kom_y <= limau_y + 16:\r\n                return True\r\n        return False\r\n\r\n    def update_score(self):\r\n        self.malimau = [(x, y, True if abs(x - self.player_x) < 14 \\\r\n                                   and abs(y - self.player_y) < 14 else False) \\\r\n                        for x, y, hit in self.malimau]\r\n        self.score -= 5 * len(list(filter(lambda limau: limau[2], self.malimau)))\r\n        self.malimau = list(filter(lambda limau: not limau[2], self.malimau))\r\n        # SOLN: Added this line\r\n        self.malimau = [(x, y, True if self.is_limau_hit_by_kombora(x, y) \\\r\n                                    else False) for x, y, hit in self.malimau]\r\n        while len(self.malimau) < 1:\r\n            self.malimau.append((150, randint(0, 120), False))\r\n\r\n    def update_player(self):\r\n        if pyxel.btn(pyxel.KEY_W) or pyxel.btn(pyxel.KEY_UP):\r\n            self.player_y -= 2\r\n\r\n        if pyxel.btn(pyxel.KEY_A) or pyxel.btn(pyxel.KEY_LEFT):\r\n            self.player_x -= 2\r\n\r\n        if pyxel.btn(pyxel.KEY_S) or pyxel.btn(pyxel.KEY_DOWN):\r\n            self.player_y += 2\r\n\r\n        if pyxel.btn(pyxel.KEY_D) or pyxel.btn(pyxel.KEY_RIGHT):\r\n            self.player_x += 2\r\n\r\n        if pyxel.btnp(pyxel.KEY_SPACE):\r\n            self.makombora.append((self.player_x+8, \\\r\n                    self.player_y+8, self.player_xdir))\r\n\r\n        if pyxel.btnp(pyxel.KEY_F):\r\n            self.player_xdir *= -1\r\n\r\n    def draw(self):\r\n    \t# clear screen, paint sky blue\r\n        pyxel.cls(12)\r\n\r\n        # draw horizon + mountain + forest\r\n        pyxel.blt(0, 0, 0, 0, 120, 160, 120)\r\n\r\n        # draw clouds\r\n        offset = (pyxel.frame_count / 4) % 160\r\n        for i in range(2):\r\n          for x, y in self.clouds:\r\n            pyxel.blt(x + (i * 160) - offset, y, 0, 0, 32, 56, 8)\r\n\r\n        # draw malimau\r\n        for x, y, hit in self.malimau:\r\n            pyxel.blt(x, y, 0, 48, 0, 16, 16, 12)\r\n        self.malimau = [(x - 1, y, hit) if x > -16 and not hit \\\r\n                else (150, randint(0, 120), False) for x, y, hit in self.malimau]\r\n\r\n        # draw girl\r\n        pyxel.blt(self.player_x, self.player_y, 0, 0, 0,\r\n                16*self.player_xdir, 16, 12)\r\n\r\n        # draw makombora\r\n        for x, y, _ in self.makombora:\r\n            pyxel.pix(x, y, 8)\r\n        self.makombora = [(x+1*direction, y, direction) \\\r\n                for x, y, direction in self.makombora if x < 160 and x > 0]\r\n\r\n        # draw score\r\n        pyxel.text(5, 4, f"SCORE: {self.score}", 1)\r\n        pyxel.text(4, 4, f"SCORE: {self.score}", 7)\r\nApp()	Now we can enable the girl to shoot malimau. In your <code>update_score(self)</code> function, <b>above your <code>while</code> loop at the end</b>, add this line:\r\n<br/>\r\n<code><center>self.malimau = [(x, y, ___________) for x, y, hit in self.malimau]</center></code>\r\n<br/>\r\nFill in the blank using the <code>is_limau_hit_by_kombora</code> function that you created in the previous challenge.	# Note: PD_STATIC_IMAGES_PATH varies based on address\r\n# of server and thus is prepended to this value in views.py\r\nimport os, requests\r\nBASE_DIR = os.path.dirname(os.path.abspath(__file__))\r\nfiles_to_load = ['sprites2.png']\r\nfor fname in files_to_load:\r\n  fpath = os.path.join(BASE_DIR, fname)\r\n  if not os.path.exists(fpath):\r\n    with open(fpath, 'wb') as f:\r\n      f.write(requests.get(PD_STATIC_IMAGES_PATH+fname).content)
42	Add 10 Points for Every Limau Shot	39	### IMPORTANT: Preamble required on server; omitted here. ####\r\n\r\nimport pyxel\r\nfrom random import randint\r\n\r\nclass App:\r\n    def __init__(self):\r\n        pyxel.init(160, 120, caption='Mchezo')\r\n\r\n        pyxel.image(0).load(0, 0, 'sprites2.png')\r\n\r\n        self.clouds = [(10, 10), (60, 20), (120, 5)]\r\n        self.player_x = 70\r\n        self.player_y = 50\r\n        self.score = 0\r\n        self.makombora = []\r\n        self.player_xdir = 1\r\n        self.malimau = [(150, randint(0, 120), False)]\r\n\r\n        pyxel.run(self.update, self.draw)\r\n\r\n    def update(self):\r\n        if pyxel.btnp(pyxel.KEY_ESCAPE):\r\n            pyxel.quit()\r\n        self.update_player()\r\n        self.update_score()\r\n\r\n    def is_limau_hit_by_kombora(self, limau_x, limau_y):\r\n        for kom_x, kom_y, _ in self.makombora:\r\n            if kom_x >= limau_x and kom_x <= limau_x + 16 \\\r\n                    and kom_y >= limau_y and kom_y <= limau_y + 16:\r\n                return True\r\n        return False\r\n\r\n    def update_score(self):\r\n        self.malimau = [(x, y, True if abs(x - self.player_x) < 14 \\\r\n                                   and abs(y - self.player_y) < 14 else False) \\\r\n                        for x, y, hit in self.malimau]\r\n        self.score -= 5 * len(list(filter(lambda limau: limau[2], self.malimau)))\r\n        self.malimau = list(filter(lambda limau: not limau[2], self.malimau))\r\n        self.malimau = [(x, y, True if self.is_limau_hit_by_kombora(x, y) \\\r\n                                    else False) for x, y, hit in self.malimau]\r\n        # SOLN: Added this line\r\n        self.score += 10 * len(list(filter(lambda limau: limau[2], self.malimau)))\r\n        while len(self.malimau) < 1:\r\n            self.malimau.append((150, randint(0, 120), False))\r\n\r\n    def update_player(self):\r\n        if pyxel.btn(pyxel.KEY_W) or pyxel.btn(pyxel.KEY_UP):\r\n            self.player_y -= 2\r\n\r\n        if pyxel.btn(pyxel.KEY_A) or pyxel.btn(pyxel.KEY_LEFT):\r\n            self.player_x -= 2\r\n\r\n        if pyxel.btn(pyxel.KEY_S) or pyxel.btn(pyxel.KEY_DOWN):\r\n            self.player_y += 2\r\n\r\n        if pyxel.btn(pyxel.KEY_D) or pyxel.btn(pyxel.KEY_RIGHT):\r\n            self.player_x += 2\r\n\r\n        if pyxel.btnp(pyxel.KEY_SPACE):\r\n            self.makombora.append((self.player_x+8, \\\r\n                    self.player_y+8, self.player_xdir))\r\n\r\n        if pyxel.btnp(pyxel.KEY_F):\r\n            self.player_xdir *= -1\r\n\r\n    def draw(self):\r\n    \t# clear screen, paint sky blue\r\n        pyxel.cls(12)\r\n\r\n        # draw horizon + mountain + forest\r\n        pyxel.blt(0, 0, 0, 0, 120, 160, 120)\r\n\r\n        # draw clouds\r\n        offset = (pyxel.frame_count / 4) % 160\r\n        for i in range(2):\r\n          for x, y in self.clouds:\r\n            pyxel.blt(x + (i * 160) - offset, y, 0, 0, 32, 56, 8)\r\n\r\n        # draw malimau\r\n        for x, y, hit in self.malimau:\r\n            pyxel.blt(x, y, 0, 48, 0, 16, 16, 12)\r\n        self.malimau = [(x - 1, y, hit) if x > -16 and not hit \\\r\n                else (150, randint(0, 120), False) for x, y, hit in self.malimau]\r\n\r\n        # draw girl\r\n        pyxel.blt(self.player_x, self.player_y, 0, 0, 0,\r\n                16*self.player_xdir, 16, 12)\r\n\r\n        # draw makombora\r\n        for x, y, _ in self.makombora:\r\n            pyxel.pix(x, y, 8)\r\n        self.makombora = [(x+1*direction, y, direction) \\\r\n                for x, y, direction in self.makombora if x < 160 and x > 0]\r\n\r\n        # draw score\r\n        pyxel.text(5, 4, f"SCORE: {self.score}", 1)\r\n        pyxel.text(4, 4, f"SCORE: {self.score}", 7)\r\nApp()	Every time the girl shoots a limau, increase the score by 10. In your <code>update_score(self)</code> function, <b>above the <code>while</code> loop</b>, add this line and fill in the blank:\r\n<br/>\r\n<code><center>self.score += _______________________________</center></code>	# Note: PD_STATIC_IMAGES_PATH varies based on address\r\n# of server and thus is prepended to this value in views.py\r\nimport os, requests\r\nBASE_DIR = os.path.dirname(os.path.abspath(__file__))\r\nfiles_to_load = ['sprites2.png']\r\nfor fname in files_to_load:\r\n  fpath = os.path.join(BASE_DIR, fname)\r\n  if not os.path.exists(fpath):\r\n    with open(fpath, 'wb') as f:\r\n      f.write(requests.get(PD_STATIC_IMAGES_PATH+fname).content)
38	Ensure There is Always at Least One Limau	35	### IMPORTANT: Preamble required on server; omitted here. ####\r\n\r\nimport pyxel\r\nfrom random import randint\r\n\r\nclass App:\r\n    def __init__(self):\r\n        pyxel.init(160, 120, caption='Mchezo')\r\n\r\n        pyxel.image(0).load(0, 0, 'sprites2.png')\r\n\r\n        self.clouds = [(10, 10), (60, 20), (120, 5)]\r\n        self.player_x = 70\r\n        self.player_y = 50\r\n        self.score = 0\r\n        self.makombora = []\r\n        self.player_xdir = 1\r\n        self.malimau = [(150, randint(0, 120), False)]\r\n\r\n        pyxel.run(self.update, self.draw)\r\n\r\n    def update(self):\r\n        if pyxel.btnp(pyxel.KEY_ESCAPE):\r\n            pyxel.quit()\r\n        self.update_player()\r\n        self.update_score()\r\n\r\n    def update_score(self):\r\n        self.malimau = [(x, y, True if abs(x - self.player_x) < 14 \\\r\n                                   and abs(y - self.player_y) < 14 else False) \\\r\n                        for x, y, hit in self.malimau]\r\n        self.score -= 5 * len(list(filter(lambda limau: limau[2], self.malimau)))\r\n        # SOLN: Added this\r\n        while len(self.malimau) < 1:\r\n            self.malimau.append((150, randint(0, 120), False))\r\n\r\n    def update_player(self):\r\n        if pyxel.btn(pyxel.KEY_W) or pyxel.btn(pyxel.KEY_UP):\r\n            self.player_y -= 2\r\n\r\n        if pyxel.btn(pyxel.KEY_A) or pyxel.btn(pyxel.KEY_LEFT):\r\n            self.player_x -= 2\r\n\r\n        if pyxel.btn(pyxel.KEY_S) or pyxel.btn(pyxel.KEY_DOWN):\r\n            self.player_y += 2\r\n\r\n        if pyxel.btn(pyxel.KEY_D) or pyxel.btn(pyxel.KEY_RIGHT):\r\n            self.player_x += 2\r\n\r\n        if pyxel.btnp(pyxel.KEY_SPACE):\r\n            self.makombora.append((self.player_x+8, \\\r\n                    self.player_y+8, self.player_xdir))\r\n\r\n        if pyxel.btnp(pyxel.KEY_F):\r\n            self.player_xdir *= -1\r\n\r\n    def draw(self):\r\n    \t# clear screen, paint sky blue\r\n        pyxel.cls(12)\r\n\r\n        # draw horizon + mountain + forest\r\n        pyxel.blt(0, 0, 0, 0, 120, 160, 120)\r\n\r\n        # draw clouds\r\n        offset = (pyxel.frame_count / 4) % 160\r\n        for i in range(2):\r\n          for x, y in self.clouds:\r\n            pyxel.blt(x + (i * 160) - offset, y, 0, 0, 32, 56, 8)\r\n\r\n        # draw malimau\r\n        for x, y, hit in self.malimau:\r\n            pyxel.blt(x, y, 0, 48, 0, 16, 16, 12)\r\n        self.malimau = [(x - 1, y, hit) if x > -16 and not hit \\\r\n                else (150, randint(0, 120), False) for x, y, hit in self.malimau]\r\n\r\n        # draw girl\r\n        pyxel.blt(self.player_x, self.player_y, 0, 0, 0,\r\n                16*self.player_xdir, 16, 12)\r\n\r\n        # draw makombora\r\n        for x, y, _ in self.makombora:\r\n            pyxel.pix(x, y, 8)\r\n        self.makombora = [(x+1*direction, y, direction) \\\r\n                for x, y, direction in self.makombora if x < 160 and x > 0]\r\n\r\n        # draw score\r\n        pyxel.text(5, 4, f"SCORE: {self.score}", 1)\r\n        pyxel.text(4, 4, f"SCORE: {self.score}", 7)\r\nApp()	Soon we are going to add points to the score when a kombora hits a limau. First, we need to make sure that there is always at least one limau in the malimau list.\r\n<br/><br/>\r\nAt the end of your <code>update_score(self)</code> function, add a <code>while</code> loop. Write the loop so that whenever the length of the malimau list is less than one, a new lemon is appended to the malimau list. The new lemon should start at 150 on the X-axis and a random place on the Y-axis.	# Note: PD_STATIC_IMAGES_PATH varies based on address\r\n# of server and thus is prepended to this value in views.py\r\nimport os, requests\r\nBASE_DIR = os.path.dirname(os.path.abspath(__file__))\r\nfiles_to_load = ['sprites2.png']\r\nfor fname in files_to_load:\r\n  fpath = os.path.join(BASE_DIR, fname)\r\n  if not os.path.exists(fpath):\r\n    with open(fpath, 'wb') as f:\r\n      f.write(requests.get(PD_STATIC_IMAGES_PATH+fname).content)
39	Filter Malimau That Have Been Hit by the Girl	36	### IMPORTANT: Preamble required on server; omitted here. ####\r\n\r\nimport pyxel\r\nfrom random import randint\r\n\r\nclass App:\r\n    def __init__(self):\r\n        pyxel.init(160, 120, caption='Mchezo')\r\n\r\n        pyxel.image(0).load(0, 0, 'sprites2.png')\r\n\r\n        self.clouds = [(10, 10), (60, 20), (120, 5)]\r\n        self.player_x = 70\r\n        self.player_y = 50\r\n        self.score = 0\r\n        self.makombora = []\r\n        self.player_xdir = 1\r\n        self.malimau = [(150, randint(0, 120), False)]\r\n\r\n        pyxel.run(self.update, self.draw)\r\n\r\n    def update(self):\r\n        if pyxel.btnp(pyxel.KEY_ESCAPE):\r\n            pyxel.quit()\r\n        self.update_player()\r\n        self.update_score()\r\n\r\n    def update_score(self):\r\n        self.malimau = [(x, y, True if abs(x - self.player_x) < 14 \\\r\n                                   and abs(y - self.player_y) < 14 else False) \\\r\n                        for x, y, hit in self.malimau]\r\n        self.score -= 5 * len(list(filter(lambda limau: limau[2], self.malimau)))\r\n        # SOLN: Added this\r\n        self.malimau = list(filter(lambda limau: not limau[2], self.malimau))\r\n        while len(self.malimau) < 1:\r\n            self.malimau.append((150, randint(0, 120), False))\r\n\r\n    def update_player(self):\r\n        if pyxel.btn(pyxel.KEY_W) or pyxel.btn(pyxel.KEY_UP):\r\n            self.player_y -= 2\r\n\r\n        if pyxel.btn(pyxel.KEY_A) or pyxel.btn(pyxel.KEY_LEFT):\r\n            self.player_x -= 2\r\n\r\n        if pyxel.btn(pyxel.KEY_S) or pyxel.btn(pyxel.KEY_DOWN):\r\n            self.player_y += 2\r\n\r\n        if pyxel.btn(pyxel.KEY_D) or pyxel.btn(pyxel.KEY_RIGHT):\r\n            self.player_x += 2\r\n\r\n        if pyxel.btnp(pyxel.KEY_SPACE):\r\n            self.makombora.append((self.player_x+8, \\\r\n                    self.player_y+8, self.player_xdir))\r\n\r\n        if pyxel.btnp(pyxel.KEY_F):\r\n            self.player_xdir *= -1\r\n\r\n    def draw(self):\r\n    \t# clear screen, paint sky blue\r\n        pyxel.cls(12)\r\n\r\n        # draw horizon + mountain + forest\r\n        pyxel.blt(0, 0, 0, 0, 120, 160, 120)\r\n\r\n        # draw clouds\r\n        offset = (pyxel.frame_count / 4) % 160\r\n        for i in range(2):\r\n          for x, y in self.clouds:\r\n            pyxel.blt(x + (i * 160) - offset, y, 0, 0, 32, 56, 8)\r\n\r\n        # draw malimau\r\n        for x, y, hit in self.malimau:\r\n            pyxel.blt(x, y, 0, 48, 0, 16, 16, 12)\r\n        self.malimau = [(x - 1, y, hit) if x > -16 and not hit \\\r\n                else (150, randint(0, 120), False) for x, y, hit in self.malimau]\r\n\r\n        # draw girl\r\n        pyxel.blt(self.player_x, self.player_y, 0, 0, 0,\r\n                16*self.player_xdir, 16, 12)\r\n\r\n        # draw makombora\r\n        for x, y, _ in self.makombora:\r\n            pyxel.pix(x, y, 8)\r\n        self.makombora = [(x+1*direction, y, direction) \\\r\n                for x, y, direction in self.makombora if x < 160 and x > 0]\r\n\r\n        # draw score\r\n        pyxel.text(5, 4, f"SCORE: {self.score}", 1)\r\n        pyxel.text(4, 4, f"SCORE: {self.score}", 7)\r\nApp()	Now we need to remove malimau that the girl hit. If we keep them in the malimau list, our game will incorrectly add points when the girl hits a lemon.\r\n<br/><br/>\r\nIn your <code>update_score(self)</code> function, add this line <b>after</b> you subtract points for hitting malimau and <b>before</b> your <code>while</code> loop:\r\n<br/><br/>\r\n<center><code>self.malimau = list(filter(____________________________))</code></center>\r\n<br/>\r\nFill in the blank so that the line correctly removes malimau that have been hit.	# Note: PD_STATIC_IMAGES_PATH varies based on address\r\n# of server and thus is prepended to this value in views.py\r\nimport os, requests\r\nBASE_DIR = os.path.dirname(os.path.abspath(__file__))\r\nfiles_to_load = ['sprites2.png']\r\nfor fname in files_to_load:\r\n  fpath = os.path.join(BASE_DIR, fname)\r\n  if not os.path.exists(fpath):\r\n    with open(fpath, 'wb') as f:\r\n      f.write(requests.get(PD_STATIC_IMAGES_PATH+fname).content)
40	Create Function to Detect Limau/Kombora Collisions	37	### IMPORTANT: Preamble required on server; omitted here. ####\r\n\r\nimport pyxel\r\nfrom random import randint\r\n\r\nclass App:\r\n    def __init__(self):\r\n        pyxel.init(160, 120, caption='Mchezo')\r\n\r\n        pyxel.image(0).load(0, 0, 'sprites2.png')\r\n\r\n        self.clouds = [(10, 10), (60, 20), (120, 5)]\r\n        self.player_x = 70\r\n        self.player_y = 50\r\n        self.score = 0\r\n        self.makombora = []\r\n        self.player_xdir = 1\r\n        self.malimau = [(150, randint(0, 120), False)]\r\n\r\n        pyxel.run(self.update, self.draw)\r\n\r\n    def update(self):\r\n        if pyxel.btnp(pyxel.KEY_ESCAPE):\r\n            pyxel.quit()\r\n        self.update_player()\r\n        self.update_score()\r\n\r\n    # SOLN: Added this function\r\n    def is_limau_hit_by_kombora(self, limau_x, limau_y):\r\n        for kom_x, kom_y, _ in self.makombora:\r\n            if kom_x >= limau_x and kom_x <= limau_x + 16 \\\r\n                    and kom_y >= limau_y and kom_y <= limau_y + 16:\r\n                return True\r\n        return False\r\n\r\n    def update_score(self):\r\n        self.malimau = [(x, y, True if abs(x - self.player_x) < 14 \\\r\n                                   and abs(y - self.player_y) < 14 else False) \\\r\n                        for x, y, hit in self.malimau]\r\n        self.score -= 5 * len(list(filter(lambda limau: limau[2], self.malimau)))\r\n        self.malimau = list(filter(lambda limau: not limau[2], self.malimau))\r\n        while len(self.malimau) < 1:\r\n            self.malimau.append((150, randint(0, 120), False))\r\n\r\n    def update_player(self):\r\n        if pyxel.btn(pyxel.KEY_W) or pyxel.btn(pyxel.KEY_UP):\r\n            self.player_y -= 2\r\n\r\n        if pyxel.btn(pyxel.KEY_A) or pyxel.btn(pyxel.KEY_LEFT):\r\n            self.player_x -= 2\r\n\r\n        if pyxel.btn(pyxel.KEY_S) or pyxel.btn(pyxel.KEY_DOWN):\r\n            self.player_y += 2\r\n\r\n        if pyxel.btn(pyxel.KEY_D) or pyxel.btn(pyxel.KEY_RIGHT):\r\n            self.player_x += 2\r\n\r\n        if pyxel.btnp(pyxel.KEY_SPACE):\r\n            self.makombora.append((self.player_x+8, \\\r\n                    self.player_y+8, self.player_xdir))\r\n\r\n        if pyxel.btnp(pyxel.KEY_F):\r\n            self.player_xdir *= -1\r\n\r\n    def draw(self):\r\n    \t# clear screen, paint sky blue\r\n        pyxel.cls(12)\r\n\r\n        # draw horizon + mountain + forest\r\n        pyxel.blt(0, 0, 0, 0, 120, 160, 120)\r\n\r\n        # draw clouds\r\n        offset = (pyxel.frame_count / 4) % 160\r\n        for i in range(2):\r\n          for x, y in self.clouds:\r\n            pyxel.blt(x + (i * 160) - offset, y, 0, 0, 32, 56, 8)\r\n\r\n        # draw malimau\r\n        for x, y, hit in self.malimau:\r\n            pyxel.blt(x, y, 0, 48, 0, 16, 16, 12)\r\n        self.malimau = [(x - 1, y, hit) if x > -16 and not hit \\\r\n                else (150, randint(0, 120), False) for x, y, hit in self.malimau]\r\n\r\n        # draw girl\r\n        pyxel.blt(self.player_x, self.player_y, 0, 0, 0,\r\n                16*self.player_xdir, 16, 12)\r\n\r\n        # draw makombora\r\n        for x, y, _ in self.makombora:\r\n            pyxel.pix(x, y, 8)\r\n        self.makombora = [(x+1*direction, y, direction) \\\r\n                for x, y, direction in self.makombora if x < 160 and x > 0]\r\n\r\n        # draw score\r\n        pyxel.text(5, 4, f"SCORE: {self.score}", 1)\r\n        pyxel.text(4, 4, f"SCORE: {self.score}", 7)\r\nApp()	Now we need a new function that will tell us if a lemon has been hit by a kombora:\r\n<ul>\r\n<li>Create a new function called <code>is_limau_hit_by_kombora(self, limau_x, limau_y)</code></li>\r\n<li>Inside this new function, create a <code>for</code> loop that looks at each kombora. <b>If</b> the kombora's X is greater than or equal to the limau's X, <b>and</b> the kombora's X is less than or equal to the limau's X plus its width, <b>and</b> the kombora's Y is greater than or equal to the limau's Y, <b>and</b> the kombora's Y is less than or equal to the limau's Y plus its height, <b>return True</b></li>\r\n<li>If no kombora is found to be hitting the limau, <b>return False</b>.</li>\r\n</ul>	# Note: PD_STATIC_IMAGES_PATH varies based on address\r\n# of server and thus is prepended to this value in views.py\r\nimport os, requests\r\nBASE_DIR = os.path.dirname(os.path.abspath(__file__))\r\nfiles_to_load = ['sprites2.png']\r\nfor fname in files_to_load:\r\n  fpath = os.path.join(BASE_DIR, fname)\r\n  if not os.path.exists(fpath):\r\n    with open(fpath, 'wb') as f:\r\n      f.write(requests.get(PD_STATIC_IMAGES_PATH+fname).content)
