43	Cherries, Part 1	40	### IMPORTANT: Preamble required on server; omitted here. ####\r\n\r\nimport pyxel\r\nfrom random import randint\r\n\r\nclass App:\r\n    def __init__(self):\r\n        pyxel.init(160, 120, caption='Mchezo')\r\n\r\n        pyxel.image(0).load(0, 0, 'sprites2.png')\r\n\r\n        self.clouds = [(10, 10), (60, 20), (120, 5)]\r\n        self.player_x = 70\r\n        self.player_y = 50\r\n        self.score = 0\r\n        self.makombora = []\r\n        self.player_xdir = 1\r\n        self.malimau = [(150, randint(0, 120), False)]\r\n        # SOLN: Added this line\r\n        self.cherries = [(0, randint(0, 120), False)]\r\n\r\n        pyxel.run(self.update, self.draw)\r\n\r\n    def update(self):\r\n        if pyxel.btnp(pyxel.KEY_ESCAPE):\r\n            pyxel.quit()\r\n        self.update_player()\r\n        self.update_score()\r\n\r\n    def is_limau_hit_by_kombora(self, limau_x, limau_y):\r\n        for kom_x, kom_y, _ in self.makombora:\r\n            if kom_x >= limau_x and kom_x <= limau_x + 16 \\\r\n                    and kom_y >= limau_y and kom_y <= limau_y + 16:\r\n                return True\r\n        return False\r\n\r\n    def update_score(self):\r\n        self.malimau = [(x, y, True if abs(x - self.player_x) < 14 \\\r\n                                   and abs(y - self.player_y) < 14 else False) \\\r\n                        for x, y, hit in self.malimau]\r\n        self.score -= 5 * len(list(filter(lambda limau: limau[2], self.malimau)))\r\n        self.malimau = list(filter(lambda limau: not limau[2], self.malimau))\r\n        self.malimau = [(x, y, True if self.is_limau_hit_by_kombora(x, y) \\\r\n                                    else False) for x, y, hit in self.malimau]\r\n        self.score += 10 * len(list(filter(lambda limau: limau[2], self.malimau)))\r\n        while len(self.malimau) < 1:\r\n            self.malimau.append((150, randint(0, 120), False))\r\n\r\n    def update_player(self):\r\n        if pyxel.btn(pyxel.KEY_W) or pyxel.btn(pyxel.KEY_UP):\r\n            self.player_y -= 2\r\n\r\n        if pyxel.btn(pyxel.KEY_A) or pyxel.btn(pyxel.KEY_LEFT):\r\n            self.player_x -= 2\r\n\r\n        if pyxel.btn(pyxel.KEY_S) or pyxel.btn(pyxel.KEY_DOWN):\r\n            self.player_y += 2\r\n\r\n        if pyxel.btn(pyxel.KEY_D) or pyxel.btn(pyxel.KEY_RIGHT):\r\n            self.player_x += 2\r\n\r\n        if pyxel.btnp(pyxel.KEY_SPACE):\r\n            self.makombora.append((self.player_x+8, \\\r\n                    self.player_y+8, self.player_xdir))\r\n\r\n        if pyxel.btnp(pyxel.KEY_F):\r\n            self.player_xdir *= -1\r\n\r\n    def draw(self):\r\n    \t# clear screen, paint sky blue\r\n        pyxel.cls(12)\r\n\r\n        # draw horizon + mountain + forest\r\n        pyxel.blt(0, 0, 0, 0, 120, 160, 120)\r\n\r\n        # draw clouds\r\n        offset = (pyxel.frame_count / 4) % 160\r\n        for i in range(2):\r\n          for x, y in self.clouds:\r\n            pyxel.blt(x + (i * 160) - offset, y, 0, 0, 32, 56, 8)\r\n\r\n        # draw malimau\r\n        for x, y, hit in self.malimau:\r\n            pyxel.blt(x, y, 0, 48, 0, 16, 16, 12)\r\n        self.malimau = [(x - 1, y, hit) if x > -16 and not hit \\\r\n                else (150, randint(0, 120), False) for x, y, hit in self.malimau]\r\n\r\n        # SOLN: Added this block\r\n        # draw cherries\r\n        for x, y, hit in self.cherries:\r\n            pyxel.blt(x, y, 0, 32, 0, 16, 16, 12)\r\n        self.cherries = [(x + 1, y, hit) if x < 160 + 16 and not hit \\\r\n                else (0, randint(0, 120), False) for x, y, hit in self.cherries]\r\n\r\n        # draw girl\r\n        pyxel.blt(self.player_x, self.player_y, 0, 0, 0,\r\n                16*self.player_xdir, 16, 12)\r\n\r\n        # draw makombora\r\n        for x, y, _ in self.makombora:\r\n            pyxel.pix(x, y, 8)\r\n        self.makombora = [(x+1*direction, y, direction) \\\r\n                for x, y, direction in self.makombora if x < 160 and x > 0]\r\n\r\n        # draw score\r\n        pyxel.text(5, 4, f"SCORE: {self.score}", 1)\r\n        pyxel.text(4, 4, f"SCORE: {self.score}", 7)\r\nApp()	We will now add another fruit to the screen: cherries. Unlike malimau, cherries will move from left to right.\r\n<br/><br/>\r\n<ul>\r\n  <li>In your <code>__init__(self)</code> function, add a variable called <code>self.cherries</code> containing a list with one cherry inside. The cherry's X should be 0, its Y should be random, and you should use <code>False</code> to indicate that it has not yet been hit.</li>\r\n   <li>In your <code>draw(self)</code> function, make a copy of the code that you wrote to draw the malimau. Paste the copy after you draw the malimau but before you draw the girl. Then change the copied code so that it draws the cherries (which have an <code>sx</code> of 32) and moves them from <b>left to right</b> across the screen. When a cherry reaches 16 pixels past the <b>right side of the screen</b>, it should go back to 0 on the X axis and a random place on the Y axis.</li> \r\n</ul>	# Note: PD_STATIC_IMAGES_PATH varies based on address\r\n# of server and thus is prepended to this value in views.py\r\nimport os, requests\r\nBASE_DIR = os.path.dirname(os.path.abspath(__file__))\r\nfiles_to_load = ['sprites2.png']\r\nfor fname in files_to_load:\r\n  fpath = os.path.join(BASE_DIR, fname)\r\n  if not os.path.exists(fpath):\r\n    with open(fpath, 'wb') as f:\r\n      f.write(requests.get(PD_STATIC_IMAGES_PATH+fname).content)
44	Cherries, Part 2 (Add Points if Hit by Girl)	41	### IMPORTANT: Preamble required on server; omitted here. ####\r\n\r\nimport pyxel\r\nfrom random import randint\r\n\r\nclass App:\r\n    def __init__(self):\r\n        pyxel.init(160, 120, caption='Mchezo')\r\n\r\n        pyxel.image(0).load(0, 0, 'sprites2.png')\r\n\r\n        self.clouds = [(10, 10), (60, 20), (120, 5)]\r\n        self.player_x = 70\r\n        self.player_y = 50\r\n        self.score = 0\r\n        self.makombora = []\r\n        self.player_xdir = 1\r\n        self.malimau = [(150, randint(0, 120), False)]\r\n        self.cherries = [(0, randint(0, 120), False)]\r\n        pyxel.run(self.update, self.draw)\r\n\r\n    def update(self):\r\n        if pyxel.btnp(pyxel.KEY_ESCAPE):\r\n            pyxel.quit()\r\n        self.update_player()\r\n        self.update_score()\r\n\r\n    def is_limau_hit_by_kombora(self, limau_x, limau_y):\r\n        for kom_x, kom_y, _ in self.makombora:\r\n            if kom_x >= limau_x and kom_x <= limau_x + 16 \\\r\n                    and kom_y >= limau_y and kom_y <= limau_y + 16:\r\n                return True\r\n        return False\r\n\r\n    def update_score(self):\r\n        self.malimau = [(x, y, True if abs(x - self.player_x) < 14 \\\r\n                                   and abs(y - self.player_y) < 14 else False) \\\r\n                        for x, y, hit in self.malimau]\r\n        self.score -= 5 * len(list(filter(lambda limau: limau[2], self.malimau)))\r\n        self.malimau = list(filter(lambda limau: not limau[2], self.malimau))\r\n        self.malimau = [(x, y, True if self.is_limau_hit_by_kombora(x, y) \\\r\n                                    else False) for x, y, hit in self.malimau]\r\n        self.score += 10 * len(list(filter(lambda limau: limau[2], self.malimau)))\r\n        while len(self.malimau) < 1:\r\n            self.malimau.append((150, randint(0, 120), False))\r\n        # SOLN: Added these two lines\r\n        self.cherries = [(x, y, True if abs(x - self.player_x) < 14 \\\r\n                                   and abs(y - self.player_y) < 14 else False) \\\r\n                        for x, y, hit in self.cherries]\r\n        self.score += 7 * len(list(filter(lambda cherry: cherry[2], self.cherries)))\r\n\r\n    def update_player(self):\r\n        if pyxel.btn(pyxel.KEY_W) or pyxel.btn(pyxel.KEY_UP):\r\n            self.player_y -= 2\r\n\r\n        if pyxel.btn(pyxel.KEY_A) or pyxel.btn(pyxel.KEY_LEFT):\r\n            self.player_x -= 2\r\n\r\n        if pyxel.btn(pyxel.KEY_S) or pyxel.btn(pyxel.KEY_DOWN):\r\n            self.player_y += 2\r\n\r\n        if pyxel.btn(pyxel.KEY_D) or pyxel.btn(pyxel.KEY_RIGHT):\r\n            self.player_x += 2\r\n\r\n        if pyxel.btnp(pyxel.KEY_SPACE):\r\n            self.makombora.append((self.player_x+8, \\\r\n                    self.player_y+8, self.player_xdir))\r\n\r\n        if pyxel.btnp(pyxel.KEY_F):\r\n            self.player_xdir *= -1\r\n\r\n    def draw(self):\r\n    \t# clear screen, paint sky blue\r\n        pyxel.cls(12)\r\n\r\n        # draw horizon + mountain + forest\r\n        pyxel.blt(0, 0, 0, 0, 120, 160, 120)\r\n\r\n        # draw clouds\r\n        offset = (pyxel.frame_count / 4) % 160\r\n        for i in range(2):\r\n          for x, y in self.clouds:\r\n            pyxel.blt(x + (i * 160) - offset, y, 0, 0, 32, 56, 8)\r\n\r\n        # draw malimau\r\n        for x, y, hit in self.malimau:\r\n            pyxel.blt(x, y, 0, 48, 0, 16, 16, 12)\r\n        self.malimau = [(x - 1, y, hit) if x > -16 and not hit \\\r\n                else (150, randint(0, 120), False) for x, y, hit in self.malimau]\r\n\r\n        # draw cherries\r\n        for x, y, hit in self.cherries:\r\n            pyxel.blt(x, y, 0, 32, 0, 16, 16, 12)\r\n        self.cherries = [(x + 1, y, hit) if x < 160 + 16 and not hit \\\r\n                else (0, randint(0, 120), False) for x, y, hit in self.cherries]\r\n\r\n        # draw girl\r\n        pyxel.blt(self.player_x, self.player_y, 0, 0, 0,\r\n                16*self.player_xdir, 16, 12)\r\n\r\n        # draw makombora\r\n        for x, y, _ in self.makombora:\r\n            pyxel.pix(x, y, 8)\r\n        self.makombora = [(x+1*direction, y, direction) \\\r\n                for x, y, direction in self.makombora if x < 160 and x > 0]\r\n\r\n        # draw score\r\n        pyxel.text(5, 4, f"SCORE: {self.score}", 1)\r\n        pyxel.text(4, 4, f"SCORE: {self.score}", 7)\r\nApp()	If the girl touches a cherry, she should get 7 points.\r\n<br/><br/>\r\nAt the very end of your <code>update_score(self)</code> function, add two lines that adds 7 points for every cherry hit by the girl. (Hint: earlier you wrote code to subtract points for touching malimau; you can copy this code and change it to work with cherries here).	# Note: PD_STATIC_IMAGES_PATH varies based on address\r\n# of server and thus is prepended to this value in views.py\r\nimport os, requests\r\nBASE_DIR = os.path.dirname(os.path.abspath(__file__))\r\nfiles_to_load = ['sprites2.png']\r\nfor fname in files_to_load:\r\n  fpath = os.path.join(BASE_DIR, fname)\r\n  if not os.path.exists(fpath):\r\n    with open(fpath, 'wb') as f:\r\n      f.write(requests.get(PD_STATIC_IMAGES_PATH+fname).content)
45	Refactor "is_limau_hit_by_kombora"	42	### IMPORTANT: Preamble required on server; omitted here. ####\r\n\r\nimport pyxel\r\nfrom random import randint\r\n\r\nclass App:\r\n    def __init__(self):\r\n        pyxel.init(160, 120, caption='Mchezo')\r\n\r\n        pyxel.image(0).load(0, 0, 'sprites2.png')\r\n\r\n        self.clouds = [(10, 10), (60, 20), (120, 5)]\r\n        self.player_x = 70\r\n        self.player_y = 50\r\n        self.score = 0\r\n        self.makombora = []\r\n        self.player_xdir = 1\r\n        self.malimau = [(150, randint(0, 120), False)]\r\n        self.cherries = [(0, randint(0, 120), False)]\r\n        pyxel.run(self.update, self.draw)\r\n\r\n    def update(self):\r\n        if pyxel.btnp(pyxel.KEY_ESCAPE):\r\n            pyxel.quit()\r\n        self.update_player()\r\n        self.update_score()\r\n\r\n    # SOLN: Chaning name of function and "limau" to "fruit"\r\n    def is_fruit_hit_by_kombora(self, fruit_x, fruit_y):\r\n        for kom_x, kom_y, _ in self.makombora:\r\n            if kom_x >= fruit_x and kom_x <= fruit_x + 16 \\\r\n                    and kom_y >= fruit_y and kom_y <= fruit_y + 16:\r\n                return True\r\n        return False\r\n\r\n    def update_score(self):\r\n        self.malimau = [(x, y, True if abs(x - self.player_x) < 14 \\\r\n                                   and abs(y - self.player_y) < 14 else False) \\\r\n                        for x, y, hit in self.malimau]\r\n        self.score -= 5 * len(list(filter(lambda limau: limau[2], self.malimau)))\r\n        self.malimau = list(filter(lambda limau: not limau[2], self.malimau))\r\n        # SOLN: Changing name of function in call below\r\n        self.malimau = [(x, y, True if self.is_fruit_hit_by_kombora(x, y) \\\r\n                                    else False) for x, y, hit in self.malimau]\r\n        self.score += 10 * len(list(filter(lambda limau: limau[2], self.malimau)))\r\n        while len(self.malimau) < 1:\r\n            self.malimau.append((150, randint(0, 120), False))\r\n        self.cherries = [(x, y, True if abs(x - self.player_x) < 14 \\\r\n                                   and abs(y - self.player_y) < 14 else False) \\\r\n                        for x, y, hit in self.cherries]\r\n        self.score += 7 * len(list(filter(lambda cherry: cherry[2], self.cherries)))\r\n\r\n    def update_player(self):\r\n        if pyxel.btn(pyxel.KEY_W) or pyxel.btn(pyxel.KEY_UP):\r\n            self.player_y -= 2\r\n\r\n        if pyxel.btn(pyxel.KEY_A) or pyxel.btn(pyxel.KEY_LEFT):\r\n            self.player_x -= 2\r\n\r\n        if pyxel.btn(pyxel.KEY_S) or pyxel.btn(pyxel.KEY_DOWN):\r\n            self.player_y += 2\r\n\r\n        if pyxel.btn(pyxel.KEY_D) or pyxel.btn(pyxel.KEY_RIGHT):\r\n            self.player_x += 2\r\n\r\n        if pyxel.btnp(pyxel.KEY_SPACE):\r\n            self.makombora.append((self.player_x+8, \\\r\n                    self.player_y+8, self.player_xdir))\r\n\r\n        if pyxel.btnp(pyxel.KEY_F):\r\n            self.player_xdir *= -1\r\n\r\n    def draw(self):\r\n    \t# clear screen, paint sky blue\r\n        pyxel.cls(12)\r\n\r\n        # draw horizon + mountain + forest\r\n        pyxel.blt(0, 0, 0, 0, 120, 160, 120)\r\n\r\n        # draw clouds\r\n        offset = (pyxel.frame_count / 4) % 160\r\n        for i in range(2):\r\n          for x, y in self.clouds:\r\n            pyxel.blt(x + (i * 160) - offset, y, 0, 0, 32, 56, 8)\r\n\r\n        # draw malimau\r\n        for x, y, hit in self.malimau:\r\n            pyxel.blt(x, y, 0, 48, 0, 16, 16, 12)\r\n        self.malimau = [(x - 1, y, hit) if x > -16 and not hit \\\r\n                else (150, randint(0, 120), False) for x, y, hit in self.malimau]\r\n\r\n        # draw cherries\r\n        for x, y, hit in self.cherries:\r\n            pyxel.blt(x, y, 0, 32, 0, 16, 16, 12)\r\n        self.cherries = [(x + 1, y, hit) if x < 160 + 16 and not hit \\\r\n                else (0, randint(0, 120), False) for x, y, hit in self.cherries]\r\n\r\n        # draw girl\r\n        pyxel.blt(self.player_x, self.player_y, 0, 0, 0,\r\n                16*self.player_xdir, 16, 12)\r\n\r\n        # draw makombora\r\n        for x, y, _ in self.makombora:\r\n            pyxel.pix(x, y, 8)\r\n        self.makombora = [(x+1*direction, y, direction) \\\r\n                for x, y, direction in self.makombora if x < 160 and x > 0]\r\n\r\n        # draw score\r\n        pyxel.text(5, 4, f"SCORE: {self.score}", 1)\r\n        pyxel.text(4, 4, f"SCORE: {self.score}", 7)\r\nApp()	Before we can finish adding cherries, we need to refactor the function <code>is_limau_hit_by_kombora</code>. We can also use this function with cherries as well, but first you need to do the following:\r\n<br/><br/>\r\n<ul>\r\n  <li>Change the definition of the function to <code>is_fruit_hit_by_kombora(self, fruit_x, fruit_y)</code></li>\r\n  <li>Inside the fuction, change all occurrences of <code>limau_x</code> to <code>fruit_x</code> and <code>limau_y</code> to <code>fruit_y</code></li>\r\n  <li>Every place where you call the function, be sure to use the function's new name.</li>\r\n</ul>	# Note: PD_STATIC_IMAGES_PATH varies based on address\r\n# of server and thus is prepended to this value in views.py\r\nimport os, requests\r\nBASE_DIR = os.path.dirname(os.path.abspath(__file__))\r\nfiles_to_load = ['sprites2.png']\r\nfor fname in files_to_load:\r\n  fpath = os.path.join(BASE_DIR, fname)\r\n  if not os.path.exists(fpath):\r\n    with open(fpath, 'wb') as f:\r\n      f.write(requests.get(PD_STATIC_IMAGES_PATH+fname).content)
46	Cherries, Part 3 (Lose 20 Points if Hit by Kombora)	43	### IMPORTANT: Preamble required on server; omitted here. ####\r\n\r\nimport pyxel\r\nfrom random import randint\r\n\r\nclass App:\r\n    def __init__(self):\r\n        pyxel.init(160, 120, caption='Mchezo')\r\n\r\n        pyxel.image(0).load(0, 0, 'sprites2.png')\r\n\r\n        self.clouds = [(10, 10), (60, 20), (120, 5)]\r\n        self.player_x = 70\r\n        self.player_y = 50\r\n        self.score = 0\r\n        self.makombora = []\r\n        self.player_xdir = 1\r\n        self.malimau = [(150, randint(0, 120), False)]\r\n        self.cherries = [(0, randint(0, 120), False)]\r\n        pyxel.run(self.update, self.draw)\r\n\r\n    def update(self):\r\n        if pyxel.btnp(pyxel.KEY_ESCAPE):\r\n            pyxel.quit()\r\n        self.update_player()\r\n        self.update_score()\r\n\r\n    def is_fruit_hit_by_kombora(self, fruit_x, fruit_y):\r\n        for kom_x, kom_y, _ in self.makombora:\r\n            if kom_x >= fruit_x and kom_x <= fruit_x + 16 \\\r\n                    and kom_y >= fruit_y and kom_y <= fruit_y + 16:\r\n                return True\r\n        return False\r\n\r\n    def update_score(self):\r\n        self.malimau = [(x, y, True if abs(x - self.player_x) < 14 \\\r\n                                   and abs(y - self.player_y) < 14 else False) \\\r\n                        for x, y, hit in self.malimau]\r\n        self.score -= 5 * len(list(filter(lambda limau: limau[2], self.malimau)))\r\n        self.malimau = list(filter(lambda limau: not limau[2], self.malimau))\r\n        self.malimau = [(x, y, True if self.is_fruit_hit_by_kombora(x, y) \\\r\n                                    else False) for x, y, hit in self.malimau]\r\n        self.score += 10 * len(list(filter(lambda limau: limau[2], self.malimau)))\r\n        while len(self.malimau) < 1:\r\n            self.malimau.append((150, randint(0, 120), False))\r\n        self.cherries = [(x, y, True if abs(x - self.player_x) < 14 \\\r\n                                   and abs(y - self.player_y) < 14 else False) \\\r\n                        for x, y, hit in self.cherries]\r\n        self.score += 7 * len(list(filter(lambda cherry: cherry[2], self.cherries)))\r\n        # SOLN: Added this block\r\n        self.cherries = list(filter(lambda cherry: not cherry[2], self.cherries))\r\n        self.cherries = [(x, y, True if self.is_fruit_hit_by_kombora(x, y) \\\r\n                                    else False) for x, y, hit in self.cherries]\r\n        self.score -= 20 * len(list(filter(lambda cherry: cherry[2], self.cherries)))\r\n        while len(self.cherries) < 1:\r\n            self.cherries.append((0, randint(0, 120), False))\r\n\r\n    def update_player(self):\r\n        if pyxel.btn(pyxel.KEY_W) or pyxel.btn(pyxel.KEY_UP):\r\n            self.player_y -= 2\r\n\r\n        if pyxel.btn(pyxel.KEY_A) or pyxel.btn(pyxel.KEY_LEFT):\r\n            self.player_x -= 2\r\n\r\n        if pyxel.btn(pyxel.KEY_S) or pyxel.btn(pyxel.KEY_DOWN):\r\n            self.player_y += 2\r\n\r\n        if pyxel.btn(pyxel.KEY_D) or pyxel.btn(pyxel.KEY_RIGHT):\r\n            self.player_x += 2\r\n\r\n        if pyxel.btnp(pyxel.KEY_SPACE):\r\n            self.makombora.append((self.player_x+8, \\\r\n                    self.player_y+8, self.player_xdir))\r\n\r\n        if pyxel.btnp(pyxel.KEY_F):\r\n            self.player_xdir *= -1\r\n\r\n    def draw(self):\r\n    \t# clear screen, paint sky blue\r\n        pyxel.cls(12)\r\n\r\n        # draw horizon + mountain + forest\r\n        pyxel.blt(0, 0, 0, 0, 120, 160, 120)\r\n\r\n        # draw clouds\r\n        offset = (pyxel.frame_count / 4) % 160\r\n        for i in range(2):\r\n          for x, y in self.clouds:\r\n            pyxel.blt(x + (i * 160) - offset, y, 0, 0, 32, 56, 8)\r\n\r\n        # draw malimau\r\n        for x, y, hit in self.malimau:\r\n            pyxel.blt(x, y, 0, 48, 0, 16, 16, 12)\r\n        self.malimau = [(x - 1, y, hit) if x > -16 and not hit \\\r\n                else (150, randint(0, 120), False) for x, y, hit in self.malimau]\r\n\r\n        # draw cherries\r\n        for x, y, hit in self.cherries:\r\n            pyxel.blt(x, y, 0, 32, 0, 16, 16, 12)\r\n        self.cherries = [(x + 1, y, hit) if x < 160 + 16 and not hit \\\r\n                else (0, randint(0, 120), False) for x, y, hit in self.cherries]\r\n\r\n        # draw girl\r\n        pyxel.blt(self.player_x, self.player_y, 0, 0, 0,\r\n                16*self.player_xdir, 16, 12)\r\n\r\n        # draw makombora\r\n        for x, y, _ in self.makombora:\r\n            pyxel.pix(x, y, 8)\r\n        self.makombora = [(x+1*direction, y, direction) \\\r\n                for x, y, direction in self.makombora if x < 160 and x > 0]\r\n\r\n        # draw score\r\n        pyxel.text(5, 4, f"SCORE: {self.score}", 1)\r\n        pyxel.text(4, 4, f"SCORE: {self.score}", 7)\r\nApp()	If a kombora hits a cherry, the player should lose 20 points. Add code to the end of your <code>update_score(self)</code> function to do this. Use the code that you wrote for malimau to help you.	# Note: PD_STATIC_IMAGES_PATH varies based on address\r\n# of server and thus is prepended to this value in views.py\r\nimport os, requests\r\nBASE_DIR = os.path.dirname(os.path.abspath(__file__))\r\nfiles_to_load = ['sprites2.png']\r\nfor fname in files_to_load:\r\n  fpath = os.path.join(BASE_DIR, fname)\r\n  if not os.path.exists(fpath):\r\n    with open(fpath, 'wb') as f:\r\n      f.write(requests.get(PD_STATIC_IMAGES_PATH+fname).content)
