30	Finding Prime Numbers	A prime number is divisible only by 1 and itself. Here are all of the prime numbers less than 20:\r\n\r\n$$2, 3, 5, 7, 11, 13, 17, 19$$\r\n\r\nComplete the <i>is_prime</i> function so that it returns <i>True</i> if <i>namba</i> is prime and <i>False</i> if it is not.\r\n\r\n<br/><br/>\r\n\r\n<b>IMPORTANT:</b> If we want to divide two numbers <i>a</i> and <i>b</i>, we write <b>a / b</b> to get the quotient (example: 5 / 2 is equal to 2). But if we want <b>the remainder</b>, we write <b>a % b</b> (example: 5 % 2 is equal to 1). <b>If the remainder of <i>a % b</i> equals 0, <i>a</i> is divisible by <i>b</i>. If the remainder of <i>a % b</i> does not equal 0, <i>a</i> is not divisible by <i>b</i></b>. Use this to help you write an <b>if</b> block that checks <b>if namba is divisible by m.</b>	<block type="def" id="Gw2*|jG6H7Y5a1Ad.*Uw" x="63" y="23">\r\n    <field name="funcname">is_prime</field>\r\n    <field name="funcargs">namba</field>\r\n    <statement name="funcbody">\r\n      <block type="if" id="(W4D2,szhY~%!v5A_e%T">\r\n        <field name="expr">namba == 1</field>\r\n        <statement name="stmts">\r\n          <block type="return" id=";wgXBAJ=yXSgGNjk{X:D">\r\n            <field name="expr">False</field>\r\n          </block>\r\n        </statement>\r\n        <next>\r\n          <block type="for" id="6i]`yc^,UGZ|KyNEhNwG">\r\n            <field name="item">m</field>\r\n            <field name="seq">range(2, namba)</field>\r\n            <statement name="stmts">\r\n              <block type="if" id="eMsd[1:b#*%rbqnb`PuE">\r\n                <field name="expr"></field>\r\n                <statement name="stmts">\r\n                  <block type="return" id="fF?5uA)p{]/.lp)r)JF|">\r\n                    <field name="expr"></field>\r\n                  </block>\r\n                </statement>\r\n              </block>\r\n            </statement>\r\n            <next>\r\n              <block type="else" id="g`O23ZK%a%TKp;-%32=?">\r\n                <statement name="DO">\r\n                  <block type="return" id="LTDW8L-21BP!X7EpJU%k">\r\n                    <field name="expr"></field>\r\n                  </block>\r\n                </statement>\r\n              </block>\r\n            </next>\r\n          </block>\r\n        </next>\r\n      </block>\r\n    </statement>\r\n    <next>\r\n      <block type="for" id="%:luv!VIJ8Mf8!X6_z2x">\r\n        <field name="item">i</field>\r\n        <field name="seq">range(1, 20)</field>\r\n        <statement name="stmts">\r\n          <block type="if" id="J};P|NKZ92#:qApcQKnC">\r\n            <field name="expr">is_prime(i)</field>\r\n            <statement name="stmts">\r\n              <block type="varprint" id="0VMvnlb/dm1}9r@uoDPc">\r\n                <field name="var">"%d is prime." % i</field>\r\n              </block>\r\n            </statement>\r\n          </block>\r\n        </statement>\r\n      </block>\r\n    </next>\r\n  </block>	print("=== Testing your program... =============================")\r\ntest = 1\r\nprime_tests = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 109, 113, 127, 131, 137, 139, 149, 151, 157, 163, 167, 173, 179, 181, 191, 193, 197, 199]\r\ncomposite_tests = [4, 6, 8, 9, 10, 12, 14, 15, 16, 18, 20, 21, 22, 24, 25, 26, 27, 28, 30, 32, 33, 34, 35, 36, 38, 39, 40, 42, 44, 45, 46, 48, 49, 50, 51, 52, 54, 55, 56, 57, 58, 60, 62, 63, 64, 65, 66, 68, 69, 70, 72, 74, 75, 76, 77, 78, 80, 81, 82, 84]\r\ndef verifier_results():\r\n    print('NT_VERIFIER_RESULTS:%d:%d' % (test-1, len(prime_tests) + len(composite_tests)))\r\n    import sys\r\n    sys.exit(0)\r\nfor n in prime_tests:\r\n    print("TEST %d) Does is_prime(%d) return True?" % (test, n))\r\n    result = is_prime(n)\r\n    if result == True:\r\n        print("\\t-> CORRECT")\r\n        test += 1\r\n    else:\r\n        print("\\t-> INCORRECT. Your code returns %s. Fix your mistake and try again." % result)\r\n        verifier_results()\r\nfor n in composite_tests:\r\n    print("TEST %d) Does is_prime(%d) return False?" % (test, n))\r\n    result = is_prime(n)\r\n    if result == False:\r\n        print("\\t-> CORRECT")\r\n        test += 1\r\n    else:\r\n        print("\\t-> INCORRECT. Your code returns %s. Fix your mistake and try again." % result)\r\n        verifier_results()\r\nprint("ALL TESTS PASSED.")\r\nverifier_results()	9
