17	Heshima Iko?	The function <i>heshima_iko</i> takes a sentence and returns <i>True</i> if the sentence contains the word "shikamoo" or "Shikamoo". If the sentence doesn't contain "shikamoo" or "Shikamoo" it should return <i>False</i>.\r\n\r\n<br/><br/>\r\n\r\nFix the code so that it works correctly. You will need an <b>if</b> block, and you will need to check if each word is either "Shikamoo" (with a big "S") <b>or</b> "shikamoo" (with a small "s").	<block type="def" id=",p~cvS^e4?}2sX@`5Ez4" x="-274" y="47">\r\n    <field name="funcname">heshima_iko</field>\r\n    <field name="funcargs">sentensi</field>\r\n    <statement name="funcbody">\r\n      <block type="varstore" id="HUjGuIV+oK?3^OGq5v%w">\r\n        <field name="1">maneno</field>\r\n        <field name="2">sentensi.split(' ')</field>\r\n        <next>\r\n          <block type="for" id="j9)WwYO3cU}wgbB~qrx-">\r\n            <field name="item">neno</field>\r\n            <field name="seq">maneno</field>\r\n            <next>\r\n              <block type="return" id="H4PgE(hZZH(t5#@~A5,:">\r\n                <field name="expr">False</field>\r\n              </block>\r\n            </next>\r\n          </block>\r\n        </next>\r\n      </block>\r\n    </statement>\r\n    <next>\r\n      <block type="varprint" id="otUZgfmgzACn;G|l5NSD">\r\n        <field name="var">"Heshima? %s" % heshima_iko('Shikamoo mzee, habari za jioni?')</field>\r\n        <next>\r\n          <block type="varprint" id="4cR)a3CFDt,TA5D~YCHn">\r\n            <field name="var">"Heshima? %s" % heshima_iko('Mambo kaka.')</field>\r\n            <next>\r\n              <block type="varprint" id="H]PPQpg|R]H[O%GMb,Kf">\r\n                <field name="var">"Heshima? %s" % heshima_iko('Mwongo we.')</field>\r\n                <next>\r\n                  <block type="varprint" id=")_0hD:+{/0U].VTB@y*G">\r\n                    <field name="var">"Heshima? %s" % heshima_iko('Karibu bibi, shikamoo')</field>\r\n                    <next>\r\n                      <block type="varprint" id="gnY@h#[sO?BA`Z92~fJM">\r\n                        <field name="var">"Heshima? %s" % heshima_iko('Shikamoo kaka mkubwa.')</field>\r\n                      </block>\r\n                    </next>\r\n                  </block>\r\n                </next>\r\n              </block>\r\n            </next>\r\n          </block>\r\n        </next>\r\n      </block>\r\n    </next>\r\n  </block>	print("=== Testing your program... =============================")\r\ntest = 1\r\ntests = [('Shikamoo mzee, habari za jioni?', True), ('Mambo kaka.', False), ('Mwongo we.', False), ('Karibu bibi, shikamoo', True), ('Shikamoo kaka mkubwa.', True)]\r\ndef verifier_results():\r\n    print('NT_VERIFIER_RESULTS:%d:%d' % (test-1, len(tests)))\r\n    import sys\r\n    sys.exit(0)\r\nfor (s, answer) in tests:\r\n    print("TEST %d) Does heshima_iko('%s') return %s?" % (test, s, answer))\r\n    result = heshima_iko(s)\r\n    if result == answer:\r\n        print("\\t-> CORRECT")\r\n        test += 1\r\n    else:\r\n        print("\\t-> INCORRECT. Your code returns %s. Fix your mistake and try again." % result)\r\n        verifier_results()\r\nprint("ALL TESTS PASSED.")\r\nverifier_results()	6
18	Area of a Square	A square has four equal sides. Multiplying any two sides together gives the area of the square.\r\n\r\n<br/><br/>\r\n\r\nComplete the <i>area_square</i> function so that it correctly calculates the area of any square given to it.	<block type="def" id="m]ky_!Hb(sS(5:?kjo6F" x="69" y="34">\r\n    <field name="funcname">area_square</field>\r\n    <field name="funcargs">side1, side2, side3, side4</field>\r\n    <statement name="funcbody">\r\n      <block type="return" id="5P#J,EB+,0}O7z-LF9vB">\r\n        <field name="expr">0</field>\r\n      </block>\r\n    </statement>\r\n    <next>\r\n      <block type="varprint" id="81{%.jGrOXqE)zG5Q:or">\r\n        <field name="var">"Area: %d" % area_square(0, 0, 0, 0)</field>\r\n        <next>\r\n          <block type="varprint" id="N~}_(Wh7@o48fl6Ife^(">\r\n            <field name="var">"Area: %d" % area_square(4, 4, 4, 4)</field>\r\n            <next>\r\n              <block type="varprint" id="fFHj_iaE#H[Hecw[EJ*P">\r\n                <field name="var">"Area: %d" % area_square(10, 10, 10, 10)</field>\r\n                <next>\r\n                  <block type="varprint" id="Ny%WL,S4@[6?h6qo(p@1">\r\n                    <field name="var">"Area: %d" % area_square(8, 8, 8, 8)</field>\r\n                    <next>\r\n                      <block type="varprint" id="T[KY-dg}t:_0UgfIqhRI">\r\n                        <field name="var">"Area: %d" % area_square(1000, 1000, 1000, 1000)</field>\r\n                      </block>\r\n                    </next>\r\n                  </block>\r\n                </next>\r\n              </block>\r\n            </next>\r\n          </block>\r\n        </next>\r\n      </block>\r\n    </next>\r\n  </block>	print("=== Testing your program... =============================")\r\ntest = 1\r\ntests = [(0, 0), (4, 16), (10, 100), (8, 64), (1000, 1000000), (5, 25), (6, 36), (1, 1)]\r\ndef verifier_results():\r\n    print('NT_VERIFIER_RESULTS:%d:%d' % (test-1, len(tests)))\r\n    import sys\r\n    sys.exit(0)\r\nfor (l, answer) in tests:\r\n    print("TEST %d) Does area_square(%d,%d,%d,%d) return %d?" % (test, l, l, l, l, answer))\r\n    result = area_square(l, l, l, l)\r\n    if result == answer:\r\n        print("\\t-> CORRECT")\r\n        test += 1\r\n    else:\r\n        print("\\t-> INCORRECT. Your code returns %s. Fix your mistake and try again." % result)\r\n        verifier_results()\r\nprint("ALL TESTS PASSED.")\r\nverifier_results()	6
20	Perimeter of a Square	A square has four equal sides. The perimeter is calculated by adding all four sides together, or by multiplying one side by four.\r\n\r\n<br/><br/>\r\n\r\nChange this code so that it correctly returns the perimeter of any square given to it.	<block type="def" id="m]ky_!Hb(sS(5:?kjo6F" x="69" y="34">\r\n    <field name="funcname">perimeter_square</field>\r\n    <field name="funcargs">side1, side2, side3, side4</field>\r\n    <statement name="funcbody">\r\n      <block type="return" id="5P#J,EB+,0}O7z-LF9vB">\r\n        <field name="expr">0</field>\r\n      </block>\r\n    </statement>\r\n    <next>\r\n      <block type="varprint" id="81{%.jGrOXqE)zG5Q:or">\r\n        <field name="var">"Perimeter: %d" % perimeter_square(0, 0, 0, 0)</field>\r\n        <next>\r\n          <block type="varprint" id="N~}_(Wh7@o48fl6Ife^(">\r\n            <field name="var">"Perimeter: %d" % perimeter_square(4, 4, 4, 4)</field>\r\n            <next>\r\n              <block type="varprint" id="fFHj_iaE#H[Hecw[EJ*P">\r\n                <field name="var">"Perimeter: %d" % perimeter_square(10, 10, 10, 10)</field>\r\n                <next>\r\n                  <block type="varprint" id="Ny%WL,S4@[6?h6qo(p@1">\r\n                    <field name="var">"Perimeter: %d" % perimeter_square(8, 8, 8, 8)</field>\r\n                    <next>\r\n                      <block type="varprint" id="T[KY-dg}t:_0UgfIqhRI">\r\n                        <field name="var">"Perimeter: %d" % perimeter_square(1000, 1000, 1000, 1000)</field>\r\n                      </block>\r\n                    </next>\r\n                  </block>\r\n                </next>\r\n              </block>\r\n            </next>\r\n          </block>\r\n        </next>\r\n      </block>\r\n    </next>\r\n  </block>	print("=== Testing your program... =============================")\r\ntest = 1\r\ntests = [(0, 0), (4, 16), (10, 40), (8, 32), (1000, 4000), (5, 20), (6, 24), (1, 4)]\r\ndef verifier_results():\r\n    print('NT_VERIFIER_RESULTS:%d:%d' % (test-1, len(tests)))\r\n    import sys\r\n    sys.exit(0)\r\nfor (l, answer) in tests:\r\n    print("TEST %d) Does perimeter_square(%d,%d,%d,%d) return %d?" % (test, l, l, l, l, answer))\r\n    result = perimeter_square(l, l, l, l)\r\n    if result == answer:\r\n        print("\\t-> CORRECT")\r\n        test += 1\r\n    else:\r\n        print("\\t-> INCORRECT. Your code returns %s. Fix your mistake and try again." % result)\r\n        verifier_results()\r\nprint("ALL TESTS PASSED.")\r\nverifier_results()	6
21	Square All Numbers in a List	In this code, the function <i>square_all_numbers</i> is supposed to take a list of numbers and return a list containing the squares of those numbers. For example:\r\n\r\n$$square\\_all\\_numbers([1, 2, 3, 4, 5])$$\r\n\r\nshould return:\r\n\r\n$$[1, 4, 9, 16, 25]$$\r\n\r\nbut this code just gives us the original list back. Fix the problem to solve this challenge.	<block type="def" id="mfU|l0aB--mNehd8eE#P" x="69" y="83">\r\n    <field name="funcname">square_all_numbers</field>\r\n    <field name="funcargs">list</field>\r\n    <statement name="funcbody">\r\n      <block type="return" id="{Ie|i+XScsEMsTzD0*wX">\r\n        <field name="expr">[namba ** 1 for namba in list]</field>\r\n      </block>\r\n    </statement>\r\n    <next>\r\n      <block type="varprint" id="4XJfR{alFsq@]{j:kR)o">\r\n        <field name="var">"Squared: %s" % square_all_numbers([1, 1, 1])</field>\r\n        <next>\r\n          <block type="varprint" id="E6)7u^Jw=toZFn`X0)MR">\r\n            <field name="var">"Squared: %s" % square_all_numbers([1, 2, 3])</field>\r\n            <next>\r\n              <block type="varprint" id="B`d+_o[T5=Exj#JklV,b">\r\n                <field name="var">"Squared: %s" % square_all_numbers([1, 2, 3, 4, 5])</field>\r\n                <next>\r\n                  <block type="varprint" id="Z;:,Fsrq}%0BEvk(Upgc">\r\n                    <field name="var">"Squared: %s" % square_all_numbers([100, 98, 32, 24, 50, 75])</field>\r\n                  </block>\r\n                </next>\r\n              </block>\r\n            </next>\r\n          </block>\r\n        </next>\r\n      </block>\r\n    </next>\r\n  </block>	print("=== Testing your program... =============================")\r\ntest = 1\r\ntests = [([1,1,1], [1,1,1]), ([1,2,3], [1,4,9]), ([1,2,3,4,5], [1,4,9,16,25]), ([100, 98, 32, 24, 50, 75], [10000, 9604, 1024, 576, 2500, 5625])]\r\ndef verifier_results():\r\n    print('NT_VERIFIER_RESULTS:%d:%d' % (test-1, len(tests)))\r\n    import sys\r\n    sys.exit(0)\r\nfor (l, answer) in tests:\r\n    print("TEST %d) Does square_all_numbers(%s) return %s?" % (test, l, answer))\r\n    result = square_all_numbers(l)\r\n    if result == answer:\r\n        print("\\t-> CORRECT")\r\n        test += 1\r\n    else:\r\n        print("\\t-> INCORRECT. Your code returns %s. Fix your mistake and try again." % result)\r\n        verifier_results()\r\nprint("ALL TESTS PASSED.")\r\nverifier_results()	6
19	Area of a Triangle	The area of a triangle is calculated as:\r\n\r\n$$\\frac{1}{2} \\bullet base \\bullet height$$\r\n\r\nComplete the <i>area_triangle</i> function so that it correctly calculates the area of any triangle given to it.	<block type="def" id="m]ky_!Hb(sS(5:?kjo6F" x="69" y="34">\r\n    <field name="funcname">area_triangle</field>\r\n    <field name="funcargs">base, height</field>\r\n    <statement name="funcbody">\r\n      <block type="return" id="5P#J,EB+,0}O7z-LF9vB">\r\n        <field name="expr">0</field>\r\n      </block>\r\n    </statement>\r\n    <next>\r\n      <block type="varprint" id="81{%.jGrOXqE)zG5Q:or">\r\n        <field name="var">"Area: %d" % area_triangle(7, 24)</field>\r\n        <next>\r\n          <block type="varprint" id="N~}_(Wh7@o48fl6Ife^(">\r\n            <field name="var">"Area: %d" % area_triangle(5, 12)</field>\r\n            <next>\r\n              <block type="varprint" id="fFHj_iaE#H[Hecw[EJ*P">\r\n                <field name="var">"Area: %d" % area_triangle(55, 48)</field>\r\n                <next>\r\n                  <block type="varprint" id="Ny%WL,S4@[6?h6qo(p@1">\r\n                    <field name="var">"Area: %d" % area_triangle(45, 28)</field>\r\n                    <next>\r\n                      <block type="varprint" id="T[KY-dg}t:_0UgfIqhRI">\r\n                        <field name="var">"Area: %d" % area_triangle(39, 80)</field>\r\n                      </block>\r\n                    </next>\r\n                  </block>\r\n                </next>\r\n              </block>\r\n            </next>\r\n          </block>\r\n        </next>\r\n      </block>\r\n    </next>\r\n  </block>	print("=== Testing your program... =============================")\r\ntest = 1\r\ntests = [(7, 24, 84), (5, 12, 30), (55, 48, 1320), (45, 28, 630), (39, 80, 1560)]\r\ndef verifier_results():\r\n    print('NT_VERIFIER_RESULTS:%d:%d' % (test-1, len(tests)))\r\n    import sys\r\n    sys.exit(0)\r\nfor (b, h, answer) in tests:\r\n    print("TEST %d) Does area_triangle(%d,%d) return %d?" % (test, b, h, answer))\r\n    result = area_triangle(b, h)\r\n    if result == answer:\r\n        print("\\t-> CORRECT")\r\n        test += 1\r\n    else:\r\n        print("\\t-> INCORRECT. Your code returns %d. Fix your mistake and try again." % result)\r\n        verifier_results()\r\nprint("ALL TESTS PASSED.")\r\nverifier_results()	6
22	Perimeter of a Triangle	The perimeter of a triangle is calculated by adding all three sides of the triangle together.\r\n\r\n<br/><br/>\r\n\r\nChange the <i>perimeter_triangle</i> function to correctly calculate the perimeter of any triangle given to it.	<block type="def" id="m]ky_!Hb(sS(5:?kjo6F" x="69" y="34">\r\n    <field name="funcname">perimeter_triangle</field>\r\n    <field name="funcargs">side1, side2, side3</field>\r\n    <statement name="funcbody">\r\n      <block type="return" id="5P#J,EB+,0}O7z-LF9vB">\r\n        <field name="expr">0</field>\r\n      </block>\r\n    </statement>\r\n    <next>\r\n      <block type="varprint" id="81{%.jGrOXqE)zG5Q:or">\r\n        <field name="var">"Perimeter: %d" % perimeter_triangle(7, 24, 25)</field>\r\n        <next>\r\n          <block type="varprint" id="N~}_(Wh7@o48fl6Ife^(">\r\n            <field name="var">"Perimeter: %d" % perimeter_triangle(5, 12, 13)</field>\r\n            <next>\r\n              <block type="varprint" id="fFHj_iaE#H[Hecw[EJ*P">\r\n                <field name="var">"Perimeter: %d" % perimeter_triangle(55, 48, 73)</field>\r\n                <next>\r\n                  <block type="varprint" id="Ny%WL,S4@[6?h6qo(p@1">\r\n                    <field name="var">"Perimeter: %d" % perimeter_triangle(45, 28, 53)</field>\r\n                    <next>\r\n                      <block type="varprint" id="T[KY-dg}t:_0UgfIqhRI">\r\n                        <field name="var">"Perimeter: %d" % perimeter_triangle(39, 80, 89)</field>\r\n                      </block>\r\n                    </next>\r\n                  </block>\r\n                </next>\r\n              </block>\r\n            </next>\r\n          </block>\r\n        </next>\r\n      </block>\r\n    </next>\r\n  </block>	print("=== Testing your program... =============================")\r\ntest = 1\r\ntests = [(7, 24, 25, 56),  (5, 12, 13, 30), (55, 48, 73, 176), (45, 28, 53, 126), (39, 80, 89, 208)]\r\ndef verifier_results():\r\n    print('NT_VERIFIER_RESULTS:%d:%d' % (test-1, len(tests)))\r\n    import sys\r\n    sys.exit(0)\r\nfor (s1, s2, s3, answer) in tests:\r\n    print("TEST %d) Does perimeter_triangle(%d,%d,%d) return %d?" % (test, s1, s2, s3, answer))\r\n    result = perimeter_triangle(s1, s2, s3)\r\n    if result == answer:\r\n        print("\\t-> CORRECT")\r\n        test += 1\r\n    else:\r\n        print("\\t-> INCORRECT. Your code returns %s. Fix your mistake and try again." % result)\r\n        verifier_results()\r\nprint("ALL TESTS PASSED.")\r\nverifier_results()	6
