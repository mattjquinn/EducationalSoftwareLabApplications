29	Celsius to Fahrenheit	The formula to convert a temperature in Celsius <i>T<sub>C</sub></i> to its Fahrenheit equivalent <i>T<sub>F</sub></i> is:\r\n\r\n$$T_F = T_C \\bullet \\frac{9}{5} + 32$$\r\n\r\nComplete the function <i>celsius_to_fahrenheit</i> so that it returns the Fahrenheit temperature equivalent to the <i>celsius</i> temperature given to it.	<block type="def" id="UyZK)MfHBy47Go--e}gm" x="93" y="50">\r\n    <field name="funcname">celsius_to_fahrenheit</field>\r\n    <field name="funcargs">celsius</field>\r\n    <next>\r\n      <block type="varprint" id=")@iUYBxa)h.nN0GzTF,y">\r\n        <field name="var">"Fahrenheit: %d" % celsius_to_fahrenheit(0)</field>\r\n        <next>\r\n          <block type="varprint" id="Rjz,Q(vTSQ2|C3M;g@;4">\r\n            <field name="var">"Fahrenheit: %d" % celsius_to_fahrenheit(-5)</field>\r\n            <next>\r\n              <block type="varprint" id="dSb:T*xm7GHYa#xjeW6V">\r\n                <field name="var">"Fahrenheit: %d" % celsius_to_fahrenheit(200)</field>\r\n                <next>\r\n                  <block type="varprint" id="=Jd-,]uHZ2F(-WPbtaH;">\r\n                    <field name="var">"Fahrenheit: %d" % celsius_to_fahrenheit(7)</field>\r\n                  </block>\r\n                </next>\r\n              </block>\r\n            </next>\r\n          </block>\r\n        </next>\r\n      </block>\r\n    </next>\r\n  </block>	print("=== Testing your program... =============================")\r\ntest = 1\r\ntests = [(0, 32.0), (-5, 23.0), (200, 392.0), (7, 44.6), (-40, -40.0), (-10, 14.0)]\r\ndef verifier_results():\r\n    print('NT_VERIFIER_RESULTS:%d:%d' % (test-1, len(tests)))\r\n    import sys\r\n    sys.exit(0)\r\nfor (tempc, answer) in tests:\r\n    print("TEST %d) Does celsius_to_fahrenheit(%d) return %s?" % (test, tempc, answer))\r\n    result = celsius_to_fahrenheit(tempc)\r\n    if ("%.2f" % result) == ("%.2f" % answer):\r\n        print("\\t-> CORRECT")\r\n        test += 1\r\n    else:\r\n        print("\\t-> INCORRECT. Your code returns %s. Fix your mistake and try again." % result)\r\n        verifier_results()\r\nprint("ALL TESTS PASSED.")\r\nverifier_results()	8
28	Fahrenheit to Celsius	The formula to convert a temperature in Fahrenheit <i>T<sub>F</sub></i> to its Celsius equivalent <i>T<sub>C</sub></i> is:\r\n\r\n$$T_C = (T_F - 32) \\bullet \\frac{5}{9}$$\r\n\r\nComplete the function <i>fahrenheit_to_celsius</i> so that it returns the Celsius temperature equivalent to the <i>fahrenheit</i> temperature given to it.	<block type="def" id="UyZK)MfHBy47Go--e}gm" x="93" y="50">\r\n    <field name="funcname">fahrenheit_to_celsius</field>\r\n    <field name="funcargs">fahrenheit</field>\r\n    <next>\r\n      <block type="varprint" id=")@iUYBxa)h.nN0GzTF,y">\r\n        <field name="var">"Celsius: %d" % fahrenheit_to_celsius(0)</field>\r\n        <next>\r\n          <block type="varprint" id="Rjz,Q(vTSQ2|C3M;g@;4">\r\n            <field name="var">"Celsius: %d" % fahrenheit_to_celsius(-459.67)</field>\r\n            <next>\r\n              <block type="varprint" id="dSb:T*xm7GHYa#xjeW6V">\r\n                <field name="var">"Celsius: %d" % fahrenheit_to_celsius(170)</field>\r\n                <next>\r\n                  <block type="varprint" id="=Jd-,]uHZ2F(-WPbtaH;">\r\n                    <field name="var">"Celsius: %d" % fahrenheit_to_celsius(1000)</field>\r\n                  </block>\r\n                </next>\r\n              </block>\r\n            </next>\r\n          </block>\r\n        </next>\r\n      </block>\r\n    </next>\r\n  </block>	print("=== Testing your program... =============================")\r\ntest = 1\r\ntests = [(0, -17.78), (-459.67, -273.15), (170, 76.67), (1000, 537.78), (90, 32.22), (-50, -45.56)]\r\ndef verifier_results():\r\n    print('NT_VERIFIER_RESULTS:%d:%d' % (test-1, len(tests)))\r\n    import sys\r\n    sys.exit(0)\r\nfor (tempf, answer) in tests:\r\n    print("TEST %d) Does fahrenheit_to_celsius(%d) return %s?" % (test, tempf, answer))\r\n    result = fahrenheit_to_celsius(tempf)\r\n    if ("%.2f" % result) == ("%.2f" % answer):\r\n        print("\\t-> CORRECT")\r\n        test += 1\r\n    else:\r\n        print("\\t-> INCORRECT. Your code returns %s. Fix your mistake and try again." % result)\r\n        verifier_results()\r\nprint("ALL TESTS PASSED.")\r\nverifier_results()	8
23	Quadratic Formula	The quadratic formula gives us the two roots of any quadratic equation. One root is calculated using:\r\n\r\n$${-b + \\sqrt{b^2-4ac} \\over 2a}$$\r\n\r\nand another root is calculated using:\r\n\r\n$${-b - \\sqrt{b^2-4ac} \\over 2a}$$\r\n\r\nFill in the <i>quadratic_formula</i> function so that it correctly calculates and returns both roots for any quadratic equation consisting of <i>a</i>, <i>b</i>, and <i>c</i>.	<block type="import" id="%)NI@v;!%Dd2WcM[W-QC" x="-169" y="28">\r\n    <field name="libname">math</field>\r\n    <next>\r\n      <block type="def" id="n:W5L~K|`VrLr-UF:#*a">\r\n        <field name="funcname">quadratic_formula</field>\r\n        <field name="funcargs">a, b, c</field>\r\n        <statement name="funcbody">\r\n          <block type="varstore" id=":[fz]#t(tlQP}q:FuTjS">\r\n            <field name="1">root1</field>\r\n            <field name="2">0</field>\r\n            <next>\r\n              <block type="varstore" id="j6^8g6^jzbl~g]OZIUoH">\r\n                <field name="1">root2</field>\r\n                <field name="2">0</field>\r\n                <next>\r\n                  <block type="return" id="R,Hln6OW3H[Ss?d}gTIY">\r\n                    <field name="expr">(root1, root2)</field>\r\n                  </block>\r\n                </next>\r\n              </block>\r\n            </next>\r\n          </block>\r\n        </statement>\r\n        <next>\r\n              <block type="varprint" id="8B%zP3KuRZ@e?~LUHooL">\r\n                <field name="var">quadratic_formula(1, 4, -21)</field>\r\n                <next>\r\n                  <block type="varprint" id="RKq`5:8sh:K[-}W?g*CQ">\r\n                    <field name="var">quadratic_formula(1, 3, -4)</field>\r\n                    <next>\r\n                      <block type="varprint" id="eMq?*n?-W6g;)+3xG|Wb">\r\n                        <field name="var">quadratic_formula(3, 6, -10)</field>\r\n                      </block>\r\n                    </next>\r\n                  </block>\r\n                </next>\r\n              </block>\r\n        </next>\r\n      </block>\r\n    </next>\r\n  </block>	print("=== Testing your program... =============================")\r\ntest = 1\r\ntests = [(1, 4, -21, 3.00, -7.00), (1, 3, -4, 1.00, -4.00), (3, 6, -10, -3.08, 1.08)]\r\ndef verifier_results():\r\n    print('NT_VERIFIER_RESULTS:%d:%d' % (test-1, len(tests)))\r\n    import sys\r\n    sys.exit(0)\r\nfor (a, b, c, r1, r2) in tests:\r\n    r1 = "%.2f" % r1\r\n    r2 = "%.2f" % r2\r\n    print("TEST %d) Does quadratic_formula(%d,%d,%d) return (%s, %s)?" % (test, a, b, c, r1, r2))\r\n    result = quadratic_formula(a, b, c)\r\n    result = ("%.2f" % result[0], "%.2f" % result[1])\r\n    if (result[0] == r1 and result[1] == r2) or (result[1] == r1 and result[0] == r2):\r\n        print("\\t-> CORRECT")\r\n        test += 1\r\n    else:\r\n        print("\\t-> INCORRECT. Your code returns (%s, %s). Fix your mistake and try again." % result)\r\n        verifier_results()\r\nprint("ALL TESTS PASSED.")\r\nverifier_results()	8
