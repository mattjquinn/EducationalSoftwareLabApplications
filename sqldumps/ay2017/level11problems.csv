33	Motion Equation in Physics	If we have a moving object and want to know where it will be after some time, we can use this physics equation:\r\n\r\n$$s = s_0 + v_0t + \\frac{1}{2}at^2$$\r\n\r\nwhere <b>s</b> is the position where the object will be, <b>s<sub>0</sub></b> is the position where the object started, <b>v<sub>0</sub></b> is the initial velocity of the object, <b>a</b> is the object's acceleration, and <b>t</b> is the amount of time that has passed since the object started moving.\r\n\r\n<br/><br/>\r\n\r\nComplete the Python function <i>position_equation</i> to calculate any object's position <b>s</b> using <b>s0, v0, a,</b> and <b>t</b>.	<block type="def" id="g{J=FEAq?Fw[#KI#f0Qs" x="7" y="50">\r\n    <field name="funcname">motion_equation</field>\r\n    <field name="funcargs">s0, v0, a, t</field>\r\n    <next>\r\n      <block type="varprint" id="ia43Ba/Jca`huOx!g[C-">\r\n        <field name="var">motion_equation(0, 0, 0, 0)</field>\r\n        <next>\r\n          <block type="varprint" id="||b?J5g5bzf+)RXTM[4[">\r\n            <field name="var">motion_equation(0, 10, 4, 8)</field>\r\n            <next>\r\n              <block type="varprint" id="q)T/:Qq,QhPvzo-vZkmm">\r\n                <field name="var">motion_equation(20, 4, -2, 10)</field>\r\n                <next>\r\n                  <block type="varprint" id="3p62W)7x:;M:bIsPTMyE">\r\n                    <field name="var">motion_equation(-10, 30, 5, 40)</field>\r\n                  </block>\r\n                </next>\r\n              </block>\r\n            </next>\r\n          </block>\r\n        </next>\r\n      </block>\r\n    </next>\r\n  </block>	print("=== Testing your program... =============================")\r\ntest = 1\r\ntests = [(0, 0, 0, 0, 0), (0, 10, 4, 8, 208), (20, 4, -2, 10, -40), (-10, 30, 5, 40, 5190)]\r\ndef verifier_results():\r\n    print('NT_VERIFIER_RESULTS:%d:%d' % (test-1, len(tests)))\r\n    import sys\r\n    sys.exit(0)\r\nfor (s0, v0, a, t, answer) in tests:\r\n    print("TEST %d) Does motion_equation(%d, %d, %d, %d) return %d?" % (test, s0, v0, a, t, answer))\r\n    result = motion_equation(s0, v0, a, t)\r\n    if ("%.2f" % result) == ("%.2f" % answer):\r\n        print("\\t-> CORRECT")\r\n        test += 1\r\n    else:\r\n        print("\\t-> INCORRECT. Your code returns %s. Fix your mistake and try again." % result)\r\n        verifier_results()\r\nprint("ALL TESTS PASSED.")\r\nverifier_results()	11
35	The Intensity Level of Light	If we want to know the intensity level of light, we can use this physics equation:\r\n\r\n$$L_I = 10 \\log\\left(\\frac{I}{I_0}\\right)$$\r\n\r\nwhere <b>L<sub>I</sub></b> is the intensity level, <b>I</b> is the intensity of the light, and <b>I<sub>0</sub></b> is the intensity of a reference signal.\r\n\r\nComplete the Python function <i>intensity_level</i> to correctly calculate and return the intensity level of any light given to it. You can use Python's <b>math.log()</b> function to calculate the logarithm of any number you give it.	<block type="import" id="=OxOf`cZxX8Ml;W1T;3(" x="31" y="-4">\r\n    <field name="libname">math</field>\r\n    <next>\r\n      <block type="def" id="3od`QJX+)oY%yn{^gY!_">\r\n        <field name="funcname">intensity_level</field>\r\n        <field name="funcargs">i, i0</field>\r\n        <next>\r\n          <block type="varprint" id="ZY!ctbo!)Le?m-~.n+-0">\r\n            <field name="var">intensity_level(1, 5)</field>\r\n            <next>\r\n              <block type="varprint" id="qTLZ-?{/%o%skXq:{3hL">\r\n                <field name="var">intensity_level(1, 1)</field>\r\n                <next>\r\n                  <block type="varprint" id="~zYlkLtz7@?bnIvaBv1X">\r\n                    <field name="var">intensity_level(4, 8)</field>\r\n                    <next>\r\n                      <block type="varprint" id="+1D,(^%?f|c3N^D~odi~">\r\n                        <field name="var">intensity_level(8, 14)</field>\r\n                        <next>\r\n                          <block type="varprint" id="i~:*Vy%?RMbNUP-eTHHz">\r\n                            <field name="var">intensity_level(3, 44)</field>\r\n                          </block>\r\n                        </next>\r\n                      </block>\r\n                    </next>\r\n                  </block>\r\n                </next>\r\n              </block>\r\n            </next>\r\n          </block>\r\n        </next>\r\n      </block>\r\n    </next>\r\n  </block>	print("=== Testing your program... =============================")\r\ntest = 1\r\ntests = [(1, 5, '-16.09'), (1, 1, '0.00'), (4, 8, '-6.93'), (8, 14, '-5.60'), (3, 44, '-26.86')]\r\ndef verifier_results():\r\n    print('NT_VERIFIER_RESULTS:%d:%d' % (test-1, len(tests)))\r\n    import sys\r\n    sys.exit(0)\r\nfor (i, i0, answer) in tests:\r\n    print("TEST %d) Does intensity_level(%d, %d) return %s?" % (test, i, i0, answer))\r\n    result = "%.2f" % intensity_level(i, i0)\r\n    if result == answer:\r\n        print("\\t-> CORRECT")\r\n        test += 1\r\n    else:\r\n        print("\\t-> INCORRECT. Your code returns %s. Fix your mistake and try again." % result)\r\n        verifier_results()\r\nprint("ALL TESTS PASSED.")\r\nverifier_results()	11
36	The Pressure Level of Light	If we want to know the pressure level of light, we can use this physics equation:\r\n\r\n$$L_P = 20 \\log\\left(\\frac{\\Delta P}{\\Delta P_0}\\right)$$\r\n\r\nwhere <b>L<sub>P</sub></b> is the pressure level, <b>&Delta;P</b> is the change in pressure, and <b>&Delta;P<sub>0</sub></b> is the change in pressure of a reference signal.\r\n\r\nComplete the Python function <i>pressure_level</i> to correctly calculate and return the pressure level of any light given to it. You can use Python's <b>math.log()</b> function to calculate the logarithm of any number you give it.	<block type="import" id="=OxOf`cZxX8Ml;W1T;3(" x="31" y="-4">\r\n    <field name="libname">math</field>\r\n    <next>\r\n      <block type="def" id="3od`QJX+)oY%yn{^gY!_">\r\n        <field name="funcname">pressure_level</field>\r\n        <field name="funcargs">delta_P, delta_P0</field>\r\n        <next>\r\n          <block type="varprint" id="ZY!ctbo!)Le?m-~.n+-0">\r\n            <field name="var">pressure_level(1, 5)</field>\r\n            <next>\r\n              <block type="varprint" id="qTLZ-?{/%o%skXq:{3hL">\r\n                <field name="var">pressure_level(1, 1)</field>\r\n                <next>\r\n                  <block type="varprint" id="~zYlkLtz7@?bnIvaBv1X">\r\n                    <field name="var">pressure_level(4, 8)</field>\r\n                    <next>\r\n                      <block type="varprint" id="+1D,(^%?f|c3N^D~odi~">\r\n                        <field name="var">pressure_level(8, 14)</field>\r\n                        <next>\r\n                          <block type="varprint" id="i~:*Vy%?RMbNUP-eTHHz">\r\n                            <field name="var">pressure_level(3, 44)</field>\r\n                          </block>\r\n                        </next>\r\n                      </block>\r\n                    </next>\r\n                  </block>\r\n                </next>\r\n              </block>\r\n            </next>\r\n          </block>\r\n        </next>\r\n      </block>\r\n    </next>\r\n  </block>	print("=== Testing your program... =============================")\r\ntest = 1\r\ntests = [(1, 5, '-32.19'), (1, 1, '0.00'), (4, 8, '-13.86'), (8, 14, '-11.19'), (3, 44, '-53.71')]\r\ndef verifier_results():\r\n    print('NT_VERIFIER_RESULTS:%d:%d' % (test-1, len(tests)))\r\n    import sys\r\n    sys.exit(0)\r\nfor (dp, dp0, answer) in tests:\r\n    print("TEST %d) Does pressure_level(%d, %d) return %s?" % (test, dp, dp0, answer))\r\n    result = "%.2f" % pressure_level(dp, dp0)\r\n    if result == answer:\r\n        print("\\t-> CORRECT")\r\n        test += 1\r\n    else:\r\n        print("\\t-> INCORRECT. Your code returns %s. Fix your mistake and try again." % result)\r\n        verifier_results()\r\nprint("ALL TESTS PASSED.")\r\nverifier_results()	11
37	Magnetic Force on a Moving Charged Particle	To calculate the magnetic force on a moving charged particle, we use this physics equation:\r\n\r\n$$F = qvB \\sin \\theta$$\r\n\r\nwhere <b>F</b> is the force, <b>q</b> is the charge, <b>v</b> is the velocity, <b>B</b> is the magnetic field, and <b>&theta;</b> is the angle between the velocity and the magnetic field.\r\n\r\n<br/><br/>\r\n\r\nComplete the Python function <i>magnetic_force</i> to correctly calculate and return the magnetic force on any moving charged particle given to it. You can use Python's <b>math.sin()</b> function to calculate the sine of any number given to it.	<block type="import" id="=OxOf`cZxX8Ml;W1T;3(" x="-99" y="16">\r\n    <field name="libname">math</field>\r\n    <next>\r\n      <block type="def" id="3od`QJX+)oY%yn{^gY!_">\r\n        <field name="funcname">magnetic_force</field>\r\n        <field name="funcargs">charge, velocity, magnetic_field, angle</field>\r\n        <next>\r\n          <block type="varprint" id="ZY!ctbo!)Le?m-~.n+-0">\r\n            <field name="var">magnetic_force(0.4, 10.3, 1.2, 40.4)</field>\r\n            <next>\r\n              <block type="varprint" id="qTLZ-?{/%o%skXq:{3hL">\r\n                <field name="var">magnetic_force(1.4, 4.3, 5.5, -90.0)</field>\r\n                <next>\r\n                  <block type="varprint" id="~zYlkLtz7@?bnIvaBv1X">\r\n                    <field name="var">magnetic_force(8.3, 1.0, 6.7, 270.0)</field>\r\n                  </block>\r\n                </next>\r\n              </block>\r\n            </next>\r\n          </block>\r\n        </next>\r\n      </block>\r\n    </next>\r\n  </block>	print("=== Testing your program... =============================")\r\ntest = 1\r\ntests = [(0.4, 10.3, 1.2, 40.4, '2.11'), (1.4, 4.3, 5.5, -90.0, '-29.60'), (8.3, 1.0, 6.7, 270.0, '-9.79')]\r\ndef verifier_results():\r\n    print('NT_VERIFIER_RESULTS:%d:%d' % (test-1, len(tests)))\r\n    import sys\r\n    sys.exit(0)\r\nfor (q, v, b, theta, answer) in tests:\r\n    print("TEST %d) Does magnetic_force(%.2f, %.2f, %.2f, %.2f) return %s?" % (test, q, v, b, theta, answer))\r\n    result = "%.2f" % magnetic_force(q, v, b, theta)\r\n    if result == answer:\r\n        print("\\t-> CORRECT")\r\n        test += 1\r\n    else:\r\n        print("\\t-> INCORRECT. Your code returns %s. Fix your mistake and try again." % result)\r\n        verifier_results()\r\nprint("ALL TESTS PASSED.")\r\nverifier_results()	11
