2	Pythagorean Theorem	In math class, you learned that the Pythagorean Theorem is:\r\n\r\n$$a^2 + b^2 = c^2$$\r\n\r\nIf we want <i>c</i>, we should compute:\r\n\r\n$$c = \\sqrt{a^2 + b^2}$$\r\n\r\nBut the Python code in this challenge is wrong:\r\n\r\n$$c = \\sqrt{a^0 + b^4}$$\r\n\r\nFix the problems in the Python code to solve this challenge.	<block type="import" id="0Xcbk;}s)B;A4ZCA#HK_" x="23" y="-4">\r\n    <field name="libname">math</field>\r\n    <next>\r\n      <block type="def" id="wEqNdngHsF3,wAs!~`V.">\r\n        <field name="funcname">pythagorean_theorem</field>\r\n        <field name="funcargs">a, b</field>\r\n        <statement name="funcbody">\r\n          <block type="return" id="h0OL/%;rSGYx-7SXyykw">\r\n            <field name="expr">math.sqrt(a**0 + b**4)</field>\r\n          </block>\r\n        </statement>\r\n      </block>\r\n    </next>\r\n  </block>	print("=== Testing your program... =============================")\r\ntest = 1\r\ntests = [(7,24,25), (5,12,13), (55,48,73), (3,4,5), (15,8,17), (35,12,37)]\r\ndef verifier_result():\r\n    print('NT_VERIFIER_RESULTS:%d:%d' % (test-1, len(tests)))\r\n    import sys\r\n    sys.exit(0)\r\nfor triple in tests:\r\n    print("TEST %d) Does pythagorean_theorem(%d, %d) return %d?" % (test, triple[0], triple[1], triple[2]))\r\n    result = pythagorean_theorem(triple[0], triple[1])\r\n    if result == triple[2]:\r\n        print("\\t-> CORRECT")\r\n        test += 1\r\n    else:\r\n        print("\\t-> INCORRECT. Your code returns %s. Fix the problem and try again." % result)\r\n        verifier_result()\r\nprint("ALL TESTS PASSED.")\r\nverifier_result()	2
5	Counting Numbers in a List	In this challenge, you are given Python code that is supposed to count how many numbers are in a list. However, the code is wrong because it always returns 0. Fix the problem to solve this challenge.	<block type="def" id="GcO3J!8*60i8lcVgVHy+" x="21" y="32">\r\n    <field name="funcname">count_numbers</field>\r\n    <field name="funcargs">list</field>\r\n    <statement name="funcbody">\r\n      <block type="varstore" id="#aY4~-Qj2*Y@U`;C*chv">\r\n        <field name="1">count</field>\r\n        <field name="2">0</field>\r\n        <next>\r\n          <block type="for" id="{uJIL:Z#4MOu1Z|h2F`N">\r\n            <field name="item">number</field>\r\n            <field name="seq">list</field>\r\n            <statement name="stmts">\r\n              <block type="varplus" id="1U_-^bZ7/XL{nI-0^L?a">\r\n                <field name="lhs">count</field>\r\n                <field name="rhs">0</field>\r\n              </block>\r\n            </statement>\r\n            <next>\r\n              <block type="return" id="Z0]k3`Lf,WAkG^y+rzS?">\r\n                <field name="expr">count</field>\r\n              </block>\r\n            </next>\r\n          </block>\r\n        </next>\r\n      </block>\r\n    </statement>\r\n    <next>\r\n      <block type="varprint" id="i2?q)r54tvP?k.!tt/v*">\r\n        <field name="var">count_numbers([])</field>\r\n        <next>\r\n          <block type="varprint" id="E/uMU58]]1O4yApp_:_b">\r\n            <field name="var">count_numbers([0])</field>\r\n            <next>\r\n              <block type="varprint" id="z_c~V`WmoTBH9bMtY(G;">\r\n                <field name="var">count_numbers([1,2,3])</field>\r\n                <next>\r\n                  <block type="varprint" id="S7`9jt+HLZuQ0kZR,SCc">\r\n                    <field name="var">count_numbers([7,5,10,9,7,55])</field>\r\n                  </block>\r\n                </next>\r\n              </block>\r\n            </next>\r\n          </block>\r\n        </next>\r\n      </block>\r\n    </next>\r\n  </block>	print("=== Testing your program... =============================")\r\ntest = 1\r\ntests = [([], 0), ([0], 1), ([1,2,3], 3), ([7,5,10,9,7,55], 6)]\r\ndef verifier_results():\r\n    print('NT_VERIFIER_RESULTS:%d:%d' % (test-1, len(tests)))\r\n    import sys\r\n    sys.exit(0)\r\nfor tuple in tests:\r\n    print("TEST %d) Does count_numbers(%s) return %d?" % (test, tuple[0], tuple[1]))\r\n    result = count_numbers(tuple[0])\r\n    if result == tuple[1]:\r\n        print("\\t-> CORRECT")\r\n        test += 1\r\n    else:\r\n        print("\\t-> INCORRECT. Your code returns %s. Fix your mistake and try again." % result)\r\n        verifier_results()\r\nprint("ALL TESTS PASSED.")\r\nverifier_results()	1
3	Guanine in DNA	There are four bases in DNA: <b>G</b> (guanine), <b>C</b> (cytosine), <b>A</b> (adenine), and <b>T</b> (thymine). Here is a strand of DNA without guanine in it:\r\n\r\n$$'ATACCATAACCAAATTTTAA'$$\r\n\r\nAnd here is a strand of DNA with guanine in it:\r\n\r\n$$'AGGGGGTTATTACCCATACA'$$\r\n\r\nComplete the Python program so that it returns <i>True</i> if guanine is inside the DNA given to it. If there is no guanine inside the DNA, return <i>False</i>.	<block type="def" id="`Irgur8Q|lxOOLOdIK:i" x="-115" y="16">\r\n    <field name="funcname">guanine_iko</field>\r\n    <field name="funcargs">dna</field>\r\n    <statement name="funcbody">\r\n      <block type="for" id="E*`.ZX}zjM9BHPva@Ja*">\r\n        <field name="item">base</field>\r\n        <field name="seq">dna</field>\r\n        <statement name="stmts">\r\n          <block type="varprint" id="vy)x}JdL;`*pJXh|Mg0J">\r\n            <field name="var">base</field>\r\n          </block>\r\n        </statement>\r\n      </block>\r\n    </statement>\r\n  </block>	print("=== Testing your program... =============================")\r\ntest = 1\r\ntests = [('ACDCADCD', False), ('GGGGGGGG', True), ('AGCDACD', True), ('', False), ('AAAAAA', False)]\r\ndef verifier_results():\r\n    print('NT_VERIFIER_RESULTS:%d:%d' % (test-1, len(tests)))\r\n    import sys\r\n    sys.exit(0)\r\nfor tuple in tests:\r\n    print("TEST %d) Does guanine_iko('%s') return %s?" % (test, tuple[0], tuple[1]))\r\n    result = guanine_iko(tuple[0])\r\n    if result == tuple[1]:\r\n        print("\\t-> CORRECT")\r\n        test += 1\r\n    else:\r\n        print("\\t-> INCORRECT. Your code returns %s. Fix your mistake and try again." % result)\r\n        verifier_results()\r\nprint("ALL TESTS PASSED.")\r\nverifier_results()	3
1	Nyerere Alikuwa Rais Lini?	Julius Nyerere was president of Tanzania from 29 October 1964 to 5 November 1985. This Python code should return <i>True</i> if <i>mwaka</i> is 1964, 1965, 1966, ..., or 1985. Otherwise it should return <i>False</i>.\r\n\r\nIf you need to compare <i>mwaka</i> to a number, here are some examples:\r\n<ul>\r\n  <li><i>mwaka <= 1964</i> means "if mwaka is less than or equal to 1964"</li>\r\n  <li><i>mwaka < 1964</i> means "if mwaka is less than 1964"</li>\r\n  <li><i>mwaka >= 1964</i> means "if mwaka is greater than or equal to 1964"</li>\r\n  <li><i>mwaka > 1964</i> means "if mwaka is greater than 1964"</li>\r\n</ul>\r\n\r\nYou can also use <i>and</i> and <i>or</i> in Python:\r\n<ul>\r\n  <li><i>mwaka >= 1964 and mwaka <= 1985</i> means "if mwaka is greater than or equal to 1964 <b>and</b> mwaka is less than or equal to 1985"</li>\r\n    <li><i>mwaka >= 1964 or mwaka <= 1985</i> means "if mwaka is greater than or equal to 1964 <b>or</b> mwaka is less than or equal to 1985"</li>\r\n</ul>	<block type="def" id="TAMx+q;=6`ZA(NeWNu)Z" x="62" y="27">\r\n    <field name="funcname">nyerere_alikuwa_rais</field>\r\n    <field name="funcargs">mwaka</field>\r\n    <statement name="funcbody">\r\n      <block type="if" id="uPl[-k5!;px+OzT|5m*#">\r\n        <field name="expr">mwaka == 0</field>\r\n        <statement name="stmts">\r\n          <block type="return" id="Jh3F7y};iJ|p+@cBr@6n">\r\n            <field name="expr">True</field>\r\n          </block>\r\n        </statement>\r\n        <next>\r\n          <block type="else" id="6nvU|J}s1GJF+eR_qggz">\r\n            <statement name="DO">\r\n              <block type="return" id="hN5btF:qKB;+jL]xmzF{">\r\n                <field name="expr">False</field>\r\n              </block>\r\n            </statement>\r\n          </block>\r\n        </next>\r\n      </block>\r\n    </statement>\r\n  </block>	print("=== Testing your program... =============================")\r\ntest = 1\r\ntests = range(1960, 1991)\r\ndef verifier_results():\r\n    print('NT_VERIFIER_RESULTS:%d:%d' % (test-1, len(tests)))\r\n    import sys\r\n    sys.exit(0)\r\nfor year in tests:\r\n    answer = False\r\n    if year >= 1964 and year <= 1985:\r\n      answer = True\r\n    print("TEST %d) Does nyerere_alikuwa_rais(%d) return %s?" % (test, year, answer))\r\n    result = nyerere_alikuwa_rais(year)\r\n    if result == answer:\r\n        print("\\t-> CORRECT")\r\n        test += 1\r\n    else:\r\n        print("\\t-> INCORRECT. Your code returns %s. Fix your mistake and try again." % result)\r\n        verifier_results()\r\nprint("ALL TESTS PASSED.")\r\nverifier_results()	3
8	"School Senior Secondary Tumaini"	This Python program prints:\r\n\r\n$$School\\ Senior\\ Secondary\\ Tumaini$$\r\n\r\nChange the <i>name</i> variable so that the order of the words is correct. Your program should print:\r\n\r\n$$Tumaini\\ Senior\\ Secondary\\ School$$	<block type="varstore" id=",h~)CdKU?P.XHoepgcNL" x="-620" y="38">\r\n    <field name="1">first</field>\r\n    <field name="2">"Tumaini"</field>\r\n    <next>\r\n      <block type="varstore" id="Ut#yb[Il;%(u`/IuID8%">\r\n        <field name="1">second</field>\r\n        <field name="2">"Senior"</field>\r\n        <next>\r\n          <block type="varstore" id="]#zpbw`k!DVSTu=(?~Qt">\r\n            <field name="1">third</field>\r\n            <field name="2">"Secondary"</field>\r\n            <next>\r\n              <block type="varstore" id="JN=P9R4E_@Mc*byP+BEK">\r\n                <field name="1">fourth</field>\r\n                <field name="2">"School"</field>\r\n                <next>\r\n                  <block type="varstore" id="E0/==jg1(Uh1(uQq9MkS">\r\n                    <field name="1">name</field>\r\n                    <field name="2">"%s %s %s %s" % (fourth, second, third, first)</field>\r\n                    <next>\r\n                      <block type="varprint" id="gK6)g/P4m.-bk+yl7uPJ">\r\n                        <field name="var">name</field>\r\n                      </block>\r\n                    </next>\r\n                  </block>\r\n                </next>\r\n              </block>\r\n            </next>\r\n          </block>\r\n        </next>\r\n      </block>\r\n    </next>\r\n  </block>	print("=== Testing your program... =============================")\r\ntest = 1\r\ntests = [("first", first, "Tumaini"), ("second", second, "Senior"), ("third", third, "Secondary"), ("fourth", fourth, "School"), ("name", name, "Tumaini Senior Secondary School")]\r\ndef verifier_results():\r\n    print('NT_VERIFIER_RESULTS:%d:%d' % (test-1, len(tests)))\r\n    import sys\r\n    sys.exit(0)\r\nfor (varname, var, answer) in tests:\r\n    print("TEST %d) Is %s equal to '%s'?" % (test, varname, answer))\r\n    if var == answer:\r\n        print("\\t-> CORRECT")\r\n        test += 1\r\n    else:\r\n        print("\\t-> INCORRECT. %s is equal to '%s' . Fix your mistake and try again." % (varname, var))\r\n        verifier_results()\r\nprint("ALL TESTS PASSED.")\r\nverifier_results()	1
6	Odd and Even	In this challenge, you are given code that puts 5 inside the variable <i>n</i>, then displays whether <i>n</i> is odd and whether it is even.\r\n\r\n<br/><br/>\r\n\r\nChange the code so that <i>n</i> contains any even number, not an odd number.	<block type="varstore" id="xRLmA07lvm4%Gg!g.{(F" x="-222" y="28">\r\n    <field name="1">n</field>\r\n    <field name="2">5</field>\r\n    <next>\r\n      <block type="varprint" id="|E~!YrZ5.r7PXpnTk6c:">\r\n        <field name="var">"Is %d odd: %s" % (n, n % 2 == 1)</field>\r\n        <next>\r\n          <block type="varprint" id="PFVe*2}N6O[_7PWu}d=:">\r\n            <field name="var">"Is %d even: %s" % (n, n % 2 == 0)</field>\r\n          </block>\r\n        </next>\r\n      </block>\r\n    </next>\r\n  </block>	print("=== Testing your program... =============================")\r\ntest = 1\r\ntests = [True]\r\ndef verifier_results():\r\n    print('NT_VERIFIER_RESULTS:%d:%d' % (test-1, len(tests)))\r\n    import sys\r\n    sys.exit(0)\r\nfor answer in tests:\r\n    print("TEST %d) Is n even?" % test)\r\n    result = (n % 2 == 0)\r\n    if result == answer:\r\n        print("\\t-> CORRECT")\r\n        test += 1\r\n    else:\r\n        print("\\t-> INCORRECT. You put an odd number in n. Fix your mistake and try again.")\r\n        verifier_results()\r\nprint("ALL TESTS PASSED.")\r\nverifier_results()	1
7	Shule Iko Wapi?	This program first puts "Karatu" inside the variable <i>mahali</i>.Then it puts "TJS" inside the variable <i>shule</i>, kwa hiyo inasema "TJS iko Karatu."\r\n\r\n<br/><br/>\r\n\r\nChange the value of the <i>mahali</i> variable so that it prints "TSSS iko Makuyuni" instead.	<block type="varstore" id="=0p)}y/T},b2[uB.;6{`" x="-436" y="24">\r\n    <field name="1">mahali</field>\r\n    <field name="2">"Karatu"</field>\r\n    <next>\r\n      <block type="if" id="#!#%YElqI6Par-e+!JF2">\r\n        <field name="expr">mahali == "Karatu"</field>\r\n        <statement name="stmts">\r\n          <block type="varstore" id="2+bivTUv~sT:*gbfJ|U9">\r\n            <field name="1">shule</field>\r\n            <field name="2">"TJS"</field>\r\n          </block>\r\n        </statement>\r\n        <next>\r\n          <block type="elif" id="Z22_Fi}`*kNR:nrUdSDC">\r\n            <field name="expr">mahali == "Makuyuni"</field>\r\n            <statement name="stmts">\r\n              <block type="varstore" id="~.t_DNs=07i!.p,mnWpK">\r\n                <field name="1">shule</field>\r\n                <field name="2">"TSSS"</field>\r\n              </block>\r\n            </statement>\r\n            <next>\r\n              <block type="else" id="Lo#H:*tvL*)]X=zFziqK">\r\n                <statement name="DO">\r\n                  <block type="varstore" id="n_!st2SljSa{9O{^./;7">\r\n                    <field name="1">shule</field>\r\n                    <field name="2">"Shule nyingine"</field>\r\n                  </block>\r\n                </statement>\r\n                <next>\r\n                  <block type="varprint" id="[(i[%koKVrC?f:ys{sS?">\r\n                    <field name="var">"%s iko %s." % (shule, mahali)</field>\r\n                  </block>\r\n                </next>\r\n              </block>\r\n            </next>\r\n          </block>\r\n        </next>\r\n      </block>\r\n    </next>\r\n  </block>	print("=== Testing your program... =============================")\r\ntest = 1\r\ntests = [("mahali", mahali, "Makuyuni"), ("shule", shule, "TSSS")]\r\ndef verifier_results():\r\n    print('NT_VERIFIER_RESULTS:%d:%d' % (test-1, len(tests)))\r\n    import sys\r\n    sys.exit(0)\r\nfor (varname, var, answer) in tests:\r\n    print("TEST %d) Is %s equal to '%s'?" % (test, varname, answer))\r\n    if var == answer:\r\n        print("\\t-> CORRECT")\r\n        test += 1\r\n    else:\r\n        print("\\t-> INCORRECT. %s is equal to '%s' . Fix your mistake and try again." % (varname, var))\r\n        verifier_results()\r\nprint("ALL TESTS PASSED.")\r\nverifier_results()	1
9	Count to 10	This Python program counts to 5.\r\n\r\n<br/><br/>\r\n\r\nChange the program so that it counts to 10 instead.	<block type="varstore" id="#a@`o{o?}ZcP%xj?+I}w" x="88" y="61">\r\n    <field name="1">n</field>\r\n    <field name="2">1</field>\r\n    <next>\r\n      <block type="while" id="P1uOf?q.ovrbm.`n/|U%">\r\n        <field name="expr">n &lt;= 5</field>\r\n        <statement name="stmts">\r\n          <block type="varprint" id="ff`P4+ZJI0Z%M+4vyGw@">\r\n            <field name="var">n</field>\r\n            <next>\r\n              <block type="varplus" id="sVwC0?WX4S{opsA!O.DN">\r\n                <field name="lhs">n</field>\r\n                <field name="rhs">1</field>\r\n              </block>\r\n            </next>\r\n          </block>\r\n        </statement>\r\n      </block>\r\n    </next>\r\n  </block>	print("=== Testing your program... =============================")\r\ntest = 1\r\ntests = [("n", n, 11)]\r\ndef verifier_results():\r\n    print('NT_VERIFIER_RESULTS:%d:%d' % (test-1, len(tests)))\r\n    import sys\r\n    sys.exit(0)\r\nfor (varname, var, answer) in tests:\r\n    print("TEST %d) Did you count to %d?" % (test, answer-1))\r\n    if var == answer:\r\n        print("\\t-> CORRECT")\r\n        test += 1\r\n    else:\r\n        print("\\t-> INCORRECT. You counted to %d. Fix your mistake and try again." % (var-1))\r\n        verifier_results()\r\nprint("ALL TESTS PASSED.")\r\nverifier_results()	1
10	Meza Ngapi?	This Python program asks you a question. Answer the question correctly to complete this challenge.	<block type="varstore" id="WeW)x7u~l_7D(xO2v5la" x="59" y="71">\r\n    <field name="1">jibu</field>\r\n    <field name="2">int(input("Chumba cha kompyuta kina meza ngapi? "))</field>\r\n    <next>\r\n      <block type="if" id="#GGLZ@i?l,1UpeWKpZP`">\r\n        <field name="expr">jibu &lt; 6</field>\r\n        <statement name="stmts">\r\n          <block type="print" id="5`qNmp[xYyichAP[eg_[">\r\n            <field name="print">Ongeza.</field>\r\n          </block>\r\n        </statement>\r\n        <next>\r\n          <block type="elif" id="P!!D5ciA79,jN@95DpJ0">\r\n            <field name="expr">jibu &gt; 6</field>\r\n            <statement name="stmts">\r\n              <block type="print" id="!;SKWbHf:#jxYI=/79jo">\r\n                <field name="print">Punguza.</field>\r\n              </block>\r\n            </statement>\r\n            <next>\r\n              <block type="else" id="%0w@4~gGVobBaz=jA/{J">\r\n                <statement name="DO">\r\n                  <block type="print" id="2kM6k+IS]M%sfD*JS.5^">\r\n                    <field name="print">Ndiyo.</field>\r\n                  </block>\r\n                </statement>\r\n              </block>\r\n            </next>\r\n          </block>\r\n        </next>\r\n      </block>\r\n    </next>\r\n  </block>	print("=== Testing your program... =============================")\r\ntest = 1\r\ntests = [("jibu", jibu, 6)]\r\ndef verifier_results():\r\n    print('NT_VERIFIER_RESULTS:%d:%d' % (test-1, len(tests)))\r\n    import sys\r\n    sys.exit(0)\r\nfor (varname, var, answer) in tests:\r\n    print("TEST %d) Did you answer correctly?" % test)\r\n    if var == answer:\r\n        print("\\t-> CORRECT")\r\n        test += 1\r\n    else:\r\n        print("\\t-> INCORRECT. You answered %d. Try again." % var)\r\n        verifier_results()\r\nprint("ALL TESTS PASSED.")\r\nverifier_results()	1
4	Sum of Two Numbers	This Python program puts 5 in <i>a</i> and 8 in <i>b</i>. The sum of 5 and 8 is 13.\r\n\r\n<br/><br/>\r\n\r\nChange <i>a</i> and/or <i>b</i> so that <i>a + b</i> is equal to 24 instead of 13.	<block type="varstore" id="1:P*HYm|hXRm=cpRB9E;" x="41" y="27">\r\n    <field name="1">a</field>\r\n    <field name="2">5</field>\r\n    <next>\r\n      <block type="varprint" id="6}W9X,;@lXy1p[JG4m#g">\r\n        <field name="var">a</field>\r\n        <next>\r\n          <block type="varstore" id="HGB37-aOC?JegEk6`Ul?">\r\n            <field name="1">b</field>\r\n            <field name="2">8</field>\r\n            <next>\r\n              <block type="varprint" id="`6lS*hAWS[={Qp91ETQU">\r\n                <field name="var">b</field>\r\n                <next>\r\n                  <block type="varstore" id="Zs?I{g}cm#Q1J]~]iI,-">\r\n                    <field name="1">sum</field>\r\n                    <field name="2">a + b</field>\r\n                    <next>\r\n                      <block type="varprint" id="Ku=^]/#dg*pYr3AZ.z-t">\r\n                        <field name="var">sum</field>\r\n                      </block>\r\n                    </next>\r\n                  </block>\r\n                </next>\r\n              </block>\r\n            </next>\r\n          </block>\r\n        </next>\r\n      </block>\r\n    </next>\r\n  </block>	print("=== Testing your program... =============================")\r\ntest = 1\r\ntests = [24]\r\ndef verifier_results():\r\n    print('NT_VERIFIER_RESULTS:%d:%d' % (test-1, len(tests)))\r\n    import sys\r\n    sys.exit(0)\r\nfor sum in tests:\r\n    print("TEST %d) Does (a + b) sum to %s?" % (test, sum))\r\n    result = a + b\r\n    if result == sum:\r\n        print("\\t-> CORRECT")\r\n        test += 1\r\n    else:\r\n        print("\\t-> INCORRECT. Your code returns %s. Fix your mistake and try again." % result)\r\n        verifier_results()\r\nprint("ALL TESTS PASSED.")\r\nverifier_results()	1
11	Sum Function	This Python code has a function to calculate the sum of two numbers, but it always returns 0 no matter what numbers it's given.\r\n\r\n<br/><br/>\r\n\r\nFix the code so that it returns the correct sum for any two numbers.	<block type="def" id="buKm|`z#dn.^?[1H,/BB" x="28" y="14">\r\n    <field name="funcname">sum</field>\r\n    <field name="funcargs">a, b</field>\r\n    <statement name="funcbody">\r\n      <block type="return" id="[Fma8xw`TO!%OGq(7Hmp">\r\n        <field name="expr">0</field>\r\n      </block>\r\n    </statement>\r\n    <next>\r\n      <block type="varprint" id="ob^+GyBxzF9UO:wH0g#3">\r\n        <field name="var">"Sum of 0 and 0: %d" % sum(0, 0)</field>\r\n        <next>\r\n          <block type="varprint" id="/jF3_#)Y3qGG5FPdDyTr">\r\n            <field name="var">"Sum of 1 and 2: %d" % sum(1, 2)</field>\r\n            <next>\r\n              <block type="varprint" id="|+`;]r:Hg@/Sd.}(Q.rm">\r\n                <field name="var">"Sum of 4 and 5: %d" % sum(4, 5)</field>\r\n                <next>\r\n                  <block type="varprint" id="3E.tad%3}poR=(ZH`41b">\r\n                    <field name="var">"Sum of 100 and 8: %d" % sum(100, 8)</field>\r\n                  </block>\r\n                </next>\r\n              </block>\r\n            </next>\r\n          </block>\r\n        </next>\r\n      </block>\r\n    </next>\r\n  </block>	print("=== Testing your program... =============================")\r\ntest = 1\r\ntests = [(0,0,0), (1,2,3), (4,5,9), (100,8,108), (50,200,250), (7,-20,-13), (-4, -4, -8)]\r\ndef verifier_result():\r\n    print('NT_VERIFIER_RESULTS:%d:%d' % (test-1, len(tests)))\r\n    import sys\r\n    sys.exit(0)\r\nfor triple in tests:\r\n    print("TEST %d) Does sum(%d, %d) return %d?" % (test, triple[0], triple[1], triple[2]))\r\n    result = sum(triple[0], triple[1])\r\n    if result == triple[2]:\r\n        print("\\t-> CORRECT")\r\n        test += 1\r\n    else:\r\n        print("\\t-> INCORRECT. Your code returns %s. Fix the problem and try again." % result)\r\n        verifier_result()\r\nprint("ALL TESTS PASSED.")\r\nverifier_result()	1
